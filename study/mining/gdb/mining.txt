Breakpoint 1 at 0x7f739270750a: file rpc/mining.cpp, line 155.
Breakpoint 2 at 0x7f7392706ec4: file rpc/mining.cpp, line 107.
Breakpoint 3 at 0x7f739292dda5: file miner.cpp, line 437.
Breakpoint 4 at 0x7f7392b10b34: file consensus/merkle.cpp, line 159.
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00007f739270750a in generatetoaddress(JSONRPCRequest const&) at rpc/mining.cpp:155
2       breakpoint     keep y   0x00007f7392706ec4 in generateBlocks(std::shared_ptr<CReserveScript>, int, unsigned long, bool) at rpc/mining.cpp:107
3       breakpoint     keep y   0x00007f739292dda5 in IncrementExtraNonce(CBlock*, CBlockIndex const*, unsigned int&) 
                                                   at miner.cpp:437
4       breakpoint     keep y   0x00007f7392b10b34 in BlockMerkleRoot(CBlock const&, bool*) at consensus/merkle.cpp:159
Breakpoint 5 at 0x7f7392816108: file validation.cpp, line 3487.
Undefined info command: "obreak ".  Try "help info".
Continuing.
[Switching to Thread 0x7f738c478700 (LWP 15642)]

Breakpoint 1, generatetoaddress (request=...) at rpc/mining.cpp:155
155	{
Continuing.
[Switching to Thread 0x7f738bc77700 (LWP 15643)]

Breakpoint 1, generatetoaddress (request=...) at rpc/mining.cpp:155
155	{
Continuing.

Breakpoint 2, generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f73953b9890, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:107
107	{
109	    int nHeightEnd = 0;
Continuing.

Breakpoint 5, TestBlockValidity (state=..., chainparams=..., block=..., pindexPrev=0x7f739547c2a0, fCheckPOW=false, 
    fCheckMerkleRoot=false) at validation.cpp:3487
3487	{
Continuing.

Breakpoint 3, IncrementExtraNonce (pblock=0x7f73952f6de0, pindexPrev=0x7f739547c2a0, nExtraNonce=@0x7f738bc763a4: 0)
    at miner.cpp:437
437	{
Continuing.

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x0) at consensus/merkle.cpp:159
159	{
Continuing.

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x7f738bc761b7) at consensus/merkle.cpp:159
159	{
Continuing.
[Switching to Thread 0x7f738c478700 (LWP 15642)]

Breakpoint 1, generatetoaddress (request=...) at rpc/mining.cpp:155
155	{
Continuing.

Breakpoint 2, generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001710, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:107
107	{
109	    int nHeightEnd = 0;
No symbol "request" in current context.
Continuing.

Breakpoint 5, TestBlockValidity (state=..., chainparams=..., block=..., pindexPrev=0x7f73953f9ec0, fCheckPOW=false, 
    fCheckMerkleRoot=false) at validation.cpp:3487
3487	{
Continuing.

Breakpoint 3, IncrementExtraNonce (pblock=0x7f73680008c0, pindexPrev=0x7f73953f9ec0, nExtraNonce=@0x7f738c4773a4: 0)
    at miner.cpp:437
437	{
Continuing.

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x0) at consensus/merkle.cpp:159
159	{
Continuing.

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x7f738c4771b7) at consensus/merkle.cpp:159
159	{
Continuing.
[Switching to Thread 0x7f738bc77700 (LWP 15643)]

Breakpoint 1, generatetoaddress (request=...) at rpc/mining.cpp:155
155	{
Continuing.

Breakpoint 2, generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f73953b9430, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:107
107	{
Continuing.

Breakpoint 5, TestBlockValidity (state=..., chainparams=..., block=..., pindexPrev=0x7f73680011d0, fCheckPOW=false, 
    fCheckMerkleRoot=false) at validation.cpp:3487
3487	{
Continuing.

Breakpoint 3, IncrementExtraNonce (pblock=0x7f739525b7c0, pindexPrev=0x7f73680011d0, nExtraNonce=@0x7f738bc763a4: 0)
    at miner.cpp:437
437	{
Continuing.

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x0) at consensus/merkle.cpp:159
159	{
Continuing.

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x7f738bc761b7) at consensus/merkle.cpp:159
159	{
Continuing.
[Switching to Thread 0x7f738c478700 (LWP 15642)]

Breakpoint 1, generatetoaddress (request=...) at rpc/mining.cpp:155
155	{
156	    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)
$1 = (const JSONRPCRequest &) @0x7f738c477b90: {id = {typ = 0x4, val = "1", keys = std::vector of length 0, capacity 0, 
    values = std::vector of length 0, capacity 0}, strMethod = "generatetoaddress", params = {typ = 0x2, val = "", 
    keys = std::vector of length 0, capacity 0, values = std::vector of length 2, capacity 2 = {{typ = 0x4, val = "1", 
        keys = std::vector of length 0, capacity 0, values = std::vector of length 0, capacity 0}, {typ = 0x3, 
        val = "2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", keys = std::vector of length 0, capacity 0, 
        values = std::vector of length 0, capacity 0}}}, fHelp = 0x0, URI = "/", authUser = ""}
$2 = (const JSONRPCRequest &) @0x7f738c477b90: {
  id = {
    typ = 0x4, 
    val = "1", 
    keys = std::vector of length 0, capacity 0, 
    values = std::vector of length 0, capacity 0
  }, 
  strMethod = "generatetoaddress", 
  params = {
    typ = 0x2, 
    val = "", 
    keys = std::vector of length 0, capacity 0, 
    values = std::vector of length 2, capacity 2 = {{
        typ = 0x4, 
        val = "1", 
        keys = std::vector of length 0, capacity 0, 
        values = std::vector of length 0, capacity 0
      }, {
        typ = 0x3, 
        val = "2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", 
        keys = std::vector of length 0, capacity 0, 
        values = std::vector of length 0, capacity 0
      }}
  }, 
  fHelp = 0x0, 
  URI = "/", 
  authUser = ""
}
171	    int nGenerate = request.params[0].get_int();
172	    uint64_t nMaxTries = 1000000;
$3 = 0x1
173	    if (!request.params[2].isNull()) {
177	    CTxDestination destination = DecodeDestination(request.params[1].get_str());
$4 = "2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ"
$5 = (const UniValue &) @0x7f7368000918: {
  typ = 0x3, 
  val = "2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", 
  keys = std::vector of length 0, capacity 0, 
  values = std::vector of length 0, capacity 0
}
178	    if (!IsValidDestination(destination)) {
Quit
$6 = {
  which_ = 0x2, 
  storage_ = {
    <boost::detail::aligned_storage::aligned_storage_imp<48ul, 4ul>> = {
      data_ = {
        buf = {0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 
          0x79, 0xc8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x76, 0x47, 0x8c, 0x73, 0x7f, 0x0, 0x0, 0xef, 0xc6, 0x75, 
          0x92, 0x73, 0x7f, 0x0, 0x0, 0x0, 0x22, 0x12, 0x93}, 
        align_ = {<No data fields>}
      }
    }, 
    members of boost::aligned_storage<48ul, 4ul>: 
    static size = <optimized out>, 
    static alignment = <optimized out>
  }
}
Ambiguous command "w": watch, wh, whatis, where, while, while-stepping, winheight, ws.
182	    std::shared_ptr<CReserveScript> coinbaseScript = std::make_shared<CReserveScript>();
183	    coinbaseScript->reserveScript = GetScriptForDestination(destination);
185	    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);
$7 = {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x17, 
    _union = {
      direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 
        0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
      {
        capacity = 0x7a0714a9, 
        indirect = 0x71f2af7e703d4c41
      }
    }
  }, <No data fields>}
Could not find operator*.
$8 = std::shared_ptr (count 1, weak 0) 0x7f7368001080
Cannot evaluate function -- may be inlined
type = class CReserveScript {
  public:
    CScript reserveScript;

    CReserveScript(void);
    virtual void KeepScript(void);
    ~CReserveScript(int);
}

Breakpoint 2, generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001080, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:107
107	{
109	    int nHeightEnd = 0;
110	    int nHeight = 0;
113	        LOCK(cs_main);
114	        nHeight = chainActive.Height();
115	        nHeightEnd = nHeight+nGenerate;
$9 = 0x3e2
$10 = 994
Breakpoint 6 at 0x7f739292b697: file miner.cpp, line 103.
#0  generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001080, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:115
115	        nHeightEnd = nHeight+nGenerate;
113	        LOCK(cs_main);
117	    unsigned int nExtraNonce = 0;
118	    UniValue blockHashes(UniValue::VARR);
119	    while (nHeight < nHeightEnd)
121	        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript->reserveScript));

Breakpoint 6, BlockAssembler::CreateNewBlock (this=0x7f738c4773d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:103
103	{
$11 = {
  pblocktemplate = std::unique_ptr<CBlockTemplate> containing 0x0, 
  pblock = 0x7f7392ad4c00, 
  fIncludeWitness = 0x40, 
  nBlockMaxWeight = 0x3cf960, 
  blockMinFeeRate = {
    nSatoshisPerK = 0x3e8
  }, 
  nBlockWeight = 0x18c477420, 
  nBlockTx = 0x7f7368001078, 
  nBlockSigOpsCost = 0x7f738c477480, 
  nFees = 0x844f50f8e8f6ad00, 
  inBlock = std::set with 0 elements, 
  nHeight = 0x8c477470, 
  nLockTimeCutoff = 0x7f73926680b2, 
  chainparams = @0x7f7394783250
}
104	    int64_t nTimeStart = GetTimeMicros();
$12 = (const CScript &) @0x7f7368001088: {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x17, 
    _union = {
      direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 
        0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
      {
        capacity = 0x7a0714a9, 
        indirect = 0x71f2af7e703d4c41
      }
    }
  }, <No data fields>}
106	    resetBlock();
108	    pblocktemplate.reset(new CBlockTemplate());
110	    if(!pblocktemplate.get())
$13 = std::unique_ptr<CBlockTemplate> containing 0x7f7368001790
Could not find operator*.
$14 = {
  block = {
    <CBlockHeader> = {
      nVersion = 0x0, 
      hashPrevBlock = {
        <base_blob<256u>> = {
          static WIDTH = 0x20, 
          data = {0x0 <repeats 32 times>}
        }, <No data fields>}, 
      hashMerkleRoot = {
        <base_blob<256u>> = {
          static WIDTH = 0x20, 
          data = {0x0 <repeats 32 times>}
        }, <No data fields>}, 
      nTime = 0x0, 
      nBits = 0x0, 
      nNonce = 0x0
    }, 
    members of CBlock: 
    vtx = std::vector of length 0, capacity 0, 
    fChecked = 0x0
  }, 
  vTxFees = std::vector of length 0, capacity 0, 
  vTxSigOpsCost = std::vector of length 0, capacity 0, 
  vchCoinbaseCommitment = std::vector of length 0, capacity 0
}
112	    pblock = &pblocktemplate->block; // pointer for convenience
115	    pblock->vtx.emplace_back();
$15 = 0x7f7368001790
$16 = {
  <CBlockHeader> = {
    nVersion = 0x0, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x0, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 0, capacity 0, 
  fChecked = 0x0
}
116	    pblocktemplate->vTxFees.push_back(-1); // updated at end
$17 = {
  <CBlockHeader> = {
    nVersion = 0x0, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x0, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (empty) 0x0}, 
  fChecked = 0x0
}
117	    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end
119	    LOCK2(cs_main, mempool.cs);
$18 = {
  <CBlockHeader> = {
    nVersion = 0x0, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x0, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (empty) 0x0}, 
  fChecked = 0x0
}
$19 = {
  block = {
    <CBlockHeader> = {
      nVersion = 0x0, 
      hashPrevBlock = {
        <base_blob<256u>> = {
          static WIDTH = 0x20, 
          data = {0x0 <repeats 32 times>}
        }, <No data fields>}, 
      hashMerkleRoot = {
        <base_blob<256u>> = {
          static WIDTH = 0x20, 
          data = {0x0 <repeats 32 times>}
        }, <No data fields>}, 
      nTime = 0x0, 
      nBits = 0x0, 
      nNonce = 0x0
    }, 
    members of CBlock: 
    vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (empty) 0x0}, 
    fChecked = 0x0
  }, 
  vTxFees = std::vector of length 1, capacity 1 = {0xffffffffffffffff}, 
  vTxSigOpsCost = std::vector of length 1, capacity 1 = {0xffffffffffffffff}, 
  vchCoinbaseCommitment = std::vector of length 0, capacity 0
}
120	    CBlockIndex* pindexPrev = chainActive.Tip();
121	    assert(pindexPrev != nullptr);
$20 = 0x7f739466ed20
$21 = {
  phashBlock = 0x7f73953b9888, 
  pprev = 0x7f73680011d0, 
  pskip = 0x7f73953f9ec0, 
  nHeight = 0x3e2, 
  nFile = 0x0, 
  nDataPos = 0x3f659, 
  nUndoPos = 0x9fae, 
  nChainWork = {
    <base_uint<256u>> = {
      static WIDTH = 0x8, 
      pn = {0x7c6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
    }, <No data fields>}, 
  nTx = 0x1, 
  nChainTx = 0x3e7, 
  nStatus = 0x9d, 
  nVersion = 0x20000000, 
  hashMerkleRoot = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0xa8, 0x66, 0xae, 0xb6, 0xf6, 0x5c, 0x84, 0x41, 0x83, 0x2f, 0x63, 0xad, 0xc5, 0xd1, 0xfc, 0x53, 0xc0, 0xad, 
        0x59, 0x34, 0x5, 0xe4, 0xd7, 0xef, 0x2b, 0x69, 0x66, 0xbf, 0xc3, 0xb3, 0x81, 0xe7}
    }, <No data fields>}, 
  nTime = 0x5b9ebe7b, 
  nBits = 0x207fffff, 
  nNonce = 0x0, 
  nSequenceId = 0x3, 
  nTimeMax = 0x5b9ebe7b, 
  static nMedianTimeSpan = 0xb
}
$22 = 994
122	    nHeight = pindexPrev->nHeight + 1;
124	    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());
127	    if (chainparams.MineBlocksOnDemand())
$23 = 0x20000000
128	        pblock->nVersion = gArgs.GetArg("-blockversion", pblock->nVersion);
130	    pblock->nTime = GetAdjustedTime();
131	    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();
$24 = 0x5b9ecc67
133	    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)
143	    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) && fMineWitnessTx;
145	    int nPackagesSelected = 0;
146	    int nDescendantsUpdated = 0;
147	    addPackageTxs(nPackagesSelected, nDescendantsUpdated);
149	    int64_t nTime1 = GetTimeMicros();
151	    nLastBlockTx = nBlockTx;
152	    nLastBlockWeight = nBlockWeight;
155	    CMutableTransaction coinbaseTx;
156	    coinbaseTx.vin.resize(1);
No symbol "coinBaseTx" in current context.
$25 = {
  vin = std::vector of length 0, capacity 0, 
  vout = std::vector of length 0, capacity 0, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
157	    coinbaseTx.vin[0].prevout.SetNull();
158	    coinbaseTx.vout.resize(1);
159	    coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;
$26 = {
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0 <repeats 32 times>}
          }, <No data fields>}, 
        n = 0xffffffff
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x0 <repeats 28 times>}, 
            {
              capacity = 0x0, 
              indirect = 0x0
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 1, capacity 1 = {{
      nValue = 0xffffffffffffffff, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x0 <repeats 28 times>}, 
            {
              capacity = 0x0, 
              indirect = 0x0
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
160	    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());
161	    coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;
162	    pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));
163	    pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());
$27 = {
  vin = std::vector of length 0, capacity 0, 
  vout = std::vector of length 0, capacity 0, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
Breakpoint 7 at 0x7f7392813032: file validation.cpp, line 3110.
Continuing.

Breakpoint 7, GenerateCoinbaseCommitment (block=..., pindexPrev=0x7f739466ed20, consensusParams=...) at validation.cpp:3110
3110	{
$28 = (CBlock &) @0x7f7368001790: {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x5b9ecc67, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (count 1, weak 0) 0x7f73680013f0}, 
  fChecked = 0x0
}
$29 = std::vector of length 1, capacity 1 = {std::shared_ptr (count 1, weak 0) 0x7f73680013f0}
$30 = std::shared_ptr (count 1, weak 0) 0x7f73680013f0
$31 = 0x7f73680013f0
$32 = {
  static CURRENT_VERSION = 0x2, 
  static MAX_STANDARD_VERSION = 0x2, 
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0 <repeats 32 times>}
          }, <No data fields>}, 
        n = 0xffffffff
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x4, 
          _union = {
            direct = {0x2, 0xe3, 0x3, 0x0 <repeats 25 times>}, 
            {
              capacity = 0x3e302, 
              indirect = 0x0
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 1, capacity 1 = {{
      nValue = 0x4a817c8, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0, 
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0xe9, 0x80, 0x67, 0xc, 0x6b, 0x4, 0x52, 0x2f, 0x30, 0x91, 0x88, 0xee, 0x7b, 0x33, 0xd6, 0x3c, 0x8b, 0x96, 0xff, 
        0xf, 0xc7, 0x6c, 0xbf, 0xc4, 0x23, 0x20, 0x9d, 0x92, 0xf1, 0xf0, 0x29, 0x50}
    }, <No data fields>}
}
$33 = {
  static CURRENT_VERSION = 0x2, 
  static MAX_STANDARD_VERSION = 0x2, 
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0 <repeats 32 times>}
          }, <No data fields>}, 
        n = 0xffffffff
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x4, 
          _union = {
            direct = {0x2, 0xe3, 0x3, 0x0 <repeats 25 times>}, 
            {
              capacity = 0x3e302, 
              indirect = 0x0
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 1, capacity 1 = {{
      nValue = 0x4a817c8, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0, 
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0xe9, 0x80, 0x67, 0xc, 0x6b, 0x4, 0x52, 0x2f, 0x30, 0x91, 0x88, 0xee, 0x7b, 0x33, 0xd6, 0x3c, 0x8b, 0x96, 0xff, 
        0xf, 0xc7, 0x6c, 0xbf, 0xc4, 0x23, 0x20, 0x9d, 0x92, 0xf1, 0xf0, 0x29, 0x50}
    }, <No data fields>}
}
3111	    std::vector<unsigned char> commitment;
3112	    int commitpos = GetWitnessCommitmentIndex(block);
3113	    std::vector<unsigned char> ret(32, 0x00);
3114	    if (consensusParams.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {
3115	        if (commitpos == -1) {
3116	            uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);
3117	            CHash256().Write(witnessroot.begin(), 32).Write(ret.data(), 32).Finalize(witnessroot.begin());
3118	            CTxOut out;
3119	            out.nValue = 0;
3120	            out.scriptPubKey.resize(38);
$34 = {
  nValue = 0x0, 
  scriptPubKey = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x0, 
      _union = {
        direct = {0x0 <repeats 28 times>}, 
        {
          capacity = 0x0, 
          indirect = 0x0
        }
      }
    }, <No data fields>}
}
3121	            out.scriptPubKey[0] = OP_RETURN;
3122	            out.scriptPubKey[1] = 0x24;
3123	            out.scriptPubKey[2] = 0xaa;
3124	            out.scriptPubKey[3] = 0x21;
$35 = {
  nValue = 0x0, 
  scriptPubKey = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x43, 
      _union = {
        direct = {0x26, 0x0, 0x0, 0x0, 0x60, 0xa, 0x0, 0x68, 0x73, 0x7f, 0x0 <repeats 18 times>}, 
        {
          capacity = 0x26, 
          indirect = 0x7f7368000a60
        }
      }
    }, <No data fields>}
}
3125	            out.scriptPubKey[4] = 0xa9;
3126	            out.scriptPubKey[5] = 0xed;
3127	            memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);
3128	            commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());
$36 = {
  nValue = 0x0, 
  scriptPubKey = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x43, 
      _union = {
        direct = {0x26, 0x0, 0x0, 0x0, 0x60, 0xa, 0x0, 0x68, 0x73, 0x7f, 0x0 <repeats 18 times>}, 
        {
          capacity = 0x26, 
          indirect = 0x7f7368000a60
        }
      }
    }, <No data fields>}
}
3129	            CMutableTransaction tx(*block.vtx[0]);
3130	            tx.vout.push_back(out);
$37 = {
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0 <repeats 32 times>}
          }, <No data fields>}, 
        n = 0xffffffff
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x4, 
          _union = {
            direct = {0x2, 0xe3, 0x3, 0x0, 0x73, 0x7f, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 
              0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x3e302, 
              indirect = 0x1100007f73
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 1, capacity 1 = {{
      nValue = 0x4a817c8, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
3131	            block.vtx[0] = MakeTransactionRef(std::move(tx));
3129	            CMutableTransaction tx(*block.vtx[0]);
3118	            CTxOut out;
$38 = {
  vin = std::vector of length 0, capacity 0, 
  vout = std::vector of length 0, capacity 0, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
3134	    UpdateUncommittedBlockStructures(block, pindexPrev, consensusParams);
3135	    return commitment;
3113	    std::vector<unsigned char> ret(32, 0x00);
3135	    return commitment;
3136	}
BlockAssembler::CreateNewBlock (this=0x7f738c4773d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:164
164	    pblocktemplate->vTxFees[0] = -nFees;
166	    LogPrintf("CreateNewBlock(): block weight: %u txs: %u fees: %ld sigops %d\n", GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);
No symbol "pblokc" in current context.
$39 = {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x5b9ecc67, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (count 1, weak 0) 0x7f73680009d0}, 
  fChecked = 0x0
}
169	    pblock->hashPrevBlock  = pindexPrev->GetBlockHash();
170	    UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);
171	    pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());
172	    pblock->nNonce         = 0;
173	    pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);
175	    CValidationState state;
176	    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {

Breakpoint 5, TestBlockValidity (state=..., chainparams=..., block=..., pindexPrev=0x7f739466ed20, fCheckPOW=false, 
    fCheckMerkleRoot=false) at validation.cpp:3487
3487	{
$40 = (const CBlock &) @0x7f7368001790: {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x1a, 0x5b, 0x2c, 0x3, 0xf7, 0x1a, 0xc6, 0xc4, 0xaf, 0x6e, 0xc3, 0x82, 0x2b, 0xc0, 0x11, 0x46, 0x5d, 0x4a, 
          0x16, 0xc7, 0xfc, 0xaa, 0x9f, 0x6a, 0x3f, 0x69, 0x47, 0xd9, 0x97, 0x67, 0xd, 0x5c}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x5b9ed17b, 
    nBits = 0x207fffff, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (count 1, weak 0) 0x7f73680009d0}, 
  fChecked = 0x0
}
3488	    AssertLockHeld(cs_main);
3489	    assert(pindexPrev && pindexPrev == chainActive.Tip());
3490	    CCoinsViewCache viewNew(pcoinsTip.get());
3491	    uint256 block_hash(block.GetHash());
3492	    CBlockIndex indexDummy(block);
3493	    indexDummy.pprev = pindexPrev;
3494	    indexDummy.nHeight = pindexPrev->nHeight + 1;
3495	    indexDummy.phashBlock = &block_hash;
3498	    if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))
3500	    if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))
3502	    if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))
3504	    if (!g_chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))
3506	    assert(state.IsValid());
3508	    return true;
3490	    CCoinsViewCache viewNew(pcoinsTip.get());
3509	}
BlockAssembler::CreateNewBlock (this=0x7f738c4773d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:179
179	    int64_t nTime2 = GetTimeMicros();
181	    LogPrint(BCLog::BENCH, "CreateNewBlock() packages: %.2fms (%d packages, %d updated descendants), validity: %.2fms (total %.2fms)\n", 0.001 * (nTime1 - nTimeStart), nPackagesSelected, nDescendantsUpdated, 0.001 * (nTime2 - nTime1), 0.001 * (nTime2 - nTimeStart));
183	    return std::move(pblocktemplate);
175	    CValidationState state;
155	    CMutableTransaction coinbaseTx;
119	    LOCK2(cs_main, mempool.cs);
184	}
generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001080, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:122
122	        if (!pblocktemplate.get())
124	        CBlock *pblock = &pblocktemplate->block;
126	            LOCK(cs_main);
$41 = 0x7f7368001790
$42 = {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x1a, 0x5b, 0x2c, 0x3, 0xf7, 0x1a, 0xc6, 0xc4, 0xaf, 0x6e, 0xc3, 0x82, 0x2b, 0xc0, 0x11, 0x46, 0x5d, 0x4a, 
          0x16, 0xc7, 0xfc, 0xaa, 0x9f, 0x6a, 0x3f, 0x69, 0x47, 0xd9, 0x97, 0x67, 0xd, 0x5c}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x5b9ed17b, 
    nBits = 0x207fffff, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (count 1, weak 0) 0x7f73680009d0}, 
  fChecked = 0x0
}
127	            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce); // ericksun here merkel tree root
$43 = std::shared_ptr (count 1, weak 0) 0x7f73680009d0
$44 = 0x7f73680009d0
$45 = {
  static CURRENT_VERSION = 0x2, 
  static MAX_STANDARD_VERSION = 0x2, 
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0 <repeats 32 times>}
          }, <No data fields>}, 
        n = 0xffffffff
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x4, 
          _union = {
            direct = {0x2, 0xe3, 0x3, 0x0, 0x73, 0x7f, 0x0, 0x0, 0x68, 0x16, 0x0, 0x68, 0x73, 0x7f, 0x0, 0x0, 0x68, 0x16, 0x0, 
              0x68, 0x73, 0x7f, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x3e302, 
              indirect = 0x6800166800007f73
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 1, capacity 1 = {std::vector of length 32, capacity 32 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
            0x0, 0x0, 0x0}}
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 2, capacity 2 = {{
      nValue = 0x4a817c8, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x92, 0x73, 0x7f, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }, {
      nValue = 0x0, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x43, 
          _union = {
            direct = {0x26, 0x0, 0x0, 0x0, 0x60, 0xa, 0x0, 0x68, 0x73, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
              0xb0, 0x77, 0x47, 0x8c, 0x73, 0x7f, 0x0, 0x0}, 
            {
              capacity = 0x26, 
              indirect = 0x7f7368000a60
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0, 
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0xca, 0x6b, 0xef, 0xd9, 0x78, 0x40, 0x50, 0x21, 0x94, 0x73, 0x1c, 0x95, 0xc7, 0x27, 0xbf, 0x6f, 0x3b, 0x8a, 
        0x66, 0xe5, 0x5e, 0xc4, 0xfe, 0x8b, 0x93, 0x2, 0x5, 0x41, 0x4f, 0xcf, 0x15, 0xc5}
    }, <No data fields>}
}

Breakpoint 3, IncrementExtraNonce (pblock=0x7f7368001790, pindexPrev=0x7f739466ed20, nExtraNonce=@0x7f738c4773a4: 0)
    at miner.cpp:437
437	{
439	    static uint256 hashPrevBlock;
440	    if (hashPrevBlock != pblock->hashPrevBlock)
442	        nExtraNonce = 0;
443	        hashPrevBlock = pblock->hashPrevBlock;
445	    ++nExtraNonce;
446	    unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2
447	    CMutableTransaction txCoinbase(*pblock->vtx[0]);
448	    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;
449	    assert(txCoinbase.vin[0].scriptSig.size() <= 100);
451	    pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));
452	    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x0) at consensus/merkle.cpp:159
159	{
160	    std::vector<uint256> leaves;
161	    leaves.resize(block.vtx.size());
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
163	        leaves[s] = block.vtx[s]->GetHash();
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
165	    return ComputeMerkleRoot(leaves, mutated);
160	    std::vector<uint256> leaves;
165	    return ComputeMerkleRoot(leaves, mutated);
166	}
IncrementExtraNonce (pblock=0x7f7368001790, pindexPrev=0x7f739466ed20, nExtraNonce=@0x7f738c4773a4: 1) at miner.cpp:447
447	    CMutableTransaction txCoinbase(*pblock->vtx[0]);
453	}
generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001080, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:126
126	            LOCK(cs_main);
129	        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {
133	        if (nMaxTries == 0) {
136	        if (pblock->nNonce == nInnerLoopCount) {
139	        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);
140	        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x7f738c4771b7) at consensus/merkle.cpp:159
159	{
160	    std::vector<uint256> leaves;
161	    leaves.resize(block.vtx.size());
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
163	        leaves[s] = block.vtx[s]->GetHash();
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
165	    return ComputeMerkleRoot(leaves, mutated);
160	    std::vector<uint256> leaves;
165	    return ComputeMerkleRoot(leaves, mutated);
166	}
CheckBlock (block=..., state=..., consensusParams=..., fCheckPOW=true, fCheckMerkleRoot=true) at validation.cpp:3029
3029	        if (block.hashMerkleRoot != hashMerkleRoot2)
3035	        if (mutated)
3046	    if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)
3050	    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase())
3052	    for (unsigned int i = 1; i < block.vtx.size(); i++)
3057	    for (const auto& tx : block.vtx)
3058	        if (!CheckTransaction(*tx, state, false))
3057	    for (const auto& tx : block.vtx)
3062	    unsigned int nSigOps = 0;
3063	    for (const auto& tx : block.vtx)
3065	        nSigOps += GetLegacySigOpCount(*tx);
3063	    for (const auto& tx : block.vtx)
3067	    if (nSigOps * WITNESS_SCALE_FACTOR > MAX_BLOCK_SIGOPS_COST)
3070	    if (fCheckPOW && fCheckMerkleRoot)
3071	        block.fChecked = true;
3073	    return true;
3074	}
ProcessNewBlock (chainparams=..., pblock=std::shared_ptr (count 2, weak 0) 0x7f7368000d20, fForceProcessing=true, 
    fNewBlock=0x0) at validation.cpp:3465
3465	        LOCK(cs_main);
3467	        if (ret) {
3469	            ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);
3471	        if (!ret) {
3465	        LOCK(cs_main);
3460	        CValidationState state;
3477	    NotifyHeaderTip();
3479	    CValidationState state; // Only used to report errors, not invalidity - ignore it
3480	    if (!g_chainstate.ActivateBestChain(state, chainparams, pblock))
3483	    return true;
3479	    CValidationState state; // Only used to report errors, not invalidity - ignore it
3484	}
generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001080, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:142
142	        ++nHeight;
143	        blockHashes.push_back(pblock->GetHash().GetHex());
146	        if (keepScript)
139	        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);
121	        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript->reserveScript));
119	    while (nHeight < nHeightEnd)
151	    return blockHashes;
152	}
generatetoaddress (request=...) at rpc/mining.cpp:182
182	    std::shared_ptr<CReserveScript> coinbaseScript = std::make_shared<CReserveScript>();
177	    CTxDestination destination = DecodeDestination(request.params[1].get_str());
185	    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);
186	}
CRPCTable::execute (this=0x7f7393123080 <tableRPC>, request=...) at rpc/server.cpp:504
504	}
HTTPReq_JSONRPC (req=0x7f7380001270) at httprpc.cpp:194
194	            strReply = JSONRPCReply(result, NullUniValue, jreq.id);
191	            UniValue result = tableRPC.execute(jreq);
202	        req->WriteHeader("Content-Type", "application/json");
203	        req->WriteReply(HTTP_OK, strReply);
184	        std::string strReply;
177	        UniValue valRequest;
211	    return true;
161	    JSONRPCRequest jreq;
154	    std::pair<bool, std::string> authHeader = req->GetHeader("authorization");
212	}
std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (
    __functor=..., __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50c039, DIE 0x55c9ed>, __args#1="")
    at /usr/include/c++/6/functional:1718
1718	      }
std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (
    this=0x7f7380000af0, __args#0=0x7f7380001270, __args#1="") at /usr/include/c++/6/functional:2128
2128	    }
HTTPWorkItem::operator() (this=0x7f7380000ac0) at httpserver.cpp:54
54	    }
WorkQueue<HTTPClosure>::Run (this=0x7f73947c9fb0) at httpserver.cpp:102
102	            std::unique_ptr<WorkItem> i;
101	        while (true) {
102	            std::unique_ptr<WorkItem> i;
104	                std::unique_lock<std::mutex> lock(cs);
105	                while (running && queue.empty())
106	                    cond.wait(lock);
[Switching to Thread 0x7f738bc77700 (LWP 15643)]

Breakpoint 1, generatetoaddress (request=...) at rpc/mining.cpp:155
155	{
156	    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)
171	    int nGenerate = request.params[0].get_int();
172	    uint64_t nMaxTries = 1000000;
173	    if (!request.params[2].isNull()) {
177	    CTxDestination destination = DecodeDestination(request.params[1].get_str());
178	    if (!IsValidDestination(destination)) {
182	    std::shared_ptr<CReserveScript> coinbaseScript = std::make_shared<CReserveScript>();
183	    coinbaseScript->reserveScript = GetScriptForDestination(destination);
185	    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);

Breakpoint 2, generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7395289d40, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:107
107	{
109	    int nHeightEnd = 0;
110	    int nHeight = 0;
113	        LOCK(cs_main);
114	        nHeight = chainActive.Height();
115	        nHeightEnd = nHeight+nGenerate;
113	        LOCK(cs_main);
117	    unsigned int nExtraNonce = 0;
118	    UniValue blockHashes(UniValue::VARR);
119	    while (nHeight < nHeightEnd)
121	        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript->reserveScript));

Breakpoint 6, BlockAssembler::CreateNewBlock (this=0x7f738bc763d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:103
103	{
$46 = {
  pblocktemplate = std::unique_ptr<CBlockTemplate> containing 0x0, 
  pblock = 0x7f7392ad4c00, 
  fIncludeWitness = 0xf0, 
  nBlockMaxWeight = 0x3cf960, 
  blockMinFeeRate = {
    nSatoshisPerK = 0x3e8
  }, 
  nBlockWeight = 0x18bc76420, 
  nBlockTx = 0x7f7395289d38, 
  nBlockSigOpsCost = 0x7f738bc76480, 
  nFees = 0x844f50f8e8f6ad00, 
  inBlock = std::set with 0 elements, 
  nHeight = 0x8bc76470, 
  nLockTimeCutoff = 0x7f73926680b2, 
  chainparams = @0x7f7394783250
}
104	    int64_t nTimeStart = GetTimeMicros();
106	    resetBlock();
108	    pblocktemplate.reset(new CBlockTemplate());
$47 = {
  pblocktemplate = std::unique_ptr<CBlockTemplate> containing 0x0, 
  pblock = 0x7f7392ad4c00, 
  fIncludeWitness = 0x0, 
  nBlockMaxWeight = 0x3cf960, 
  blockMinFeeRate = {
    nSatoshisPerK = 0x3e8
  }, 
  nBlockWeight = 0xfa0, 
  nBlockTx = 0x0, 
  nBlockSigOpsCost = 0x190, 
  nFees = 0x0, 
  inBlock = std::set with 0 elements, 
  nHeight = 0x8bc76470, 
  nLockTimeCutoff = 0x7f73926680b2, 
  chainparams = @0x7f7394783250
}
$48 = {
  pblocktemplate = std::unique_ptr<CBlockTemplate> containing 0x0, 
  pblock = 0x7f7392ad4c00 <boost::variant<CNoDestination, CKeyID, CScriptID, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown>::internal_apply_visitor<boost::detail::variant::invoke_visitor<(anonymous namespace)::CScriptVisitor const> >(boost::detail::variant::invoke_visitor<(anonymous namespace)::CScriptVisitor const>&) const+96>, 
  fIncludeWitness = false, 
  nBlockMaxWeight = 3996000, 
  blockMinFeeRate = {
    nSatoshisPerK = 1000
  }, 
  nBlockWeight = 4000, 
  nBlockTx = 0, 
  nBlockSigOpsCost = 400, 
  nFees = 0, 
  inBlock = std::set with 0 elements, 
  nHeight = -1949866896, 
  nLockTimeCutoff = 140134354157746, 
  chainparams = @0x7f7394783250
}
110	    if(!pblocktemplate.get())
112	    pblock = &pblocktemplate->block; // pointer for convenience
$49 = 0x7f7392ad4c00
$50 = 0x7f7392ad4c00
$51 = {
  <CBlockHeader> = {
    nVersion = 0x5740000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0xe8, 0x2f, 0xa0, 0xa3, 0xff, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x5d, 0xc3, 0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 
          0xec, 0x30, 0x89, 0x7d, 0xec, 0x89, 0x75, 0xe8, 0x48, 0x89, 0x55, 0xe0, 0x48, 0x89}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x4d, 0xd8, 0x64, 0x48, 0x8b, 0x4, 0x25, 0x28, 0x0, 0x0, 0x0, 0x48, 0x89, 0x45, 0xf8, 0x31, 0xc0, 0x48, 0x8b, 
          0x4d, 0xd8, 0x48, 0x8b, 0x55, 0xe0, 0x8b, 0x75, 0xe8, 0x8b, 0x45, 0xec, 0x41}
      }, <No data fields>}, 
    nTime = 0x41504151, 
    nBits = 0xb9, 
    nNonce = 0xb84100
  }, 
  members of CBlock: 
  vtx = std::vector of length -526126760062582784, capacity 180325639595118471 = {<error reading variable>
$52 = {
  <CBlockHeader> = {
    nVersion = 0x5740000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0xe8, 0x2f, 0xa0, 0xa3, 0xff, 0x48, 0x83, 0xc4, 0x28, 0x5b, 0x5d, 0xc3, 0x55, 0x48, 0x89, 0xe5, 0x48, 0x83, 
          0xec, 0x30, 0x89, 0x7d, 0xec, 0x89, 0x75, 0xe8, 0x48, 0x89, 0x55, 0xe0, 0x48, 0x89}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x4d, 0xd8, 0x64, 0x48, 0x8b, 0x4, 0x25, 0x28, 0x0, 0x0, 0x0, 0x48, 0x89, 0x45, 0xf8, 0x31, 0xc0, 0x48, 0x8b, 
          0x4d, 0xd8, 0x48, 0x8b, 0x55, 0xe0, 0x8b, 0x75, 0xe8, 0x8b, 0x45, 0xec, 0x41}
      }, <No data fields>}, 
    nTime = 0x41504151, 
    nBits = 0xb9, 
    nNonce = 0xb84100
  }, 
  members of CBlock: 
  vtx = std::vector of length -526126760062582784, capacity 180325639595118471 = {<error reading variable>
115	    pblock->vtx.emplace_back();
Undefined command: "nn".  Try "help".
116	    pblocktemplate->vTxFees.push_back(-1); // updated at end
$53 = {
  <CBlockHeader> = {
    nVersion = 0x0, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x0, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (empty) 0x0}, 
  fChecked = 0x0
}
117	    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end
119	    LOCK2(cs_main, mempool.cs);
$54 = {
  <CBlockHeader> = {
    nVersion = 0x0, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x0, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (empty) 0x0}, 
  fChecked = 0x0
}
120	    CBlockIndex* pindexPrev = chainActive.Tip();
121	    assert(pindexPrev != nullptr);
$55 = 0x7f7368001930
$56 = {
  phashBlock = 0x7f7368001708, 
  pprev = 0x7f739466ed20, 
  pskip = 0x7f739543e7a0, 
  nHeight = 0x3e3, 
  nFile = 0x0, 
  nDataPos = 0x3f75d, 
  nUndoPos = 0x9fd7, 
  nChainWork = {
    <base_uint<256u>> = {
      static WIDTH = 0x8, 
      pn = {0x7c8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
    }, <No data fields>}, 
  nTx = 0x1, 
  nChainTx = 0x3e8, 
  nStatus = 0x9d, 
  nVersion = 0x20000000, 
  hashMerkleRoot = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x31, 0x81, 0x57, 0xef, 0x97, 0xb3, 0x16, 0xc0, 0xff, 0xbe, 0xdb, 0x16, 0x52, 0x86, 0xd4, 0xc3, 0x4d, 0xd2, 
        0xb6, 0x81, 0xb6, 0x27, 0xc1, 0x60, 0x52, 0xcb, 0xa, 0x95, 0x5a, 0x8, 0x2a, 0x6c}
    }, <No data fields>}, 
  nTime = 0x5b9ed17b, 
  nBits = 0x207fffff, 
  nNonce = 0x0, 
  nSequenceId = 0x4, 
  nTimeMax = 0x5b9ed17b, 
  static nMedianTimeSpan = 0xb
}
$57 = {
  phashBlock = 0x7f7368001708, 
  pprev = 0x7f739466ed20, 
  pskip = 0x7f739543e7a0, 
  nHeight = 995, 
  nFile = 0, 
  nDataPos = 259933, 
  nUndoPos = 40919, 
  nChainWork = {
    <base_uint<256u>> = {
      static WIDTH = 8, 
      pn = {1992, 0, 0, 0, 0, 0, 0, 0}
    }, <No data fields>}, 
  nTx = 1, 
  nChainTx = 1000, 
  nStatus = 157, 
  nVersion = 536870912, 
  hashMerkleRoot = {
    <base_blob<256u>> = {
      static WIDTH = 32, 
      data = "1\201W\026\300\377\276\333\026R\206\324\303MҶ\201\266'\301`R\313\n\225Z\b*l"
    }, <No data fields>}, 
  nTime = 1537134971, 
  nBits = 545259519, 
  nNonce = 0, 
  nSequenceId = 4, 
  nTimeMax = 1537134971, 
  static nMedianTimeSpan = 11
}
122	    nHeight = pindexPrev->nHeight + 1;
$58 = {
  phashBlock = 0x7f7368001708, 
  pprev = 0x7f739466ed20, 
  pskip = 0x7f739543e7a0, 
  nHeight = 0x3e3, 
  nFile = 0x0, 
  nDataPos = 0x3f75d, 
  nUndoPos = 0x9fd7, 
  nChainWork = {
    <base_uint<256u>> = {
      static WIDTH = 0x8, 
      pn = {0x7c8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
    }, <No data fields>}, 
  nTx = 0x1, 
  nChainTx = 0x3e8, 
  nStatus = 0x9d, 
  nVersion = 0x20000000, 
  hashMerkleRoot = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x31, 0x81, 0x57, 0xef, 0x97, 0xb3, 0x16, 0xc0, 0xff, 0xbe, 0xdb, 0x16, 0x52, 0x86, 0xd4, 0xc3, 0x4d, 0xd2, 
        0xb6, 0x81, 0xb6, 0x27, 0xc1, 0x60, 0x52, 0xcb, 0xa, 0x95, 0x5a, 0x8, 0x2a, 0x6c}
    }, <No data fields>}, 
  nTime = 0x5b9ed17b, 
  nBits = 0x207fffff, 
  nNonce = 0x0, 
  nSequenceId = 0x4, 
  nTimeMax = 0x5b9ed17b, 
  static nMedianTimeSpan = 0xb
}
124	    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());
$59 = {
  <CBlockHeader> = {
    nVersion = 0x0, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x0, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (empty) 0x0}, 
  fChecked = 0x0
}
127	    if (chainparams.MineBlocksOnDemand())
128	        pblock->nVersion = gArgs.GetArg("-blockversion", pblock->nVersion);
130	    pblock->nTime = GetAdjustedTime();
$60 = {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x0, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (empty) 0x0}, 
  fChecked = 0x0
}
131	    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();
$61 = {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x5b9ee5bf, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (empty) 0x0}, 
  fChecked = 0x0
}
133	    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)
143	    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) && fMineWitnessTx;
145	    int nPackagesSelected = 0;
146	    int nDescendantsUpdated = 0;
147	    addPackageTxs(nPackagesSelected, nDescendantsUpdated);
149	    int64_t nTime1 = GetTimeMicros();
151	    nLastBlockTx = nBlockTx;
152	    nLastBlockWeight = nBlockWeight;
155	    CMutableTransaction coinbaseTx;
156	    coinbaseTx.vin.resize(1);
$62 = {
  vin = std::vector of length 0, capacity 0, 
  vout = std::vector of length 0, capacity 0, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
157	    coinbaseTx.vin[0].prevout.SetNull();
158	    coinbaseTx.vout.resize(1);
159	    coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;
160	    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());
$63 = {
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0 <repeats 32 times>}
          }, <No data fields>}, 
        n = 0xffffffff
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x0 <repeats 28 times>}, 
            {
              capacity = 0x0, 
              indirect = 0x0
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 1, capacity 1 = {{
      nValue = 0xffffffffffffffff, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
$64 = {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x5b9ee5bf, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (empty) 0x0}, 
  fChecked = 0x0
}
161	    coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;
162	    pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));
163	    pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());
$65 = {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x5b9ee5bf, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (count 1, weak 0) 0x7f739541e850}, 
  fChecked = 0x0
}

Breakpoint 7, GenerateCoinbaseCommitment (block=..., pindexPrev=0x7f7368001930, consensusParams=...) at validation.cpp:3110
3110	{
3111	    std::vector<unsigned char> commitment;
3112	    int commitpos = GetWitnessCommitmentIndex(block);
3113	    std::vector<unsigned char> ret(32, 0x00);
$66 = std::vector of length 0, capacity 0
3114	    if (consensusParams.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {
3115	        if (commitpos == -1) {
3116	            uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);
3117	            CHash256().Write(witnessroot.begin(), 32).Write(ret.data(), 32).Finalize(witnessroot.begin());
3118	            CTxOut out;
$67 = std::vector of length 0, capacity 0
3119	            out.nValue = 0;
3120	            out.scriptPubKey.resize(38);
3121	            out.scriptPubKey[0] = OP_RETURN;
3122	            out.scriptPubKey[1] = 0x24;
3123	            out.scriptPubKey[2] = 0xaa;
3124	            out.scriptPubKey[3] = 0x21;
3125	            out.scriptPubKey[4] = 0xa9;
3126	            out.scriptPubKey[5] = 0xed;
3127	            memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);
3128	            commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());
$68 = {
  nValue = 0x0, 
  scriptPubKey = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x43, 
      _union = {
        direct = {0x26, 0x0, 0x0, 0x0, 0x40, 0xef, 0x66, 0x94, 0x73, 0x7f, 0x0 <repeats 18 times>}, 
        {
          capacity = 0x26, 
          indirect = 0x7f739466ef40
        }
      }
    }, <No data fields>}
}
$69 = {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x43, 
    _union = {
      direct = {0x26, 0x0, 0x0, 0x0, 0x40, 0xef, 0x66, 0x94, 0x73, 0x7f, 0x0 <repeats 18 times>}, 
      {
        capacity = 0x26, 
        indirect = 0x7f739466ef40
      }
    }
  }, <No data fields>}
3129	            CMutableTransaction tx(*block.vtx[0]);
$70 = (unsigned char &) @0x7f739466ef45: 0xed
$71 = (unsigned char &) @0x7f739466ef41: 0x24
type = class CTxOut {
  public:
    CAmount nValue;
    CScript scriptPubKey;

    CTxOut(void);
    CTxOut(const CAmount &, CScript);
    void SetNull(void);
    bool IsNull(void) const;
    std::__cxx11::string ToString(void) const;
    void SerializationOp<CBufferedFile, CSerActionUnserialize>(CBufferedFile &, CSerActionUnserialize);
    void Unserialize<CBufferedFile>(CBufferedFile &);
    void SerializationOp<CAutoFile, CSerActionUnserialize>(CAutoFile &, CSerActionUnserialize);
    void Unserialize<CAutoFile>(CAutoFile &);
    void SerializationOp<CSizeComputer, CSerActionSerialize>(CSizeComputer &, CSerActionSerialize);
    void SerializationOp<CAutoFile, CSerActionSerialize>(CAutoFile &, CSerActionSerialize);
    void Serialize<CSizeComputer>(CSizeComputer &) const;
    void Serialize<CAutoFile>(CAutoFile &) const;
}
$72 = (unsigned char &) @0x7f739466ef46: 0xe2
Only values in memory can be extended with '@'.
$73 = {{
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x43, 
      _union = {
        direct = {0x26, 0x0, 0x0, 0x0, 0x40, 0xef, 0x66, 0x94, 0x73, 0x7f, 0x0 <repeats 18 times>}, 
        {
          capacity = 0x26, 
          indirect = 0x7f739466ef40
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x6eef9827, 
      _union = {
        direct = {0xd3, 0x9, 0x97, 0x9b, 0x43, 0x0, 0x3d, 0x23, 0x20, 0xd9, 0xf0, 0xe8, 0xea, 0x98, 0x31, 0xa9, 0x27, 0x59, 
          0xfb, 0x4b, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x9b9709d3, 
          indirect = 0xe8f0d920233d0043
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x0, 
      _union = {
        direct = {0x0 <repeats 18 times>, 0x1, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x0, 
          indirect = 0x0
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0xe8f6ad00, 
      _union = {
        direct = {0xf8, 0x50, 0x4f, 0x84, 0xa0, 0x60, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0, 0xf0, 0x62, 0xc7, 0x8b, 0x73, 0x7f, 
          0x0, 0x0, 0xf0, 0x7e, 0x3f, 0x95, 0x73, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x844f50f8, 
          indirect = 0x7f738bc760a0
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0xa3024c5f, 
      _union = {
        direct = {0xff, 0x7f, 0x0, 0x0, 0x70, 0x63, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0, 0x24, 0xbc, 0x92, 0x92, 0x73, 0x7f, 0x0, 
          0x0, 0x5f, 0x4c, 0x2, 0xa3, 0xff, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x7fff, 
          indirect = 0x7f738bc76370
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0xe8f6ad00, 
      _union = {
        direct = {0xf8, 0x50, 0x4f, 0x84, 0x40, 0xf0, 0x4d, 0x92, 0x73, 0x7f, 0x0, 0x0, 0xc8, 0x65, 0xc7, 0x8b, 0x73, 0x7f, 
          0x0, 0x0, 0x50, 0x60, 0xc7, 0x8b, 0x1, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x844f50f8, 
          indirect = 0x7f73924df040
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x95289d48, 
      _union = {
        direct = {0x73, 0x7f, 0x0, 0x0, 0xd0, 0x63, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0, 0xb0, 0x63, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 
          0x0, 0xc8, 0x65, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x7f73, 
          indirect = 0x7f738bc763d0
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x0, 
      _union = {
        direct = {0x0, 0x0, 0x0, 0x0, 0x70, 0x60, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0, 0x5e, 0x4c, 0x6f, 0x99, 0x4, 0x76, 0x5, 
          0x0, 0x30, 0x19, 0x0, 0x68, 0x73, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x0, 
          indirect = 0x7f738bc76070
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x5b7a7ea7, 
      _union = {
        direct = {0x0, 0x0, 0x0, 0x0, 0xcd, 0x47, 0x2b, 0x58, 0x5, 0x76, 0x5, 0x0, 0xc0, 0x58, 0x78, 0x94, 0x73, 0x7f, 0x0, 
          0x0, 0xa0, 0x60, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x0, 
          indirect = 0x57605582b47cd
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0xe8f6ad00, 
      _union = {
        direct = {0xf8, 0x50, 0x4f, 0x84, 0x20, 0x92, 0x11, 0x93, 0x73, 0x7f, 0x0, 0x0, 0x1, 0x82, 0x79, 0x92, 0x73, 0x7f, 
          0x0, 0x0, 0xf8, 0x3b, 0x12, 0x93, 0x73, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x844f50f8, 
          indirect = 0x7f7393119220
        }
      }
    }, <No data fields>}}
$74 = {{
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x43, 
      _union = {
        direct = {0x26, 0x0, 0x0, 0x0, 0x40, 0xef, 0x66, 0x94, 0x73, 0x7f, 0x0 <repeats 18 times>}, 
        {
          capacity = 0x26, 
          indirect = 0x7f739466ef40
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x6eef9827, 
      _union = {
        direct = {0xd3, 0x9, 0x97, 0x9b, 0x43, 0x0, 0x3d, 0x23, 0x20, 0xd9, 0xf0, 0xe8, 0xea, 0x98, 0x31, 0xa9, 0x27, 0x59, 
          0xfb, 0x4b, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x9b9709d3, 
          indirect = 0xe8f0d920233d0043
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x0, 
      _union = {
        direct = {0x0 <repeats 18 times>, 0x1, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x0, 
          indirect = 0x0
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0xe8f6ad00, 
      _union = {
        direct = {0xf8, 0x50, 0x4f, 0x84, 0xa0, 0x60, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0, 0xf0, 0x62, 0xc7, 0x8b, 0x73, 0x7f, 
          0x0, 0x0, 0xf0, 0x7e, 0x3f, 0x95, 0x73, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x844f50f8, 
          indirect = 0x7f738bc760a0
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0xa3024c5f, 
      _union = {
        direct = {0xff, 0x7f, 0x0, 0x0, 0x70, 0x63, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0, 0x24, 0xbc, 0x92, 0x92, 0x73, 0x7f, 0x0, 
          0x0, 0x5f, 0x4c, 0x2, 0xa3, 0xff, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x7fff, 
          indirect = 0x7f738bc76370
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0xe8f6ad00, 
      _union = {
        direct = {0xf8, 0x50, 0x4f, 0x84, 0x40, 0xf0, 0x4d, 0x92, 0x73, 0x7f, 0x0, 0x0, 0xc8, 0x65, 0xc7, 0x8b, 0x73, 0x7f, 
          0x0, 0x0, 0x50, 0x60, 0xc7, 0x8b, 0x1, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x844f50f8, 
          indirect = 0x7f73924df040
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x95289d48, 
      _union = {
        direct = {0x73, 0x7f, 0x0, 0x0, 0xd0, 0x63, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0, 0xb0, 0x63, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 
          0x0, 0xc8, 0x65, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x7f73, 
          indirect = 0x7f738bc763d0
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x0, 
      _union = {
        direct = {0x0, 0x0, 0x0, 0x0, 0x70, 0x60, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0, 0x5e, 0x4c, 0x6f, 0x99, 0x4, 0x76, 0x5, 
          0x0, 0x30, 0x19, 0x0, 0x68, 0x73, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x0, 
          indirect = 0x7f738bc76070
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x5b7a7ea7, 
      _union = {
        direct = {0x0, 0x0, 0x0, 0x0, 0xcd, 0x47, 0x2b, 0x58, 0x5, 0x76, 0x5, 0x0, 0xc0, 0x58, 0x78, 0x94, 0x73, 0x7f, 0x0, 
          0x0, 0xa0, 0x60, 0xc7, 0x8b, 0x73, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x0, 
          indirect = 0x57605582b47cd
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0xe8f6ad00, 
      _union = {
        direct = {0xf8, 0x50, 0x4f, 0x84, 0x20, 0x92, 0x11, 0x93, 0x73, 0x7f, 0x0, 0x0, 0x1, 0x82, 0x79, 0x92, 0x73, 0x7f, 
          0x0, 0x0, 0xf8, 0x3b, 0x12, 0x93, 0x73, 0x7f, 0x0, 0x0}, 
        {
          capacity = 0x844f50f8, 
          indirect = 0x7f7393119220
        }
      }
    }, <No data fields>}}
$75 = {{
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x43, 
      _union = {
        direct = {0x26, 0x0, 0x0, 0x0, 0x40, 0xef, 0x66, 0x94, 0x73, 0x7f, 0x0 <repeats 18 times>}, 
        {
          capacity = 0x26, 
          indirect = 0x7f739466ef40
        }
      }
    }, <No data fields>}}
$76 = {{
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x43, 
      _union = {
        direct = {0x26, 0x0, 0x0, 0x0, 0x40, 0xef, 0x66, 0x94, 0x73, 0x7f, 0x0 <repeats 18 times>}, 
        {
          capacity = 0x26, 
          indirect = 0x7f739466ef40
        }
      }
    }, <No data fields>}, {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x6eef9827, 
      _union = {
        direct = {0xd3, 0x9, 0x97, 0x9b, 0x43, 0x0, 0x3d, 0x23, 0x20, 0xd9, 0xf0, 0xe8, 0xea, 0x98, 0x31, 0xa9, 0x27, 0x59, 
          0xfb, 0x4b, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x9b9709d3, 
          indirect = 0xe8f0d920233d0043
        }
      }
    }, <No data fields>}}
3130	            tx.vout.push_back(out);
$77 = std::vector of length 38, capacity 38 = {0x6a, 0x24, 0xaa, 0x21, 0xa9, 0xed, 0xe2, 0xf6, 0x1c, 0x3f, 0x71, 0xd1, 0xde, 
  0xfd, 0x3f, 0xa9, 0x99, 0xdf, 0xa3, 0x69, 0x53, 0x75, 0x5c, 0x69, 0x6, 0x89, 0x79, 0x99, 0x62, 0xb4, 0x8b, 0xeb, 0xd8, 0x36, 
  0x97, 0x4e, 0x8c, 0xf9}
Undefined command: "".  Try "help".
3131	            block.vtx[0] = MakeTransactionRef(std::move(tx));
3129	            CMutableTransaction tx(*block.vtx[0]);
3118	            CTxOut out;
3134	    UpdateUncommittedBlockStructures(block, pindexPrev, consensusParams);
3135	    return commitment;
3113	    std::vector<unsigned char> ret(32, 0x00);
3135	    return commitment;
3136	}
BlockAssembler::CreateNewBlock (this=0x7f738bc763d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:164
164	    pblocktemplate->vTxFees[0] = -nFees;
166	    LogPrintf("CreateNewBlock(): block weight: %u txs: %u fees: %ld sigops %d\n", GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);
$78 = {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x5b9ee5bf, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (count 1, weak 0) 0x7f7395759810}, 
  fChecked = 0x0
}
169	    pblock->hashPrevBlock  = pindexPrev->GetBlockHash();
170	    UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);
171	    pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());
172	    pblock->nNonce         = 0;
$79 = {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x81, 0xf8, 0x23, 0xa4, 0x1b, 0xda, 0xa7, 0x37, 0xf0, 0x24, 0x57, 0x58, 0xe2, 0xdf, 0x3, 0xd5, 0xe4, 0x24, 
          0x5b, 0x4a, 0xaa, 0x9d, 0xd7, 0xcc, 0xb7, 0x31, 0xe8, 0x96, 0xaf, 0x4, 0x39, 0x5a}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x5b9ee928, 
    nBits = 0x207fffff, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (count 1, weak 0) 0x7f7395759810}, 
  fChecked = 0x0
}
173	    pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);
175	    CValidationState state;
176	    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {

Breakpoint 5, TestBlockValidity (state=..., chainparams=..., block=..., pindexPrev=0x7f7368001930, fCheckPOW=false, 
    fCheckMerkleRoot=false) at validation.cpp:3487
3487	{
3488	    AssertLockHeld(cs_main);
3489	    assert(pindexPrev && pindexPrev == chainActive.Tip());
3490	    CCoinsViewCache viewNew(pcoinsTip.get());
3491	    uint256 block_hash(block.GetHash());
3492	    CBlockIndex indexDummy(block);
3493	    indexDummy.pprev = pindexPrev;
3494	    indexDummy.nHeight = pindexPrev->nHeight + 1;
3495	    indexDummy.phashBlock = &block_hash;
3498	    if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))
3500	    if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))
3502	    if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))
3504	    if (!g_chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))
3506	    assert(state.IsValid());
3508	    return true;
3490	    CCoinsViewCache viewNew(pcoinsTip.get());
3509	}
BlockAssembler::CreateNewBlock (this=0x7f738bc763d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:179
179	    int64_t nTime2 = GetTimeMicros();
181	    LogPrint(BCLog::BENCH, "CreateNewBlock() packages: %.2fms (%d packages, %d updated descendants), validity: %.2fms (total %.2fms)\n", 0.001 * (nTime1 - nTimeStart), nPackagesSelected, nDescendantsUpdated, 0.001 * (nTime2 - nTime1), 0.001 * (nTime2 - nTimeStart));
183	    return std::move(pblocktemplate);
175	    CValidationState state;
155	    CMutableTransaction coinbaseTx;
119	    LOCK2(cs_main, mempool.cs);
184	}
#0  BlockAssembler::CreateNewBlock (this=0x7f738bc763d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:184
184	}
generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7395289d40, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:122
122	        if (!pblocktemplate.get())
124	        CBlock *pblock = &pblocktemplate->block;
126	            LOCK(cs_main);
127	            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce); // ericksun here merkel tree root

Breakpoint 3, IncrementExtraNonce (pblock=0x7f739523eeb0, pindexPrev=0x7f7368001930, nExtraNonce=@0x7f738bc763a4: 0)
    at miner.cpp:437
437	{
439	    static uint256 hashPrevBlock;
440	    if (hashPrevBlock != pblock->hashPrevBlock)
442	        nExtraNonce = 0;
443	        hashPrevBlock = pblock->hashPrevBlock;
445	    ++nExtraNonce;
446	    unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2
447	    CMutableTransaction txCoinbase(*pblock->vtx[0]);
448	    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;
449	    assert(txCoinbase.vin[0].scriptSig.size() <= 100);
451	    pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));
452	    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x0) at consensus/merkle.cpp:159
159	{
160	    std::vector<uint256> leaves;
161	    leaves.resize(block.vtx.size());
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
163	        leaves[s] = block.vtx[s]->GetHash();
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
165	    return ComputeMerkleRoot(leaves, mutated);
160	    std::vector<uint256> leaves;
165	    return ComputeMerkleRoot(leaves, mutated);
166	}
IncrementExtraNonce (pblock=0x7f739523eeb0, pindexPrev=0x7f7368001930, nExtraNonce=@0x7f738bc763a4: 1) at miner.cpp:447
447	    CMutableTransaction txCoinbase(*pblock->vtx[0]);
453	}
generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7395289d40, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:126
126	            LOCK(cs_main);
129	        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {
130	            ++pblock->nNonce;
131	            --nMaxTries;
129	        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {
133	        if (nMaxTries == 0) {
136	        if (pblock->nNonce == nInnerLoopCount) {
139	        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);
140	        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x7f738bc761b7) at consensus/merkle.cpp:159
159	{
160	    std::vector<uint256> leaves;
161	    leaves.resize(block.vtx.size());
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
163	        leaves[s] = block.vtx[s]->GetHash();
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
165	    return ComputeMerkleRoot(leaves, mutated);
160	    std::vector<uint256> leaves;
165	    return ComputeMerkleRoot(leaves, mutated);
166	}
CheckBlock (block=..., state=..., consensusParams=..., fCheckPOW=true, fCheckMerkleRoot=true) at validation.cpp:3029
3029	        if (block.hashMerkleRoot != hashMerkleRoot2)
3035	        if (mutated)
3046	    if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)
3050	    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase())
3052	    for (unsigned int i = 1; i < block.vtx.size(); i++)
3057	    for (const auto& tx : block.vtx)
3058	        if (!CheckTransaction(*tx, state, false))
3057	    for (const auto& tx : block.vtx)
3062	    unsigned int nSigOps = 0;
3063	    for (const auto& tx : block.vtx)
3065	        nSigOps += GetLegacySigOpCount(*tx);
3063	    for (const auto& tx : block.vtx)
#0  CheckBlock (block=..., state=..., consensusParams=..., fCheckPOW=true, fCheckMerkleRoot=true) at validation.cpp:3063
3063	    for (const auto& tx : block.vtx)
3067	    if (nSigOps * WITNESS_SCALE_FACTOR > MAX_BLOCK_SIGOPS_COST)
3070	    if (fCheckPOW && fCheckMerkleRoot)
3071	        block.fChecked = true;
3073	    return true;
3074	}
ProcessNewBlock (chainparams=..., pblock=std::shared_ptr (count 2, weak 0) 0x7f7395759880, fForceProcessing=true, 
    fNewBlock=0x0) at validation.cpp:3465
3465	        LOCK(cs_main);
3467	        if (ret) {
3469	            ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);
3471	        if (!ret) {
3465	        LOCK(cs_main);
3460	        CValidationState state;
3477	    NotifyHeaderTip();
3479	    CValidationState state; // Only used to report errors, not invalidity - ignore it
3480	    if (!g_chainstate.ActivateBestChain(state, chainparams, pblock))
3483	    return true;
3479	    CValidationState state; // Only used to report errors, not invalidity - ignore it
3484	}
generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7395289d40, nGenerate=1, nMaxTries=999999, 
    keepScript=false) at rpc/mining.cpp:142
142	        ++nHeight;
143	        blockHashes.push_back(pblock->GetHash().GetHex());
146	        if (keepScript)
139	        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);
121	        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript->reserveScript));
119	    while (nHeight < nHeightEnd)
151	    return blockHashes;
152	}
generatetoaddress (request=...) at rpc/mining.cpp:182
182	    std::shared_ptr<CReserveScript> coinbaseScript = std::make_shared<CReserveScript>();
177	    CTxDestination destination = DecodeDestination(request.params[1].get_str());
185	    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);
186	}
#0  generatetoaddress (request=...) at rpc/mining.cpp:186
186	}
Undefined command: "".  Try "help".
Continuing.
[Switching to Thread 0x7f738b476700 (LWP 15644)]

Breakpoint 1, generatetoaddress (request=...) at rpc/mining.cpp:155
155	{
156	    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)
171	    int nGenerate = request.params[0].get_int();
172	    uint64_t nMaxTries = 1000000;
173	    if (!request.params[2].isNull()) {
177	    CTxDestination destination = DecodeDestination(request.params[1].get_str());
178	    if (!IsValidDestination(destination)) {
182	    std::shared_ptr<CReserveScript> coinbaseScript = std::make_shared<CReserveScript>();
183	    coinbaseScript->reserveScript = GetScriptForDestination(destination);
185	    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);

Breakpoint 2, generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001be0, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:107
107	{
109	    int nHeightEnd = 0;
110	    int nHeight = 0;
113	        LOCK(cs_main);
114	        nHeight = chainActive.Height();
115	        nHeightEnd = nHeight+nGenerate;
113	        LOCK(cs_main);
117	    unsigned int nExtraNonce = 0;
118	    UniValue blockHashes(UniValue::VARR);
119	    while (nHeight < nHeightEnd)
121	        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript->reserveScript));

Breakpoint 6, BlockAssembler::CreateNewBlock (this=0x7f738b4753d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:103
103	{
104	    int64_t nTimeStart = GetTimeMicros();
106	    resetBlock();
108	    pblocktemplate.reset(new CBlockTemplate());
110	    if(!pblocktemplate.get())
112	    pblock = &pblocktemplate->block; // pointer for convenience
115	    pblock->vtx.emplace_back();
$80 = {
  <CBlockHeader> = {
    nVersion = 0x0, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x0, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 0, capacity 0, 
  fChecked = 0x0
}
116	    pblocktemplate->vTxFees.push_back(-1); // updated at end
117	    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end
119	    LOCK2(cs_main, mempool.cs);
120	    CBlockIndex* pindexPrev = chainActive.Tip();
121	    assert(pindexPrev != nullptr);
$81 = {
  <CBlockHeader> = {
    nVersion = 0x0, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x0, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 1, capacity 1 = {std::shared_ptr (empty) 0x0}, 
  fChecked = 0x0
}
122	    nHeight = pindexPrev->nHeight + 1;
124	    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());
127	    if (chainparams.MineBlocksOnDemand())
128	        pblock->nVersion = gArgs.GetArg("-blockversion", pblock->nVersion);
130	    pblock->nTime = GetAdjustedTime();
131	    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();
133	    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)
143	    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) && fMineWitnessTx;
145	    int nPackagesSelected = 0;
146	    int nDescendantsUpdated = 0;
147	    addPackageTxs(nPackagesSelected, nDescendantsUpdated);
#0  BlockAssembler::CreateNewBlock (this=0x7f738b4753d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:147
147	    addPackageTxs(nPackagesSelected, nDescendantsUpdated);
Function "addPackageTxs" not defined.
Make breakpoint pending on future shared library load? (y or [n]) Breakpoint 8 at 0x7f739292d4e7: file miner.cpp, line 307.

Breakpoint 8, BlockAssembler::addPackageTxs (this=0x7f738b4753d0, nPackagesSelected=@0x7f738b475038: 0, 
    nDescendantsUpdated=@0x7f738b47503c: 0) at miner.cpp:307
307	{
310	    indexed_modified_transaction_set mapModifiedTx;
312	    CTxMemPool::setEntries failedTx;
316	    UpdatePackagesForAdded(inBlock, mapModifiedTx);
$82 = {
  <boost::base_from_member<std::allocator<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolModifiedEntry, std::allocator<CTxMemPoolModifiedEntry> > > > >, 0>> = {
    member = {
      <__gnu_cxx::new_allocator<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolModifiedEntry, std::allocator<CTxMemPoolModifiedEntry> > > > >> = {<No data fields>}, <No data fields>}
  }, 
  <boost::multi_index::detail::header_holder<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolModifiedEntry, std::allocator<CTxMemPoolModifiedEntry> > > >*, boost::multi_index::multi_index_container<CTxMemPoolModifiedEntry, boost::multi_index::indexed_by<boost::multi_index::ordered_unique<modifiedentry_iter, CompareCTxMemPoolIter, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolModifiedEntry> > >> = {
    <boost::noncopyable_::noncopyable> = {<No data fields>}, 
    members of boost::multi_index::detail::header_holder<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolModifiedEntry, std::allocator<CTxMemPoolModifiedEntry> > > >*, boost::multi_index::multi_index_container<CTxMemPoolModifiedEntry, boost::multi_index::indexed_by<boost::multi_index::ordered_unique<modifiedentry_iter, CompareCTxMemPoolIter, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolModifiedEntry> > >: 
    member = 0x7f7368001070
  }, 
  <boost::multi_index::detail::ordered_index<modifiedentry_iter, CompareCTxMemPoolIter, boost::multi_index::detail::nth_layer<1, CTxMemPoolModifiedEntry, boost::multi_index::indexed_by<boost::multi_index::ordered_unique<modifiedentry_iter, CompareCTxMemPoolIter, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolModifiedEntry> >, boost::mpl::vector0<mpl_::na>, boost::multi_index::detail::ordered_unique_tag, boost::multi_index::detail::null_augment_policy>> = {
    <boost::multi_index::detail::ordered_index_impl<modifiedentry_iter, CompareCTxMemPoolIter, boost::multi_index::detail::nth_layer<1, CTxMemPoolModifiedEntry, boost::multi_index::indexed_by<boost::multi_index::ordered_unique<modifiedentry_iter, CompareCTxMemPoolIter, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolModifiedEntry> >, boost::mpl::vector0<mpl_::na>, boost::multi_index::detail::ordered_unique_tag, boost::multi_index::detail::null_augment_policy>> = {
      <boost::multi_index::detail::ordered_index<boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee, boost::multi_index::detail::nth_layer<2, CTxMemPoolModifiedEntry, boost::multi_index::indexed_by<boost::multi_index::ordered_unique<modifiedentry_iter, CompareCTxMemPoolIter, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolModifiedEntry> >, boost::mpl::v_item<ancestor_score, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>> = {
        <boost::multi_index::detail::ordered_index_impl<boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee, boost::multi_index::detail::nth_layer<2, CTxMemPoolModifiedEntry, boost::multi_index::indexed_by<boost::multi_index::ordered_unique<modifiedentry_iter, CompareCTxMemPoolIter, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolModifiedEntry> >, boost::mpl::v_item<ancestor_score, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>> = {
          <boost::multi_index::detail::index_base<CTxMemPoolModifiedEntry, boost::multi_index::indexed_by<boost::multi_index::ordered_unique<modifiedentry_iter, CompareCTxMemPoolIter, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolModifiedEntry> >> = {<No data fields>}, 
          members of boost::multi_index::detail::ordered_index_impl<boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee, boost::multi_index::detail::nth_layer<2, CTxMemPoolModifiedEntry, boost::multi_index::indexed_by<boost::multi_index::ordered_unique<modifiedentry_iter, CompareCTxMemPoolIter, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolModifiedEntry> >, boost::mpl::v_item<ancestor_score, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>: 
          key = {
            <boost::multi_index::detail::non_const_identity_base<CTxMemPoolModifiedEntry>> = {<No data fields>}, <No data fields>}, 
          comp_ = {<No data fields>}
        }, <No data fields>}, 
      members of boost::multi_index::detail::ordered_index_impl<modifiedentry_iter, CompareCTxMemPoolIter, boost::multi_index::detail::nth_layer<1, CTxMemPoolModifiedEntry, boost::multi_index::indexed_by<boost::multi_index::ordered_unique<modifiedentry_iter, CompareCTxMemPoolIter, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolModifiedEntry> >, boost::mpl::vector0<mpl_::na>, boost::multi_index::detail::ordered_unique_tag, boost::multi_index::detail::null_augment_policy>: 
      key = {<No data fields>}, 
      comp_ = {<No data fields>}
    }, <No data fields>}, 
  members of boost::multi_index::multi_index_container<CTxMemPoolModifiedEntry, boost::multi_index::indexed_by<boost::multi_index::ordered_unique<modifiedentry_iter, CompareCTxMemPoolIter, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolModifiedEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolModifiedEntry> >: 
  node_count = 0x0
}
318	    CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();
319	    CTxMemPool::txiter iter;
324	    const int64_t MAX_CONSECUTIVE_FAILURES = 1000;
325	    int64_t nConsecutiveFailed = 0;
327	    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty())
330	        if (mi != mempool.mapTx.get<ancestor_score>().end() &&
331	                SkipMapTxEntry(mempool.mapTx.project<0>(mi), mapModifiedTx, failedTx)) {
330	        if (mi != mempool.mapTx.get<ancestor_score>().end() &&
$83 = {
  nCheckFrequency = 0xffffffff, 
  nTransactionsUpdated = 0x1a, 
  minerPolicyEstimator = 0x7f7393123ae0, 
  totalTxSize = 0x86, 
  cachedInnerUsage = 0x230, 
  lastRollingFeeUpdate = 0x5b9eeb06, 
  blockSinceLastRollingFeeBump = 0x1, 
  rollingMinimumFeeRate = 0x0, 
  static ROLLING_FEE_HALFLIFE = 0xa8c0, 
  cs = {
    <AnnotatedMixin<std::recursive_mutex>> = {
      <std::recursive_mutex> = {
        <std::__recursive_mutex_base> = {
          _M_mutex = {
            __data = {
              __lock = 0x1, 
              __count = 0x1, 
              __owner = 0x3d1c, 
              __nusers = 0x1, 
              __kind = 0x1, 
              __spins = 0x0, 
              __elision = 0x0, 
              __list = {
                __prev = 0x0, 
                __next = 0x0
              }
            }, 
            __size = {0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x3d, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 
              0x0 <repeats 23 times>}, 
            __align = 0x100000001
          }
        }, <No data fields>}, <No data fields>}, <No data fields>}, 
  mapTx = {
    <boost::base_from_member<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag> >, 0>> = {
      member = {
        <__gnu_cxx::new_allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag> >> = {<No data fields>}, <No data fields>}
    }, 
    <boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>*, boost::multi_index::multi_index_container<CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> > >> = {
      <boost::noncopyable_::noncopyable> = {<No data fields>}, 
      members of boost::multi_index::detail::header_holder<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>*, boost::multi_index::multi_index_container<CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> > >: 
      member = 0x7f739477b260
    }, 
    <boost::multi_index::detail::hashed_index<mempoolentry_txid, SaltedTxidHasher, std::equal_to<uint256>, boost::multi_index::detail::nth_layer<1, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::vector0<mpl_::na>, boost::multi_index::detail::hashed_unique_tag>> = {
      <boost::multi_index::detail::ordered_index<boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore, boost::multi_index::detail::nth_layer<2, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::v_item<descendant_score, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>> = {
        <boost::multi_index::detail::ordered_index_impl<boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore, boost::multi_index::detail::nth_layer<2, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::v_item<descendant_score, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>> = {
          <boost::multi_index::detail::ordered_index<boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime, boost::multi_index::detail::nth_layer<3, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::v_item<entry_time, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>> = {
            <boost::multi_index::detail::ordered_index_impl<boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime, boost::multi_index::detail::nth_layer<3, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::v_item<entry_time, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>> = {
              <boost::multi_index::detail::ordered_index<boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee, boost::multi_index::detail::nth_layer<4, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::v_item<ancestor_score, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>> = {
                <boost::multi_index::detail::ordered_index_impl<boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee, boost::multi_index::detail::nth_layer<4, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::v_item<ancestor_score, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>> = {
                  <boost::multi_index::detail::index_base<CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >> = {<No data fields>}, 
                  members of boost::multi_index::detail::ordered_index_impl<boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee, boost::multi_index::detail::nth_layer<4, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::v_item<ancestor_score, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>: 
                  key = {
                    <boost::multi_index::detail::non_const_identity_base<CTxMemPoolEntry>> = {<No data fields>}, <No data fields>}, 
                  comp_ = {<No data fields>}
                }, <No data fields>}, 
              members of boost::multi_index::detail::ordered_index_impl<boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime, boost::multi_index::detail::nth_layer<3, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::v_item<entry_time, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>: 
              key = {
                <boost::multi_index::detail::non_const_identity_base<CTxMemPoolEntry>> = {<No data fields>}, <No data fields>}, 
              comp_ = {<No data fields>}
            }, <No data fields>}, 
          members of boost::multi_index::detail::ordered_index_impl<boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore, boost::multi_index::detail::nth_layer<2, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::v_item<descendant_score, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>: 
          key = {
            <boost::multi_index::detail::non_const_identity_base<CTxMemPoolEntry>> = {<No data fields>}, <No data fields>}, 
          comp_ = {<No data fields>}
        }, <No data fields>}, 
      members of boost::multi_index::detail::hashed_index<mempoolentry_txid, SaltedTxidHasher, std::equal_to<uint256>, boost::multi_index::detail::nth_layer<1, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >, boost::mpl::vector0<mpl_::na>, boost::multi_index::detail::hashed_unique_tag>: 
      key = {<No data fields>}, 
      hash_ = {
        k0 = 0xb2db9ffec03ed4af, 
        k1 = 0xbf4b1aedf2a255d3
      }, 
      eq_ = {
        <std::binary_function<uint256, uint256, bool>> = {<No data fields>}, <No data fields>}, 
      buckets = {
        <boost::multi_index::detail::bucket_array_base<true>> = {
          <boost::noncopyable_::noncopyable> = {<No data fields>}, 
          members of boost::multi_index::detail::bucket_array_base<true>: 
          static sizes = {0x35, 0x61, 0xc1, 0x185, 0x301, 0x607, 0xc07, 0x1807, 0x3001, 0x6011, 0xc005, 0x1800d, 0x30005, 
            0x60019, 0xc0001, 0x180005, 0x30000b, 0x60000d, 0xc00005, 0x1800013, 0x3000005, 0x6000017, 0xc000013, 0x18000005, 
            0x30000059, 0x60000005, 0xc0000001, 0x17ffffffb, 0x300000005, 0x5ffffffe7, 0xbffffffff, 0x1800000007, 
            0x3000000001, 0x6000000019, 0xbfffffffff, 0x17ffffffff3, 0x2ffffffffed, 0x60000000001, 0xbfffffffff3, 
            0x17ffffffffff, 0x300000000037, 0x5ffffffffff9, 0xbfffffffffe9, 0x1800000000011, 0x2fffffffffffb, 0x6000000000011, 
            0xbfffffffffff5, 0x17fffffffffff3, 0x2ffffffffffffb, 0x5fffffffffffdb, 0xc0000000000005, 0x17fffffffffffff, 
            0x300000000000023, 0x600000000000005, 0xbffffffffffffe7, 0x1800000000000011, 0x3000000000000005, 
            0x600000000000002f, 0xc000000000000011, 0xffffffffffffffc5}, 
          static sizes_length = 0x3c
        }, 
        members of boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >: 
        size_index_ = 0x0, 
        spc = {
          <boost::noncopyable_::noncopyable> = {<No data fields>}, 
          members of boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_base_node_impl<std::allocator<char> >, std::allocator<CTxMemPoolEntry> >: 
          al_ = {
            <__gnu_cxx::new_allocator<boost::multi_index::detail::hashed_index_base_node_impl<std::allocator<char> > >> = {<No data fields>}, <No data fields>}, 
          n_ = 0x36, 
          data_ = 0x7f739477b360
        }
      }, 
      mlf = 0x1, 
      max_load = 0x35
    }, 
    members of boost::multi_index::multi_index_container<CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher, mpl_::na, mpl_::na>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<CTxMemPoolEntry> >: 
    node_count = 0x1
  }, 
  vTxHashes = std::vector of length 1, capacity 1 = {{
      first = {
        <base_blob<256u>> = {
          static WIDTH = 0x20, 
          data = {0x8d, 0x3c, 0x43, 0x27, 0x39, 0x3a, 0x1e, 0xa8, 0x54, 0x40, 0xa8, 0xf9, 0x53, 0x19, 0xd6, 0xd8, 0xfc, 0xf7, 
            0xb, 0x7a, 0xa4, 0x8d, 0xde, 0xd2, 0xd, 0x40, 0x24, 0xa0, 0xa0, 0xbc, 0x2d, 0xc1}
        }, <No data fields>}, 
      second = {
        <boost::operators_impl::forward_iterator_helper<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&>> = {
          <boost::operators_impl::forward_iteratable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
            <boost::operators_impl::input_iteratable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
              <boost::operators_impl::equality_comparable1<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::incrementable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> > > >> = {
                <boost::operators_impl::incrementable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> > >> = {
                  <boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
                    <std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, 
        members of boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>: 
        node = 0x7f7368001e90
      }
    }}, 
  mapLinks = std::map with 1 elements = {
    [{
      <boost::operators_impl::forward_iterator_helper<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&>> = {
        <boost::operators_impl::forward_iteratable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
          <boost::operators_impl::input_iteratable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
            <boost::operators_impl::equality_comparable1<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::incrementable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> > > >> = {
              <boost::operators_impl::incrementable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> > >> = {
                <boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
                  <std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, 
      members of boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>: 
      node = 0x7f7368001e90
    }] = {
      parents = std::set with 0 elements, 
      children = std::set with 0 elements
    }
  }, 
  mapNextTx = {
    m = std::map with 1 elements = {
      [0x7f7368001ca0] = 0x7f73680009b0
    }
  }, 
  mapDeltas = std::map with 0 elements, 
  NotifyEntryAdded = warning: RTTI symbol not found for class 'boost::signals2::signal<void (std::shared_ptr<CTransaction const>), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void (std::shared_ptr<CTransaction const>)>, boost::function<void (boost::signals2::connection const&, std::shared_ptr<CTransaction const>)>, boost::signals2::mutex>'
{
    <boost::signals2::signal_base> = {
      <boost::noncopyable_::noncopyable> = {<No data fields>}, 
      members of boost::signals2::signal_base: 
      _vptr.signal_base = 0x7f7393110418 <vtable for boost::signals2::signal<void (std::shared_ptr<CTransaction const>), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void (std::shared_ptr<CTransaction const>)>, boost::function<void (boost::signals2::connection const&, std::shared_ptr<CTransaction const>)>, boost::signals2::mutex>+16>
    }, 
    <boost::signals2::detail::std_functional_base<void, std::shared_ptr<CTransaction const> >> = {
      <std::unary_function<std::shared_ptr<CTransaction const>, void>> = {<No data fields>}, <No data fields>}, 
    members of boost::signals2::signal<void(std::shared_ptr<const CTransaction>), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(std::shared_ptr<const CTransaction>)>, boost::function<void(const boost::signals2::connection&, std::shared_ptr<const CTransaction>)>, boost::signals2::mutex>: 
    static arity = <optimized out>, 
    _pimpl = {
      px = 0x7f739466ab90, 
      pn = {
        pi_ = 0x7f739477b640
      }
    }
  }, 
  NotifyEntryRemoved = warning: RTTI symbol not found for class 'boost::signals2::signal<void (std::shared_ptr<CTransaction const>, MemPoolRemovalReason), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void (std::shared_ptr<CTransaction const>, MemPoolRemovalReason)>, boost::function<void (boost::signals2::connection const&, std::shared_ptr<CTransaction const>, MemPoolRemovalReason)>, boost::signals2::mutex>'
{
    <boost::signals2::signal_base> = {
      <boost::noncopyable_::noncopyable> = {<No data fields>}, 
      members of boost::signals2::signal_base: 
      _vptr.signal_base = 0x7f73931103f0 <vtable for boost::signals2::signal<void (std::shared_ptr<CTransaction const>, MemPoolRemovalReason), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void (std::shared_ptr<CTransaction const>, MemPoolRemovalReason)>, boost::function<void (boost::signals2::connection const&, std::shared_ptr<CTransaction const>, MemPoolRemovalReason)>, boost::signals2::mutex>+16>
    }, 
    <boost::signals2::detail::std_functional_base<void, std::shared_ptr<CTransaction const>, MemPoolRemovalReason>> = {
      <std::binary_function<std::shared_ptr<CTransaction const>, MemPoolRemovalReason, void>> = {<No data fields>}, <No data fields>}, 
    members of boost::signals2::signal<void(std::shared_ptr<const CTransaction>, MemPoolRemovalReason), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(std::shared_ptr<const CTransaction>, MemPoolRemovalReason)>, boost::function<void(const boost::signals2::connection&, std::shared_ptr<const CTransaction>, MemPoolRemovalReason)>, boost::signals2::mutex>: 
    static arity = <optimized out>, 
    _pimpl = {
      px = 0x7f739477b660, 
      pn = {
        pi_ = 0x7f739477b7f0
      }
    }
  }
}
338	        bool fUsingModified = false;
340	        modtxscoreiter modit = mapModifiedTx.get<ancestor_score>().begin();
341	        if (mi == mempool.mapTx.get<ancestor_score>().end()) {
347	            iter = mempool.mapTx.project<0>(mi);
348	            if (modit != mapModifiedTx.get<ancestor_score>().end() &&
349	                    CompareTxMemPoolEntryByAncestorFee()(*modit, CTxMemPoolModifiedEntry(iter))) {
348	            if (modit != mapModifiedTx.get<ancestor_score>().end() &&
358	                ++mi;
364	        assert(!inBlock.count(iter));
366	        uint64_t packageSize = iter->GetSizeWithAncestors();
$84 = std::set with 0 elements
367	        CAmount packageFees = iter->GetModFeesWithAncestors();
368	        int64_t packageSigOpsCost = iter->GetSigOpCostWithAncestors();
369	        if (fUsingModified) {
375	        if (packageFees < blockMinFeeRate.GetFee(packageSize)) {
380	        if (!TestPackage(packageSize, packageSigOpsCost)) {
399	        CTxMemPool::setEntries ancestors;
400	        uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();
401	        std::string dummy;
402	        mempool.CalculateMemPoolAncestors(*iter, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);
404	        onlyUnconfirmed(ancestors);
405	        ancestors.insert(iter);
$85 = (const boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> >::value_type &) @0x7f7368001e90: {
  tx = std::shared_ptr (count 2, weak 0) 0x7f73680009b0, 
  nFee = 0xf4240, 
  nTxWeight = 0x216, 
  nUsageSize = 0x230, 
  nTime = 0x5b9ef032, 
  entryHeight = 0x3e4, 
  spendsCoinbase = 0x1, 
  sigOpCost = 0x1, 
  feeDelta = 0x0, 
  lockPoints = {
    height = 0xffffffff, 
    time = 0xffffffffffffffff, 
    maxInputBlock = 0x7f73953183c0
  }, 
  nCountWithDescendants = 0x1, 
  nSizeWithDescendants = 0x86, 
  nModFeesWithDescendants = 0xf4240, 
  nCountWithAncestors = 0x1, 
  nSizeWithAncestors = 0x86, 
  nModFeesWithAncestors = 0xf4240, 
  nSigOpCostWithAncestors = 0x1, 
  vTxHashesIdx = 0x0
}
There is no member or method named tx.
$86 = 1000000
#0  BlockAssembler::addPackageTxs (this=0x7f738b4753d0, nPackagesSelected=@0x7f738b475038: 0, 
    nDescendantsUpdated=@0x7f738b47503c: 0) at miner.cpp:405
405	        ancestors.insert(iter);
There is no member or method named tx.
$87 = (const boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> >::value_type &) @0x7f7368001e90: {
  tx = std::shared_ptr (count 2, weak 0) 0x7f73680009b0, 
  nFee = 0xf4240, 
  nTxWeight = 0x216, 
  nUsageSize = 0x230, 
  nTime = 0x5b9ef032, 
  entryHeight = 0x3e4, 
  spendsCoinbase = 0x1, 
  sigOpCost = 0x1, 
  feeDelta = 0x0, 
  lockPoints = {
    height = 0xffffffff, 
    time = 0xffffffffffffffff, 
    maxInputBlock = 0x7f73953183c0
  }, 
  nCountWithDescendants = 0x1, 
  nSizeWithDescendants = 0x86, 
  nModFeesWithDescendants = 0xf4240, 
  nCountWithAncestors = 0x1, 
  nSizeWithAncestors = 0x86, 
  nModFeesWithAncestors = 0xf4240, 
  nSigOpCostWithAncestors = 0x1, 
  vTxHashesIdx = 0x0
}
$88 = (const boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> >::value_type &) @0x7f7368001e90: {
  tx = std::shared_ptr (count 2, weak 0) 0x7f73680009b0, 
  nFee = 1000000, 
  nTxWeight = 534, 
  nUsageSize = 560, 
  nTime = 1537142834, 
  entryHeight = 996, 
  spendsCoinbase = true, 
  sigOpCost = 1, 
  feeDelta = 0, 
  lockPoints = {
    height = -1, 
    time = -1, 
    maxInputBlock = 0x7f73953183c0
  }, 
  nCountWithDescendants = 1, 
  nSizeWithDescendants = 134, 
  nModFeesWithDescendants = 1000000, 
  nCountWithAncestors = 1, 
  nSizeWithAncestors = 134, 
  nModFeesWithAncestors = 1000000, 
  nSigOpCostWithAncestors = 1, 
  vTxHashesIdx = 0
}
408	        if (!TestPackageTransactions(ancestors)) {
417	        nConsecutiveFailed = 0;
420	        std::vector<CTxMemPool::txiter> sortedEntries;
421	        SortForBlock(ancestors, sortedEntries);
423	        for (size_t i=0; i<sortedEntries.size(); ++i) {
$89 = 0x1
$90 = std::vector of length 1, capacity 1 = {{
    <boost::operators_impl::forward_iterator_helper<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&>> = {
      <boost::operators_impl::forward_iteratable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
        <boost::operators_impl::input_iteratable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
          <boost::operators_impl::equality_comparable1<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::incrementable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> > > >> = {
            <boost::operators_impl::incrementable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> > >> = {
              <boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
                <std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, 
    members of boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>: 
    node = 0x7f7368001e90
  }}
$91 = (__gnu_cxx::__alloc_traits<std::allocator<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag> > >::value_type &) @0x7f7368001ac0: {
  <boost::operators_impl::forward_iterator_helper<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&>> = {
    <boost::operators_impl::forward_iteratable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
      <boost::operators_impl::input_iteratable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
        <boost::operators_impl::equality_comparable1<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::incrementable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> > > >> = {
          <boost::operators_impl::incrementable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> > >> = {
            <boost::operators_impl::dereferenceable<boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>, CTxMemPoolEntry const*, std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&> >> = {
              <std::iterator<std::forward_iterator_tag, CTxMemPoolEntry, long, CTxMemPoolEntry const*, CTxMemPoolEntry const&>> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, 
  members of boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>: 
  node = 0x7f7368001e90
}
Breakpoint 9 at 0x7f739292c940: file miner.cpp, line 225.
424	            AddToBlock(sortedEntries[i]);

Breakpoint 9, BlockAssembler::AddToBlock (this=0x7f738b4753d0, iter=...) at miner.cpp:225
225	{
226	    pblock->vtx.emplace_back(iter->GetSharedTx());
$92 = std::shared_ptr (count 3, weak 0) 0x7f73680009b0
Attempt to take address of value not located in memory.
Attempt to take address of value not located in memory.
227	    pblocktemplate->vTxFees.push_back(iter->GetFee());
$93 = (const CAmount &) @0x7f7368001ea0: 0xf4240
$94 = (const CAmount &) @0x7f7368001ea0: 1000000
228	    pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());
229	    nBlockWeight += iter->GetTxWeight();
$95 = 0x216
$96 = 534
230	    ++nBlockTx;
231	    nBlockSigOpsCost += iter->GetSigOpCost();
232	    nFees += iter->GetFee();
233	    inBlock.insert(iter);
235	    bool fPrintPriority = gArgs.GetBoolArg("-printpriority", DEFAULT_PRINTPRIORITY);
236	    if (fPrintPriority) {
241	}
BlockAssembler::addPackageTxs (this=0x7f738b4753d0, nPackagesSelected=@0x7f738b475038: 0, 
    nDescendantsUpdated=@0x7f738b47503c: 0) at miner.cpp:426
426	            mapModifiedTx.erase(sortedEntries[i]);
423	        for (size_t i=0; i<sortedEntries.size(); ++i) {
429	        ++nPackagesSelected;
432	        nDescendantsUpdated += UpdatePackagesForAdded(ancestors, mapModifiedTx);
420	        std::vector<CTxMemPool::txiter> sortedEntries;
401	        std::string dummy;
399	        CTxMemPool::setEntries ancestors;
327	    while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty())
312	    CTxMemPool::setEntries failedTx;
310	    indexed_modified_transaction_set mapModifiedTx;
434	}
BlockAssembler::CreateNewBlock (this=0x7f738b4753d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:149
149	    int64_t nTime1 = GetTimeMicros();
$97 = {
  <CBlockHeader> = {
    nVersion = 0x20000000, 
    hashPrevBlock = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    hashMerkleRoot = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    nTime = 0x5b9ef1b1, 
    nBits = 0x0, 
    nNonce = 0x0
  }, 
  members of CBlock: 
  vtx = std::vector of length 2, capacity 2 = {std::shared_ptr (empty) 0x0, std::shared_ptr (count 6, weak 0) 0x7f73680009b0}, 
  fChecked = 0x0
}
151	    nLastBlockTx = nBlockTx;
152	    nLastBlockWeight = nBlockWeight;
155	    CMutableTransaction coinbaseTx;
#0  BlockAssembler::CreateNewBlock (this=0x7f738b4753d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:155
155	    CMutableTransaction coinbaseTx;
156	    coinbaseTx.vin.resize(1);
$98 = (__gnu_cxx::__alloc_traits<std::allocator<CTxIn> >::value_type &) @0x0: <error reading variable>
$99 = {
  vin = std::vector of length 0, capacity 0, 
  vout = std::vector of length 0, capacity 0, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
157	    coinbaseTx.vin[0].prevout.SetNull();
$100 = {
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0 <repeats 32 times>}
          }, <No data fields>}, 
        n = 0xffffffff
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x0 <repeats 28 times>}, 
            {
              capacity = 0x0, 
              indirect = 0x0
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 0, capacity 0, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
$101 = (__gnu_cxx::__alloc_traits<std::allocator<CTxIn> >::value_type &) @0x7f7368001790: {
  prevout = {
    hash = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    n = 0xffffffff
  }, 
  scriptSig = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x0, 
      _union = {
        direct = {0x0 <repeats 28 times>}, 
        {
          capacity = 0x0, 
          indirect = 0x0
        }
      }
    }, <No data fields>}, 
  nSequence = 0xffffffff, 
  scriptWitness = {
    stack = std::vector of length 0, capacity 0
  }, 
  static SEQUENCE_FINAL = 0xffffffff, 
  static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
  static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
  static SEQUENCE_LOCKTIME_MASK = 0xffff, 
  static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
}
158	    coinbaseTx.vout.resize(1);
$102 = (__gnu_cxx::__alloc_traits<std::allocator<CTxIn> >::value_type &) @0x7f7368001790: {
  prevout = {
    hash = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    n = 0xffffffff
  }, 
  scriptSig = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x0, 
      _union = {
        direct = {0x0 <repeats 28 times>}, 
        {
          capacity = 0x0, 
          indirect = 0x0
        }
      }
    }, <No data fields>}, 
  nSequence = 0xffffffff, 
  scriptWitness = {
    stack = std::vector of length 0, capacity 0
  }, 
  static SEQUENCE_FINAL = 0xffffffff, 
  static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
  static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
  static SEQUENCE_LOCKTIME_MASK = 0xffff, 
  static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
}
$103 = {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x0, 
    _union = {
      direct = {0x0 <repeats 28 times>}, 
      {
        capacity = 0x0, 
        indirect = 0x0
      }
    }
  }, <No data fields>}
159	    coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;
160	    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());
161	    coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;
162	    pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));
$104 = {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x4, 
    _union = {
      direct = {0x2, 0xe5, 0x3, 0x0 <repeats 25 times>}, 
      {
        capacity = 0x3e502, 
        indirect = 0x0
      }
    }
  }, <No data fields>}
$105 = 0x3e5
$106 = 0x0
$107 = (__gnu_cxx::__alloc_traits<std::allocator<CTxIn> >::value_type &) @0x7f7368001790: {
  prevout = {
    hash = {
      <base_blob<256u>> = {
        static WIDTH = 0x20, 
        data = {0x0 <repeats 32 times>}
      }, <No data fields>}, 
    n = 0xffffffff
  }, 
  scriptSig = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x4, 
      _union = {
        direct = {0x2, 0xe5, 0x3, 0x0 <repeats 25 times>}, 
        {
          capacity = 0x3e502, 
          indirect = 0x0
        }
      }
    }, <No data fields>}, 
  nSequence = 0xffffffff, 
  scriptWitness = {
    stack = std::vector of length 0, capacity 0
  }, 
  static SEQUENCE_FINAL = 0xffffffff, 
  static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
  static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
  static SEQUENCE_LOCKTIME_MASK = 0xffff, 
  static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
}
163	    pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());

Breakpoint 7, GenerateCoinbaseCommitment (block=..., pindexPrev=0x7f7395759900, consensusParams=...) at validation.cpp:3110
3110	{
3111	    std::vector<unsigned char> commitment;
3112	    int commitpos = GetWitnessCommitmentIndex(block);
3113	    std::vector<unsigned char> ret(32, 0x00);
3114	    if (consensusParams.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {
3115	        if (commitpos == -1) {
3116	            uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);
3117	            CHash256().Write(witnessroot.begin(), 32).Write(ret.data(), 32).Finalize(witnessroot.begin());
3118	            CTxOut out;
3119	            out.nValue = 0;
3120	            out.scriptPubKey.resize(38);
3121	            out.scriptPubKey[0] = OP_RETURN;
3122	            out.scriptPubKey[1] = 0x24;
3123	            out.scriptPubKey[2] = 0xaa;
3124	            out.scriptPubKey[3] = 0x21;
3125	            out.scriptPubKey[4] = 0xa9;
3126	            out.scriptPubKey[5] = 0xed;
3127	            memcpy(&out.scriptPubKey[6], witnessroot.begin(), 32);
3128	            commitment = std::vector<unsigned char>(out.scriptPubKey.begin(), out.scriptPubKey.end());
3129	            CMutableTransaction tx(*block.vtx[0]);
3130	            tx.vout.push_back(out);
3131	            block.vtx[0] = MakeTransactionRef(std::move(tx));
3129	            CMutableTransaction tx(*block.vtx[0]);
3118	            CTxOut out;
3134	    UpdateUncommittedBlockStructures(block, pindexPrev, consensusParams);
3135	    return commitment;
3113	    std::vector<unsigned char> ret(32, 0x00);
3135	    return commitment;
3136	}
BlockAssembler::CreateNewBlock (this=0x7f738b4753d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:164
164	    pblocktemplate->vTxFees[0] = -nFees;
$108 = 0xf4240
$109 = -1000000
166	    LogPrintf("CreateNewBlock(): block weight: %u txs: %u fees: %ld sigops %d\n", GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);
169	    pblock->hashPrevBlock  = pindexPrev->GetBlockHash();
170	    UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);
171	    pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());
172	    pblock->nNonce         = 0;
173	    pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);
175	    CValidationState state;
176	    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {

Breakpoint 5, TestBlockValidity (state=..., chainparams=..., block=..., pindexPrev=0x7f7395759900, fCheckPOW=false, 
    fCheckMerkleRoot=false) at validation.cpp:3487
3487	{
3488	    AssertLockHeld(cs_main);
3489	    assert(pindexPrev && pindexPrev == chainActive.Tip());
3490	    CCoinsViewCache viewNew(pcoinsTip.get());
3491	    uint256 block_hash(block.GetHash());
3492	    CBlockIndex indexDummy(block);
3493	    indexDummy.pprev = pindexPrev;
3494	    indexDummy.nHeight = pindexPrev->nHeight + 1;
3495	    indexDummy.phashBlock = &block_hash;
3498	    if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))
3500	    if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))
3502	    if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))
3504	    if (!g_chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))
3506	    assert(state.IsValid());
3508	    return true;
3490	    CCoinsViewCache viewNew(pcoinsTip.get());
3509	}
BlockAssembler::CreateNewBlock (this=0x7f738b4753d0, scriptPubKeyIn=..., fMineWitnessTx=true) at miner.cpp:179
179	    int64_t nTime2 = GetTimeMicros();
181	    LogPrint(BCLog::BENCH, "CreateNewBlock() packages: %.2fms (%d packages, %d updated descendants), validity: %.2fms (total %.2fms)\n", 0.001 * (nTime1 - nTimeStart), nPackagesSelected, nDescendantsUpdated, 0.001 * (nTime2 - nTime1), 0.001 * (nTime2 - nTimeStart));
183	    return std::move(pblocktemplate);
175	    CValidationState state;
155	    CMutableTransaction coinbaseTx;
119	    LOCK2(cs_main, mempool.cs);
184	}
generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001be0, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:122
122	        if (!pblocktemplate.get())
#0  generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001be0, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:122
122	        if (!pblocktemplate.get())
124	        CBlock *pblock = &pblocktemplate->block;
Breakpoint 10 at 0x7f739293814e: file pow.cpp, line 75.
Function "SerializeHash" not defined.
Make breakpoint pending on future shared library load? (y or [n]) Breakpoint 11 at 0x7f7392b12b15: hash.h:186. (3 locations)
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00007f739270750a in generatetoaddress(JSONRPCRequest const&) at rpc/mining.cpp:155
	breakpoint already hit 7 times
2       breakpoint     keep y   0x00007f7392706ec4 in generateBlocks(std::shared_ptr<CReserveScript>, int, unsigned long, bool) at rpc/mining.cpp:107
	breakpoint already hit 6 times
3       breakpoint     keep y   0x00007f739292dda5 in IncrementExtraNonce(CBlock*, CBlockIndex const*, unsigned int&) 
                                                   at miner.cpp:437
	breakpoint already hit 5 times
4       breakpoint     keep y   0x00007f7392b10b34 in BlockMerkleRoot(CBlock const&, bool*) at consensus/merkle.cpp:159
	breakpoint already hit 10 times
5       breakpoint     keep y   0x00007f7392816108 in TestBlockValidity(CValidationState&, CChainParams const&, CBlock const&, CBlockIndex*, bool, bool) at validation.cpp:3487
	breakpoint already hit 6 times
6       breakpoint     keep y   0x00007f739292b697 in BlockAssembler::CreateNewBlock(CScript const&, bool) at miner.cpp:103
	breakpoint already hit 3 times
7       breakpoint     keep y   0x00007f7392813032 in GenerateCoinbaseCommitment(CBlock&, CBlockIndex const*, Consensus::Params const&) at validation.cpp:3110
	breakpoint already hit 3 times
8       breakpoint     keep y   0x00007f739292d4e7 in BlockAssembler::addPackageTxs(int&, int&) at miner.cpp:307
	breakpoint already hit 1 time
9       breakpoint     keep y   0x00007f739292c940 in BlockAssembler::AddToBlock(boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>) 
                                                   at miner.cpp:225
	breakpoint already hit 1 time
10      breakpoint     keep y   0x00007f739293814e in CheckProofOfWork(uint256, unsigned int, Consensus::Params const&) 
                                                   at pow.cpp:75
11      breakpoint     keep y   <MULTIPLE>         
11.1                        y     0x00007f7392b12b15 in SerializeHash<CBlockHeader>(CBlockHeader const&, int, int) 
                                                   at ./hash.h:186
11.2                        y     0x00007f7392b1484b in SerializeHash<CMutableTransaction>(CMutableTransaction const&, int, int) at ./hash.h:186
11.3                        y     0x00007f7392b148e2 in SerializeHash<CTransaction>(CTransaction const&, int, int) 
                                                   at ./hash.h:186
Note: breakpoint 11 also set at pc 0x7f7392b12b15.
Breakpoint 12 at 0x7f7392b12b15: file ./hash.h, line 186.
Note: breakpoint 11 also set at pc 0x7f7392b1484b.
Breakpoint 13 at 0x7f7392b1484b: file ./hash.h, line 186.
Note: breakpoint 11 also set at pc 0x7f7392b148e2.
Breakpoint 14 at 0x7f7392b148e2: file ./hash.h, line 186.
Function "SerializeHash<>" not defined.
Make breakpoint pending on future shared library load? (y or [n]) 126	            LOCK(cs_main);
127	            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce); // ericksun here merkel tree root

Breakpoint 3, IncrementExtraNonce (pblock=0x7f73680019d0, pindexPrev=0x7f7395759900, nExtraNonce=@0x7f738b4753a4: 0)
    at miner.cpp:437
437	{
439	    static uint256 hashPrevBlock;
440	    if (hashPrevBlock != pblock->hashPrevBlock)
442	        nExtraNonce = 0;
443	        hashPrevBlock = pblock->hashPrevBlock;
445	    ++nExtraNonce;
446	    unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2
447	    CMutableTransaction txCoinbase(*pblock->vtx[0]);
448	    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;
449	    assert(txCoinbase.vin[0].scriptSig.size() <= 100);
451	    pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));

Breakpoint 11, SerializeHash<CTransaction> (obj=..., nType=4, nVersion=1073741824) at ./hash.h:186
186	uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)
188	    CHashWriter ss(nType, nVersion);
189	    ss << obj;
190	    return ss.GetHash();
191	}
CTransaction::ComputeHash (this=0x7f7368001320) at primitives/transaction.cpp:69
69	}
std::_Sp_counted_ptr_inplace<CTransaction const, std::allocator<CTransaction>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<CMutableTransaction>(std::allocator<CTransaction>, CMutableTransaction&&) (this=0x7f7368001310, __a=...)
    at /usr/include/c++/6/bits/shared_ptr_base.h:522
522		}
std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<CTransaction const, std::allocator<CTransaction>, CMutableTransaction>(std::_Sp_make_shared_tag, CTransaction const*, std::allocator<CTransaction> const&, CMutableTransaction&&) (
    this=0x7f738b4752c8, __a=...) at /usr/include/c++/6/bits/shared_ptr_base.h:617
617		  _M_pi = __mem;
618		  __guard = nullptr;
613		  auto __guard = std::__allocate_guarded(__a2);
612		  typename _Sp_cp_type::__allocator_type __a2(__a);
619		}
std::__shared_ptr<CTransaction const, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<CTransaction>, CMutableTransaction>(std::_Sp_make_shared_tag, std::allocator<CTransaction> const&, CMutableTransaction&&) (this=0x7f738b4752c0, __tag=..., 
    __a=...) at /usr/include/c++/6/bits/shared_ptr_base.h:1104
1104		  void* __p = _M_refcount._M_get_deleter(typeid(__tag));
1105		  _M_ptr = static_cast<_Tp*>(__p);
1106		  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
1107		}
std::shared_ptr<CTransaction const>::shared_ptr<std::allocator<CTransaction>, CMutableTransaction>(std::_Sp_make_shared_tag, std::allocator<CTransaction> const&, CMutableTransaction&&) (this=0x7f738b4752c0, __tag=..., __a=...)
    at /usr/include/c++/6/bits/shared_ptr.h:320
320		{ }
std::allocate_shared<CTransaction const, std::allocator<CTransaction>, CMutableTransaction>(std::allocator<CTransaction> const&, CMutableTransaction&&) (__a=..., __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x74d752, DIE 0x7c45ec>)
    at /usr/include/c++/6/bits/shared_ptr.h:621
621	    }
std::make_shared<CTransaction const, CMutableTransaction>(CMutableTransaction&&) (
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x74d752, DIE 0x7c45ec>)
    at /usr/include/c++/6/bits/shared_ptr.h:637
637	    }
IncrementExtraNonce (pblock=0x7f73680019d0, pindexPrev=0x7f7395759900, nExtraNonce=@0x7f738b4753a4: 1) at miner.cpp:452
452	    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);

Breakpoint 4, BlockMerkleRoot (block=..., mutated=0x0) at consensus/merkle.cpp:159
159	{
160	    std::vector<uint256> leaves;
161	    leaves.resize(block.vtx.size());
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
163	        leaves[s] = block.vtx[s]->GetHash();
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
163	        leaves[s] = block.vtx[s]->GetHash();
162	    for (size_t s = 0; s < block.vtx.size(); s++) {
165	    return ComputeMerkleRoot(leaves, mutated);
160	    std::vector<uint256> leaves;
165	    return ComputeMerkleRoot(leaves, mutated);
166	}
IncrementExtraNonce (pblock=0x7f73680019d0, pindexPrev=0x7f7395759900, nExtraNonce=@0x7f738b4753a4: 1) at miner.cpp:447
447	    CMutableTransaction txCoinbase(*pblock->vtx[0]);
453	}
generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001be0, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:126
126	            LOCK(cs_main);
129	        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {

Breakpoint 11, SerializeHash<CBlockHeader> (obj=..., nType=4, nVersion=70015) at ./hash.h:186
186	uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)
188	    CHashWriter ss(nType, nVersion);
189	    ss << obj;
190	    return ss.GetHash();
191	}
CBlockHeader::GetHash (this=0x7f73680019d0) at primitives/block.cpp:16
16	}

Breakpoint 10, CheckProofOfWork (hash=..., nBits=545259519, params=...) at pow.cpp:75
75	{
78	    arith_uint256 bnTarget;
80	    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);
83	    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))
87	    if (UintToArith256(hash) > bnTarget)
90	    return true;
91	}
generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001be0, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:133
133	        if (nMaxTries == 0) {
No symbol "p" in current context.

Breakpoint 11, SerializeHash<CBlockHeader> (obj=..., nType=4, nVersion=70015) at ./hash.h:186
186	uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)
The program being debugged stopped while in a function called from GDB.
Evaluation of the expression containing the function
(CBlockHeader::GetHash() const) will be abandoned.
When the function is done executing, GDB will silently stop.
188	    CHashWriter ss(nType, nVersion);
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00007f739270750a in generatetoaddress(JSONRPCRequest const&) at rpc/mining.cpp:155
	breakpoint already hit 7 times
2       breakpoint     keep y   0x00007f7392706ec4 in generateBlocks(std::shared_ptr<CReserveScript>, int, unsigned long, bool) at rpc/mining.cpp:107
	breakpoint already hit 6 times
3       breakpoint     keep y   0x00007f739292dda5 in IncrementExtraNonce(CBlock*, CBlockIndex const*, unsigned int&) 
                                                   at miner.cpp:437
	breakpoint already hit 6 times
4       breakpoint     keep y   0x00007f7392b10b34 in BlockMerkleRoot(CBlock const&, bool*) at consensus/merkle.cpp:159
	breakpoint already hit 11 times
5       breakpoint     keep y   0x00007f7392816108 in TestBlockValidity(CValidationState&, CChainParams const&, CBlock const&, CBlockIndex*, bool, bool) at validation.cpp:3487
	breakpoint already hit 6 times
6       breakpoint     keep y   0x00007f739292b697 in BlockAssembler::CreateNewBlock(CScript const&, bool) at miner.cpp:103
	breakpoint already hit 3 times
7       breakpoint     keep y   0x00007f7392813032 in GenerateCoinbaseCommitment(CBlock&, CBlockIndex const*, Consensus::Params const&) at validation.cpp:3110
	breakpoint already hit 3 times
8       breakpoint     keep y   0x00007f739292d4e7 in BlockAssembler::addPackageTxs(int&, int&) at miner.cpp:307
	breakpoint already hit 1 time
9       breakpoint     keep y   0x00007f739292c940 in BlockAssembler::AddToBlock(boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>) 
                                                   at miner.cpp:225
	breakpoint already hit 1 time
10      breakpoint     keep y   0x00007f739293814e in CheckProofOfWork(uint256, unsigned int, Consensus::Params const&) 
                                                   at pow.cpp:75
	breakpoint already hit 1 time
11      breakpoint     keep y   <MULTIPLE>         
	breakpoint already hit 3 times
11.1                        y     0x00007f7392b12b15 in SerializeHash<CBlockHeader>(CBlockHeader const&, int, int) 
                                                   at ./hash.h:186
11.2                        y     0x00007f7392b1484b in SerializeHash<CMutableTransaction>(CMutableTransaction const&, int, int) at ./hash.h:186
11.3                        y     0x00007f7392b148e2 in SerializeHash<CTransaction>(CTransaction const&, int, int) 
                                                   at ./hash.h:186
12      breakpoint     keep y   0x00007f7392b12b15 in SerializeHash<CBlockHeader>(CBlockHeader const&, int, int) 
                                                   at ./hash.h:186
	breakpoint already hit 2 times
13      breakpoint     keep y   0x00007f7392b1484b in SerializeHash<CMutableTransaction>(CMutableTransaction const&, int, int) 
                                                   at ./hash.h:186
14      breakpoint     keep y   0x00007f7392b148e2 in SerializeHash<CTransaction>(CTransaction const&, int, int) 
                                                   at ./hash.h:186
	breakpoint already hit 1 time
No symbol "pblock" in current context.
189	    ss << obj;
190	    return ss.GetHash();
191	}
CBlockHeader::GetHash (this=0x7f73680019d0) at primitives/block.cpp:16
16	}
136	        if (pblock->nNonce == nInnerLoopCount) {

Breakpoint 12, SerializeHash<CBlockHeader> (obj=..., nType=4, nVersion=70015) at ./hash.h:186
186	uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)
The program being debugged stopped while in a function called from GDB.
Evaluation of the expression containing the function
(CBlockHeader::GetHash() const) will be abandoned.
When the function is done executing, GDB will silently stop.
Undefined info command: "breka".  Try "help info".
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00007f739270750a in generatetoaddress(JSONRPCRequest const&) at rpc/mining.cpp:155
	breakpoint already hit 7 times
2       breakpoint     keep y   0x00007f7392706ec4 in generateBlocks(std::shared_ptr<CReserveScript>, int, unsigned long, bool) at rpc/mining.cpp:107
	breakpoint already hit 6 times
3       breakpoint     keep y   0x00007f739292dda5 in IncrementExtraNonce(CBlock*, CBlockIndex const*, unsigned int&) 
                                                   at miner.cpp:437
	breakpoint already hit 6 times
4       breakpoint     keep y   0x00007f7392b10b34 in BlockMerkleRoot(CBlock const&, bool*) at consensus/merkle.cpp:159
	breakpoint already hit 11 times
5       breakpoint     keep y   0x00007f7392816108 in TestBlockValidity(CValidationState&, CChainParams const&, CBlock const&, CBlockIndex*, bool, bool) at validation.cpp:3487
	breakpoint already hit 6 times
6       breakpoint     keep y   0x00007f739292b697 in BlockAssembler::CreateNewBlock(CScript const&, bool) at miner.cpp:103
	breakpoint already hit 3 times
7       breakpoint     keep y   0x00007f7392813032 in GenerateCoinbaseCommitment(CBlock&, CBlockIndex const*, Consensus::Params const&) at validation.cpp:3110
	breakpoint already hit 3 times
8       breakpoint     keep y   0x00007f739292d4e7 in BlockAssembler::addPackageTxs(int&, int&) at miner.cpp:307
	breakpoint already hit 1 time
9       breakpoint     keep y   0x00007f739292c940 in BlockAssembler::AddToBlock(boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>) 
                                                   at miner.cpp:225
	breakpoint already hit 1 time
10      breakpoint     keep y   0x00007f739293814e in CheckProofOfWork(uint256, unsigned int, Consensus::Params const&) 
                                                   at pow.cpp:75
	breakpoint already hit 1 time
12      breakpoint     keep y   0x00007f7392b12b15 in SerializeHash<CBlockHeader>(CBlockHeader const&, int, int) 
                                                   at ./hash.h:186
	breakpoint already hit 3 times
13      breakpoint     keep y   0x00007f7392b1484b in SerializeHash<CMutableTransaction>(CMutableTransaction const&, int, int) 
                                                   at ./hash.h:186
14      breakpoint     keep y   0x00007f7392b148e2 in SerializeHash<CTransaction>(CTransaction const&, int, int) 
                                                   at ./hash.h:186
	breakpoint already hit 1 time
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00007f739270750a in generatetoaddress(JSONRPCRequest const&) at rpc/mining.cpp:155
	breakpoint already hit 7 times
2       breakpoint     keep y   0x00007f7392706ec4 in generateBlocks(std::shared_ptr<CReserveScript>, int, unsigned long, bool) at rpc/mining.cpp:107
	breakpoint already hit 6 times
3       breakpoint     keep y   0x00007f739292dda5 in IncrementExtraNonce(CBlock*, CBlockIndex const*, unsigned int&) 
                                                   at miner.cpp:437
	breakpoint already hit 6 times
4       breakpoint     keep y   0x00007f7392b10b34 in BlockMerkleRoot(CBlock const&, bool*) at consensus/merkle.cpp:159
	breakpoint already hit 11 times
5       breakpoint     keep y   0x00007f7392816108 in TestBlockValidity(CValidationState&, CChainParams const&, CBlock const&, CBlockIndex*, bool, bool) at validation.cpp:3487
	breakpoint already hit 6 times
6       breakpoint     keep y   0x00007f739292b697 in BlockAssembler::CreateNewBlock(CScript const&, bool) at miner.cpp:103
	breakpoint already hit 3 times
7       breakpoint     keep y   0x00007f7392813032 in GenerateCoinbaseCommitment(CBlock&, CBlockIndex const*, Consensus::Params const&) at validation.cpp:3110
	breakpoint already hit 3 times
8       breakpoint     keep y   0x00007f739292d4e7 in BlockAssembler::addPackageTxs(int&, int&) at miner.cpp:307
	breakpoint already hit 1 time
9       breakpoint     keep y   0x00007f739292c940 in BlockAssembler::AddToBlock(boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>) 
                                                   at miner.cpp:225
	breakpoint already hit 1 time
10      breakpoint     keep y   0x00007f739293814e in CheckProofOfWork(uint256, unsigned int, Consensus::Params const&) 
                                                   at pow.cpp:75
	breakpoint already hit 1 time
No symbol "pblock" in current context.
188	    CHashWriter ss(nType, nVersion);
189	    ss << obj;
190	    return ss.GetHash();
191	}
CBlockHeader::GetHash (this=0x7f73680019d0) at primitives/block.cpp:16
16	}
No symbol "pblock" in current context.
139	        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);
140	        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))
#0  generateBlocks (coinbaseScript=std::shared_ptr (count 2, weak 0) 0x7f7368001be0, nGenerate=1, nMaxTries=1000000, 
    keepScript=false) at rpc/mining.cpp:140
140	        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))
$110 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x7b, 0x3, 0x2b, 0x3a, 0xcd, 0x8d, 0xb8, 0x50, 0xf4, 0x9f, 0x2a, 0xeb, 0xb8, 0xeb, 0x7b, 0x19, 0xf4, 0xce, 0xe9, 
      0x62, 0x3b, 0xd9, 0x9b, 0xb1, 0xfb, 0x5b, 0x5c, 0x1d, 0x51, 0xda, 0x61, 0x4a}
  }, <No data fields>}
Breakpoint 15 at 0x7f7392689f32: block.h:39. (8 locations)
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00007f739270750a in generatetoaddress(JSONRPCRequest const&) at rpc/mining.cpp:155
	breakpoint already hit 7 times
2       breakpoint     keep y   0x00007f7392706ec4 in generateBlocks(std::shared_ptr<CReserveScript>, int, unsigned long, bool) at rpc/mining.cpp:107
	breakpoint already hit 6 times
3       breakpoint     keep y   0x00007f739292dda5 in IncrementExtraNonce(CBlock*, CBlockIndex const*, unsigned int&) 
                                                   at miner.cpp:437
	breakpoint already hit 6 times
4       breakpoint     keep y   0x00007f7392b10b34 in BlockMerkleRoot(CBlock const&, bool*) at consensus/merkle.cpp:159
	breakpoint already hit 11 times
5       breakpoint     keep y   0x00007f7392816108 in TestBlockValidity(CValidationState&, CChainParams const&, CBlock const&, CBlockIndex*, bool, bool) at validation.cpp:3487
	breakpoint already hit 6 times
6       breakpoint     keep y   0x00007f739292b697 in BlockAssembler::CreateNewBlock(CScript const&, bool) at miner.cpp:103
	breakpoint already hit 3 times
7       breakpoint     keep y   0x00007f7392813032 in GenerateCoinbaseCommitment(CBlock&, CBlockIndex const*, Consensus::Params const&) at validation.cpp:3110
	breakpoint already hit 3 times
8       breakpoint     keep y   0x00007f739292d4e7 in BlockAssembler::addPackageTxs(int&, int&) at miner.cpp:307
	breakpoint already hit 1 time
9       breakpoint     keep y   0x00007f739292c940 in BlockAssembler::AddToBlock(boost::multi_index::detail::hashed_index_iterator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry> > > > >, boost::multi_index::detail::hashed_unique_tag>, boost::multi_index::detail::bucket_array<std::allocator<CTxMemPoolEntry> >, boost::multi_index::detail::hashed_index_global_iterator_tag>) 
                                                   at miner.cpp:225
	breakpoint already hit 1 time
10      breakpoint     keep y   0x00007f739293814e in CheckProofOfWork(uint256, unsigned int, Consensus::Params const&) 
                                                   at pow.cpp:75
	breakpoint already hit 1 time
15      breakpoint     keep y   <MULTIPLE>         
15.1                        y     0x00007f7392689f32 in CBlockHeader::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize) at ./primitives/block.h:39
15.2                        y     0x00007f73926a336a in CBlockHeader::SerializationOp<CVectorWriter, CSerActionSerialize>(CVectorWriter&, CSerActionSerialize) at ./primitives/block.h:39
15.3                        y     0x00007f73926df15a in CBlockHeader::SerializationOp<CDataStream, CSerActionSerialize>(CDataStream&, CSerActionSerialize) at ./primitives/block.h:39
15.4                        y     0x00007f7392705e0a in CBlockHeader::SerializationOp<CSizeComputer, CSerActionSerialize>(CSizeComputer&, CSerActionSerialize) at ./primitives/block.h:39
15.5                        y     0x00007f739284ae92 in CBlockHeader::SerializationOp<CAutoFile, CSerActionUnserialize>(CAutoFile&, CSerActionUnserialize) at ./primitives/block.h:39
15.6                        y     0x00007f7392861548 in CBlockHeader::SerializationOp<CAutoFile, CSerActionSerialize>(CAutoFile&, CSerActionSerialize) at ./primitives/block.h:39
15.7                        y     0x00007f73928626ba in CBlockHeader::SerializationOp<CBufferedFile, CSerActionUnserialize>(CBufferedFile&, CSerActionUnserialize) at ./primitives/block.h:39
15.8                        y     0x00007f7392b130ae in CBlockHeader::SerializationOp<CHashWriter, CSerActionSerialize>(CHashWriter&, CSerActionSerialize) at ./primitives/block.h:39

Breakpoint 15, CBlockHeader::SerializationOp<CHashWriter, CSerActionSerialize> (this=0x7f73680019d0, s=..., ser_action=...)
    at ./primitives/block.h:39
39	    inline void SerializationOp(Stream& s, Operation ser_action) {
The program being debugged stopped while in a function called from GDB.
Evaluation of the expression containing the function
(CBlockHeader::GetHash() const) will be abandoned.
When the function is done executing, GDB will silently stop.
40	        READWRITE(this->nVersion);
$111 = (CHashWriter &) @0x7f738b475210: {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x8e, 0xb3, 0xb8, 0x26, 0xf2, 0x85, 0xa1, 0x68, 0x5b, 0xcf, 0x28, 0x86, 0xc9, 0xf2, 0x94, 0x9a, 0x50, 0x37, 0x2f, 
        0xc2, 0xe, 0x9a, 0xb0, 0x41, 0xdd, 0x88, 0xc7, 0xfa, 0x82, 0xbd, 0xe4, 0xd4, 0x80, 0x0 <repeats 29 times>, 0x1, 0x0}, 
      bytes = 0x0, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x1117f
}
41	        READWRITE(hashPrevBlock);
$112 = (CHashWriter &) @0x7f738b475210: {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x0, 0x0, 0x0, 0x20, 0xf2, 0x85, 0xa1, 0x68, 0x5b, 0xcf, 0x28, 0x86, 0xc9, 0xf2, 0x94, 0x9a, 0x50, 0x37, 0x2f, 
        0xc2, 0xe, 0x9a, 0xb0, 0x41, 0xdd, 0x88, 0xc7, 0xfa, 0x82, 0xbd, 0xe4, 0xd4, 0x80, 0x0 <repeats 29 times>, 0x1, 0x0}, 
      bytes = 0x4, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x1117f
}
42	        READWRITE(hashMerkleRoot);
$113 = (CHashWriter &) @0x7f738b475210: {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x0, 0x0, 0x0, 0x20, 0xda, 0x57, 0x71, 0x91, 0x8c, 0x4d, 0xf2, 0xb0, 0xd9, 0xbd, 0x5c, 0x37, 0x99, 0xde, 0x8b, 
        0x9f, 0xe1, 0x4d, 0x4, 0x73, 0x54, 0xe, 0x13, 0x69, 0x2d, 0x53, 0x8, 0xc8, 0xc1, 0x9d, 0x8b, 0x2d, 
        0x0 <repeats 26 times>, 0x1, 0x0}, 
      bytes = 0x24, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x1117f
}
43	        READWRITE(nTime);
$114 = (CHashWriter &) @0x7f738b475210: {
  ctx = {
    sha = {
      s = {0xb8bad0c5, 0x43d7ae3b, 0x67a97e15, 0xd8f2f6f5, 0x2e524327, 0x61704ca5, 0xda2fbdf2, 0xe32138b8}, 
      buf = {0x28, 0x48, 0x6, 0xeb, 0xda, 0x57, 0x71, 0x91, 0x8c, 0x4d, 0xf2, 0xb0, 0xd9, 0xbd, 0x5c, 0x37, 0x99, 0xde, 0x8b, 
        0x9f, 0xe1, 0x4d, 0x4, 0x73, 0x54, 0xe, 0x13, 0x69, 0x2d, 0x53, 0x8, 0xc8, 0xc1, 0x9d, 0x8b, 0x2d, 0xda, 0x57, 0x2, 
        0xe, 0xd6, 0xee, 0x59, 0xed, 0x64, 0xe5, 0x52, 0xd2, 0x69, 0xf7, 0xb8, 0x94, 0x63, 0xd5, 0x27, 0x25, 0x14, 0x95, 0x65, 
        0xbc, 0x67, 0xb4, 0x55, 0xfe}, 
      bytes = 0x44, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x1117f
}
44	        READWRITE(nBits);
$115 = (CHashWriter &) @0x7f738b475210: {
  ctx = {
    sha = {
      s = {0xb8bad0c5, 0x43d7ae3b, 0x67a97e15, 0xd8f2f6f5, 0x2e524327, 0x61704ca5, 0xda2fbdf2, 0xe32138b8}, 
      buf = {0x28, 0x48, 0x6, 0xeb, 0x68, 0xfb, 0x9e, 0x5b, 0x8c, 0x4d, 0xf2, 0xb0, 0xd9, 0xbd, 0x5c, 0x37, 0x99, 0xde, 0x8b, 
        0x9f, 0xe1, 0x4d, 0x4, 0x73, 0x54, 0xe, 0x13, 0x69, 0x2d, 0x53, 0x8, 0xc8, 0xc1, 0x9d, 0x8b, 0x2d, 0xda, 0x57, 0x2, 
        0xe, 0xd6, 0xee, 0x59, 0xed, 0x64, 0xe5, 0x52, 0xd2, 0x69, 0xf7, 0xb8, 0x94, 0x63, 0xd5, 0x27, 0x25, 0x14, 0x95, 0x65, 
        0xbc, 0x67, 0xb4, 0x55, 0xfe}, 
      bytes = 0x48, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x1117f
}
45	        READWRITE(nNonce);
$116 = (CHashWriter &) @0x7f738b475210: {
  ctx = {
    sha = {
      s = {0xb8bad0c5, 0x43d7ae3b, 0x67a97e15, 0xd8f2f6f5, 0x2e524327, 0x61704ca5, 0xda2fbdf2, 0xe32138b8}, 
      buf = {0x28, 0x48, 0x6, 0xeb, 0x68, 0xfb, 0x9e, 0x5b, 0xff, 0xff, 0x7f, 0x20, 0xd9, 0xbd, 0x5c, 0x37, 0x99, 0xde, 0x8b, 
        0x9f, 0xe1, 0x4d, 0x4, 0x73, 0x54, 0xe, 0x13, 0x69, 0x2d, 0x53, 0x8, 0xc8, 0xc1, 0x9d, 0x8b, 0x2d, 0xda, 0x57, 0x2, 
        0xe, 0xd6, 0xee, 0x59, 0xed, 0x64, 0xe5, 0x52, 0xd2, 0x69, 0xf7, 0xb8, 0x94, 0x63, 0xd5, 0x27, 0x25, 0x14, 0x95, 0x65, 
        0xbc, 0x67, 0xb4, 0x55, 0xfe}, 
      bytes = 0x4c, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x1117f
}
46	    }
$117 = (CHashWriter &) @0x7f738b475210: {
  ctx = {
    sha = {
      s = {0xb8bad0c5, 0x43d7ae3b, 0x67a97e15, 0xd8f2f6f5, 0x2e524327, 0x61704ca5, 0xda2fbdf2, 0xe32138b8}, 
      buf = {0x28, 0x48, 0x6, 0xeb, 0x68, 0xfb, 0x9e, 0x5b, 0xff, 0xff, 0x7f, 0x20, 0x0, 0x0, 0x0, 0x0, 0x99, 0xde, 0x8b, 
        0x9f, 0xe1, 0x4d, 0x4, 0x73, 0x54, 0xe, 0x13, 0x69, 0x2d, 0x53, 0x8, 0xc8, 0xc1, 0x9d, 0x8b, 0x2d, 0xda, 0x57, 0x2, 
        0xe, 0xd6, 0xee, 0x59, 0xed, 0x64, 0xe5, 0x52, 0xd2, 0x69, 0xf7, 0xb8, 0x94, 0x63, 0xd5, 0x27, 0x25, 0x14, 0x95, 0x65, 
        0xbc, 0x67, 0xb4, 0x55, 0xfe}, 
      bytes = 0x50, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x1117f
}
No symbol "pblock" in current context.
Serialize<CHashWriter, CBlockHeader> (os=..., a=...) at ./serialize.h:562
562	}
CHashWriter::operator<< <CBlockHeader> (this=0x7f738b475210, obj=...) at ./hash.h:145
145	        return (*this);
146	    }
SerializeHash<CBlockHeader> (obj=..., nType=4, nVersion=70015) at ./hash.h:190
190	    return ss.GetHash();
191	}
CBlockHeader::GetHash (this=0x7f73680019d0) at primitives/block.cpp:16
16	}
$118 = {
  <base_blob<256u>> = {
    static WIDTH = 32, 
    data = "\332W\002\016\326\356Y\355d\345R\322i\367\270\224c\325'%\024\225e\274g\264U\376(H", <incomplete sequence \353>
  }, <No data fields>}
$119 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xda, 0x57, 0x2, 0xe, 0xd6, 0xee, 0x59, 0xed, 0x64, 0xe5, 0x52, 0xd2, 0x69, 0xf7, 0xb8, 0x94, 0x63, 0xd5, 0x27, 
      0x25, 0x14, 0x95, 0x65, 0xbc, 0x67, 0xb4, 0x55, 0xfe, 0x28, 0x48, 0x6, 0xeb}
  }, <No data fields>}
$120 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xda, 0x57, 0x71, 0x91, 0x8c, 0x4d, 0xf2, 0xb0, 0xd9, 0xbd, 0x5c, 0x37, 0x99, 0xde, 0x8b, 0x9f, 0xe1, 0x4d, 0x4, 
      0x73, 0x54, 0xe, 0x13, 0x69, 0x2d, 0x53, 0x8, 0xc8, 0xc1, 0x9d, 0x8b, 0x2d}
  }, <No data fields>}
