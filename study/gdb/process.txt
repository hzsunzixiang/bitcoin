

(gdb) p/x txData
$18 = std::vector of length 156, capacity 256 = {0x2, 0x0, 0x0, 0x0, 0x2, 0xab, 0x7, 0x11, 0x37, 0x39, 0xdb, 0x8a, 0x2a, 0x9a,
  0xd3, 0x5a, 0xfa, 0x24, 0x2b, 0xf9, 0x42, 0xf6, 0x65, 0x53, 0x75, 0xba, 0x8e, 0x32, 0x9, 0xa2, 0xa1, 0xa0, 0xa9, 0x95, 0xe0,
  0x6b, 0xbd, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xab, 0x7, 0x11, 0x37, 0x39, 0xdb, 0x8a, 0x2a, 0x9a, 0xd3,
  0x5a, 0xfa, 0x24, 0x2b, 0xf9, 0x42, 0xf6, 0x65, 0x53, 0x75, 0xba, 0x8e, 0x32, 0x9, 0xa2, 0xa1, 0xa0, 0xa9, 0x95, 0xe0, 0x6b,
  0xbd, 0x1, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x2, 0x80, 0x88, 0x95, 0xed, 0x0, 0x0, 0x0, 0x0, 0x17, 0xa9, 0x14,
  0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 0xc8, 0x87,
  0xc0, 0xa2, 0x42, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x17, 0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48,
  0xbf, 0x9, 0xe4, 0xa0, 0x9f, 0x4a, 0x4a, 0xc7, 0xb7, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0}
# 跟原始数据一模一样
0200000002ab07113739db8a2a9ad35afa242bf942f6655375ba8e3209a2a1a0a995e06bbd0000000000ffffffffab07113739db8a2a9ad35afa242bf942f6655375ba8e3209a2a1a0a995e06bbd0100000000ffffffff02808895ed0000000017a914077a414c3d707eaff2718369bad42b26878279c887c0a2423c0000000017a91462983ea52b359d304548bf09e4a09f4a4ac7b7008700000000
(gdb) p hex_tx
$19 = "0200000002ab07113739db8a2a9ad35afa242bf942f6655375ba8e3209a2a1a0a995e06bbd0000000000ffffffffab07113739db8a2a9ad35afa242bf942f6655375ba8e3209a2a1a0a995e06bbd0100000000ffffffff02808895ed0000000017a914077a414c3d707eaff2718369bad42b26878279c887c0a2423c0000000017a91462983ea52b359d304548bf09e4a09f4a4ac7b7008700000000"


(gdb) n
96                  if (!tx.vin[i].scriptSig.HasValidOps() || tx.vin[i].scriptSig.size() > MAX_SCRIPT_SIZE) {
(gdb) p MAX_SCRIPT_SIZE
$9 = 10000


(gdb) ptype  mtx
type = struct CMutableTransaction {
    std::vector<CTxIn> vin;
    std::vector<CTxOut> vout;
    int32_t nVersion;
    uint32_t nLockTime;
  public:
    CMutableTransaction(void);
    CMutableTransaction(const CTransaction &);
    uint256 GetHash(void) const;
    bool HasWitness(void) const;
} &
(gdb) p mtx.nVersion
$24 = 2
(gdb) p/x mtx.nVersion
$25 = 0x2
(gdb) p/x mtx.nLockTime
$26 = 0x0


(gdb) p/x mtx
$35 = (CMutableTransaction &) @0x7fc563ca4180: { (这是vin 开始) vin = std::vector of length 2, capacity 2 = { (第一个vin){prevout = {
        hash = {<base_blob<256u>> = {static WIDTH = 0x20, data = {0xab, 0x7, 0x11, 0x37, 0x39, 0xdb, 0x8a, 0x2a, 0x9a, 0xd3,
              0x5a, 0xfa, 0x24, 0x2b, 0xf9, 0x42, 0xf6, 0x65, 0x53, 0x75, 0xba, 0x8e, 0x32, 0x9, 0xa2, 0xa1, 0xa0, 0xa9, 0x95,
              0xe0, 0x6b, 0xbd}}, <No data fields>}, n = 0x0},
      # scriptSig 此时为空
      scriptSig = {<prevector<28u, unsigned char, unsigned int, int>> = {_size = 0x0, _union = {direct = {
              0x0 <repeats 28 times>}, {capacity = 0x0, indirect = 0x0}}}, <No data fields>}, nSequence = 0xffffffff,
      # scriptWitness 也为空
      scriptWitness = {stack = std::vector of length 0, capacity 0}, static SEQUENCE_FINAL = 0xffffffff,
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000,
      static SEQUENCE_LOCKTIME_MASK = 0xffff, static SEQUENCE_LOCKTIME_GRANULARITY = 0x9}, (第二个 vin) {prevout = {
        hash = {<base_blob<256u>> = {static WIDTH = 0x20, data = {0xab, 0x7, 0x11, 0x37, 0x39, 0xdb, 0x8a, 0x2a, 0x9a, 0xd3,
              0x5a, 0xfa, 0x24, 0x2b, 0xf9, 0x42, 0xf6, 0x65, 0x53, 0x75, 0xba, 0x8e, 0x32, 0x9, 0xa2, 0xa1, 0xa0, 0xa9, 0x95,
              0xe0, 0x6b, 0xbd}}, <No data fields>}, n = 0x1},
      scriptSig = {<prevector<28u, unsigned char, unsigned int, int>> = {_size = 0x0, _union = {direct = {
              0x0 <repeats 28 times>}, {capacity = 0x0, indirect = 0x0}}}, <No data fields>}, nSequence = 0xffffffff,
      scriptWitness = {stack = std::vector of length 0, capacity 0}, static SEQUENCE_FINAL = 0xffffffff,
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000,
      static SEQUENCE_LOCKTIME_MASK = 0xffff, static SEQUENCE_LOCKTIME_GRANULARITY = 0x9}} (vin结束),
  # 开始vout
  vout = std::vector of length 2, capacity 2 = {(第一个 vout){nValue = 0xed958880 (金额),
      scriptPubKey = {<prevector<28u, unsigned char, unsigned int, int>> = {_size = 0x17(scriptPubKey的长度), _union = {direct = {0xa9, 0x14, 0x7,
              0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79,
              0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, {capacity = 0x7a0714a9,
              indirect = 0x71f2af7e703d4c41}}}, <No data fields>}}, (第二个 vout){nValue = 0x3c42a2c0,
      scriptPubKey = {<prevector<28u, unsigned char, unsigned int, int>> = {_size = 0x17, _union = {direct = {0xa9, 0x14,
              0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 0x4a, 0x4a, 0xc7, 0xb7,
              0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, {capacity = 0x986214a9,
              indirect = 0x4845309d352ba53e}}}, <No data fields>}}}, nVersion = 0x2, nLockTime = 0x0}





(gdb) p txin
$39 = (CTxIn &) @0x7fc538002130: {prevout = {hash = {<base_blob<256u>> = {static WIDTH = 32,
        data = "\253\a\021\067\071ۊ*\232\323Z\372$+\371B\366eSu\272\216\062\t\242\241\240\251\225\340k\275"}, <No data fields>}, n = 0}, scriptSig = {<prevector<28u, unsigned char, unsigned int, int>> = {_size = 23, _union = {
        direct = "\026\000\024h/\225\037G<C\177D\211\257\002n[\373\035\036\322*\243\000\000\000\000", {capacity = 1746141206,
          indirect = 0x447f433c471f952f <error: Cannot access memory at address 0x447f433c471f952f>}}}, <No data fields>},
  nSequence = 4294967295, scriptWitness = {stack = std::vector of length 2, capacity 2 = {
      std::vector of length 71, capacity 71 = {48 '0', 68 'D', 2 '\002', 32 ' ', 62 '>', 33 '!', 196 '\304', 110 'n', 112 'p',
        39 '\'', 121 'y', 190 '\276', 135 '\207', 14 '\016', 132 '\204', 125 '}', 166 '\246', 13 '\r', 165 '\245', 35 '#',
        162 '\242', 247 '\367', 219 '\333', 189 '\275', 192 '\300', 247 '\367', 49 '1', 85 'U', 144 '\220', 123 '{',
        245 '\365', 150 '\226', 190 '\276', 118 'v', 173 '\255', 70 'F', 2 '\002', 32 ' ', 76 'L', 208 '\320', 235 '\353',
        21 '\025', 43 '+', 229 '\345', 144 '\220', 79 'O', 18 '\022', 50 '2', 229 '\345', 178 '\262', 42 '*', 7 '\a',
        29 '\035', 100 'd', 189 '\275', 212 '\324', 187 '\273', 25 '\031', 87 'W', 46 '.', 3 '\003', 198 '\306', 170 '\252',
        171 '\253', 103 'g', 248 '\370', 222 '\336', 179 '\263', 81 'Q', 6 '\006', 1 '\001'},
      std::vector of length 33, capacity 33 = {2 '\002', 185 '\271', 199 '\307', 7 '\a', 125 '}', 170 '\252', 165 '\245',
        90 'Z', 207 '\317', 0 '\000', 4 '\004', 139 '\213', 202 '\312', 60 '<', 93 ']', 4 '\004', 208 '\320', 83 'S',
        165 '\245', 164 '\244', 228 '\344', 140 '\214', 50 '2', 200 '\310', 142 '\216', 103 'g', 118 'v', 204 '\314',
        194 '\302', 117 'u', 201 '\311', 77 'M', 175 '\257'}}}, static SEQUENCE_FINAL = 4294967295,
  static SEQUENCE_LOCKTIME_DISABLE_FLAG = 2147483648, static SEQUENCE_LOCKTIME_TYPE_FLAG = 4194304,
  static SEQUENCE_LOCKTIME_MASK = 65535, static SEQUENCE_LOCKTIME_GRANULARITY = 9}
(gdb) n
823             const Coin& coin = view.AccessCoin(txin.prevout);
(gdb) p txin
$40 = (CTxIn &) @0x7fc538002190: {prevout = {hash = {<base_blob<256u>> = {static WIDTH = 32,
        data = "\253\a\021\067\071ۊ*\232\323Z\372$+\371B\366eSu\272\216\062\t\242\241\240\251\225\340k\275"}, <No data fields>}, n = 1}, scriptSig = {<prevector<28u, unsigned char, unsigned int, int>> = {_size = 0, _union = {
        direct = '\000' <repeats 27 times>, {capacity = 0, indirect = 0x0}}}, <No data fields>}, nSequence = 4294967295,
  scriptWitness = {stack = std::vector of length 0, capacity 0}, static SEQUENCE_FINAL = 4294967295,
  static SEQUENCE_LOCKTIME_DISABLE_FLAG = 2147483648, static SEQUENCE_LOCKTIME_TYPE_FLAG = 4194304,
  static SEQUENCE_LOCKTIME_MASK = 65535, static SEQUENCE_LOCKTIME_GRANULARITY = 9}




# 此时 签名已经算出来了
# 所以计算签名就是在此函数中计算的
(gdb) break VerifyScript                                                                                            
Breakpoint 22 at 0x7fc56ab4a82c: file script/interpreter.cpp, line 1412.                                                   
(gdb) p/x fromPubKey                                                                       
$48 = (const CScript &) @0x7fc538000bd8: {<prevector<28u, unsigned char, unsigned int, int>> = {_size = 0x17, _union = {
      direct = {0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 0x4a,
        0x4a, 0xc7, 0xb7, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, {capacity = 0x986214a9,                                       
        indirect = 0x4845309d352ba53e}}}, <No data fields>}                                                                

(gdb) p/x sigdata.scriptWitness
$50 = {stack = std::vector of length 2, capacity 2 = {std::vector of length 72, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0,
      0x9e, 0x68, 0x18, 0x30, 0xa1, 0x16, 0x9d, 0x6e, 0x3e, 0x83, 0xa6, 0xa8, 0xe5, 0xdc, 0xfb, 0xd9, 0xe7, 0x24, 0x9a, 0x55,
      0x1b, 0x23, 0x25, 0x8d, 0x25, 0xc6, 0xbf, 0xe7, 0x66, 0x4b, 0x1d, 0xac, 0x2, 0x20, 0x17, 0x1, 0xa6, 0xf6, 0x4a, 0x37,
      0x9e, 0x3c, 0x8b, 0xc2, 0xcc, 0x9a, 0x23, 0x1c, 0xd7, 0x25, 0x60, 0x41, 0x4b, 0xbd, 0xf6, 0x9e, 0x2b, 0xe5, 0x6, 0xfe,
      0xea, 0x3e, 0xb2, 0xa7, 0xee, 0xaf, 0x1}, std::vector of length 33, capacity 33 = {0x2, 0xa6, 0x5d, 0xb2, 0xe2, 0x80,
      0xe4, 0xf, 0x8e, 0x54, 0x61, 0x46, 0xd1, 0xf8, 0x63, 0xaa, 0x74, 0xf1, 0x8e, 0xd5, 0x77, 0xb5, 0xce, 0xa3, 0x30, 0xc3,
      0x97, 0x12, 0xe5, 0x6, 0x4, 0x8, 0x79}}}




计算hash txid
(gdb) bt                                                                                                                        #0  CTransaction::ComputeHash (this=0x7fc6540008d0) at primitives/transaction.cpp:67       
#1  0x00007fc67eeefc57 in CTransaction::CTransaction(CMutableTransaction&&) (this=0x7fc6540008d0,                                   tx=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x1dbeb83, DIE 0x1dcd538>) at primitives/transaction.cpp:81
#2  0x00007fc67eb28a3b in __gnu_cxx::new_allocator<CTransaction>::construct<CTransaction const, CMutableTransaction>(CTransactio
n const*, CMutableTransaction&&) (this=0x7fc678853097, __p=0x7fc6540008d0,                                                          __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x74d6ef, DIE 0x7c4589>)                            
    at /usr/include/c++/6/ext/new_allocator.h:120
#3  0x00007fc67eb27c6a in std::allocator_traits<std::allocator<CTransaction> >::construct<CTransaction const, CMutableTransaction>(std::allocator<CTransaction>&, CTransaction const*, CMutableTransaction&&) (__a=..., __p=0x7fc6540008d0,
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x74d6ef, DIE 0x7c4589>)
    at /usr/include/c++/6/bits/alloc_traits.h:475




(gdb) p/x ss
$17 = {ctx = {sha = {s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19},
      buf = {0xc0, 0x2e, 0x85, 0x78, 0xc6, 0x7f, 0x0, 0x0, 0xe6, 0xd6, 0xb8, 0x7e, 0xc6, 0x7f, 0x0, 0x0, 0x18, 0x33, 0x85,
        0x78, 0xc6, 0x7f, 0x0, 0x0, 0xb8, 0xe, 0x0, 0x54, 0xc6, 0x7f, 0x0, 0x0, 0x32, 0x10, 0x0, 0x54, 0xc6, 0x7f, 0x0, 0x0,
        0x0, 0xba, 0xf3, 0xa6, 0xba, 0x30, 0x1, 0xa5, 0xf0, 0x2e, 0x85, 0x78, 0xc6, 0x7f, 0x0, 0x0, 0xa8, 0xa, 0xef, 0x7e,
        0xc6, 0x7f, 0x0, 0x0}, bytes = 0x0, static OUTPUT_SIZE = 0x20}, static OUTPUT_SIZE = 0x20}, nType = 0x4,
  nVersion = 0x40000000}




(gdb) n
137             ctx.Finalize((unsigned char*)&result);
(gdb) n
138             return result;
(gdb) p/x result
$21 = {<base_blob<256u>> = {static WIDTH = 0x20, data = {0xf3, 0xc8, 0x22, 0xd2, 0xe1, 0x95, 0x9d, 0xe8, 0x84, 0xe3, 0x44,
      0xcc, 0x49, 0xae, 0xc3, 0xa3, 0xb8, 0x53, 0xe4, 0x20, 0xc4, 0x7e, 0xa7, 0xa8, 0xbd, 0xbc, 0xe5, 0x3c, 0x4d, 0xbc, 0x16,
      0x2a}}, <No data fields>}

上面就得到了hash值了



#0  CHashWriter::operator<< <int> (this=0x7fc6798551e0, obj=@0x7fc679855080: 0) at ./hash.h:142
#1  0x00007fc67ecc542e in CAddrMan::Serialize<CHashWriter> (this=0x7fc681059e10, s=...) at ./addrman.h:355
#2  0x00007fc67ecc39a4 in Serialize<CHashWriter, CAddrMan> (os=..., a=...) at ./serialize.h:561
#3  0x00007fc67ecc32b8 in CHashWriter::operator<< <CAddrMan> (this=0x7fc6798551e0, obj=...) at ./hash.h:144
#4  0x00007fc67ecc25fe in (anonymous namespace)::SerializeDB<CAutoFile, CAddrMan> (stream=..., data=...) at addrdb.cpp:26
#5  0x00007fc67ecc1cab in (anonymous namespace)::SerializeFileDB<CAddrMan> (prefix="peers", path=..., data=...)
    at addrdb.cpp:51
#6  0x00007fc67ecc169e in CAddrDB::Write (this=0x7fc679855440, addr=...) at addrdb.cpp:129
#7  0x00007fc67e999489 in CConnman::DumpAddresses (this=0x7fc681059cf0) at net.cpp:1674
#8  0x00007fc67e9997ad in CConnman::DumpData (this=0x7fc681059cf0) at net.cpp:1682
#9  0x00007fc67e9ee40f in std::__invoke_impl<void, void (CConnman::* const&)(), CConnman*&> (
    __f=@0x7fc670000ce0: (void (CConnman::*)(CConnman * const)) 0x7fc67e999786 <CConnman::DumpData()>,
    __t=@0x7fc670000cf0: 0x7fc681059cf0) at /usr/include/c++/6/functional:227
#10 0x00007fc67e9e8c4d in std::__invoke<void (CConnman::* const&)(), CConnman*&> (
    __fn=@0x7fc670000ce0: (void (CConnman::*)(CConnman * const)) 0x7fc67e999786 <CConnman::DumpData()>,
    __args#0=@0x7fc670000cf0: 0x7fc681059cf0) at /usr/include/c++/6/functional:251
#11 0x00007fc67e9e1c3b in std::_Mem_fn_base<void (CConnman::*)(), true>::operator()<CConnman*&> (this=0x7fc670000ce0,
    __args#0=@0x7fc670000cf0: 0x7fc681059cf0) at /usr/include/c++/6/functional:604
#12 0x00007fc67e9d8dea in std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::__call<void, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) (this=0x7fc670000ce0,
