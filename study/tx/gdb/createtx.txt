Breakpoint 1 at 0x7ffb1f1daa1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7ffb1f1b249e: file rpc/rawtransaction.cpp, line 320.
Currently logging to "createtx.txt".
Logs will be appended to the log file.
Output is being logged and displayed.
Continuing.
[Switching to Thread 0x7ffb18efa700 (LWP 553)]

Breakpoint 1, CRPCTable::execute (this=0x7ffb1fba3fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, createrawtransaction (request=...) at rpc/rawtransaction.cpp:320
320	{
321	    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {
367	    RPCTypeCheck(request.params, {
373	    );
367	    RPCTypeCheck(request.params, {
No symbol "re" in current context.
No symbol "re" in current context.
No symbol "re" in current context.
No symbol "re" in current context.
No symbol "re" in current context.
$1 = (const JSONRPCRequest &) @0x7ffb18ef9b90: {id = {typ = 0x4, val = "1", keys = std::vector of length 0, capacity 0, 
    values = std::vector of length 0, capacity 0}, strMethod = "createrawtransaction", params = {typ = 0x2, val = "", 
    keys = std::vector of length 0, capacity 0, values = std::vector of length 2, capacity 2 = {{typ = 0x2, val = "", 
        keys = std::vector of length 0, capacity 0, values = std::vector of length 1, capacity 1 = {{typ = 0x1, val = "", 
            keys = std::vector of length 2, capacity 2 = {"txid", "vout"}, values = std::vector of length 2, capacity 2 = {{
                typ = 0x3, val = "45a88f2a2f7b215f8014af127bd9bb29ee524ea95ada7f90854e36b22c8bcd00", 
                keys = std::vector of length 0, capacity 0, values = std::vector of length 0, capacity 0}, {typ = 0x4, 
                val = "0", keys = std::vector of length 0, capacity 0, values = std::vector of length 0, capacity 0}}}}}, {
        typ = 0x1, val = "", keys = std::vector of length 2, capacity 2 = {"2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", 
          "2N2EYbEMbZyr1zy7GAghRKSDo4EXpFYRvQM"}, values = std::vector of length 2, capacity 2 = {{typ = 0x4, val = "21.49", 
            keys = std::vector of length 0, capacity 0, values = std::vector of length 0, capacity 0}, {typ = 0x4, 
            val = "28.5", keys = std::vector of length 0, capacity 0, values = std::vector of length 0, capacity 0}}}}}, 
  fHelp = 0x0, URI = "/", authUser = ""}
$2 = (const JSONRPCRequest &) @0x7ffb18ef9b90: {
  id = {
    typ = 0x4, 
    val = "1", 
    keys = std::vector of length 0, capacity 0, 
    values = std::vector of length 0, capacity 0
  }, 
  strMethod = "createrawtransaction", 
  params = {
    typ = 0x2, 
    val = "", 
    keys = std::vector of length 0, capacity 0, 
    values = std::vector of length 2, capacity 2 = {{
        typ = 0x2, 
        val = "", 
        keys = std::vector of length 0, capacity 0, 
        values = std::vector of length 1, capacity 1 = {{
            typ = 0x1, 
            val = "", 
            keys = std::vector of length 2, capacity 2 = {"txid", "vout"}, 
            values = std::vector of length 2, capacity 2 = {{
                typ = 0x3, 
                val = "45a88f2a2f7b215f8014af127bd9bb29ee524ea95ada7f90854e36b22c8bcd00", 
                keys = std::vector of length 0, capacity 0, 
                values = std::vector of length 0, capacity 0
              }, {
                typ = 0x4, 
                val = "0", 
                keys = std::vector of length 0, capacity 0, 
                values = std::vector of length 0, capacity 0
              }}
          }}
      }, {
        typ = 0x1, 
        val = "", 
        keys = std::vector of length 2, capacity 2 = {"2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", 
          "2N2EYbEMbZyr1zy7GAghRKSDo4EXpFYRvQM"}, 
        values = std::vector of length 2, capacity 2 = {{
            typ = 0x4, 
            val = "21.49", 
            keys = std::vector of length 0, capacity 0, 
            values = std::vector of length 0, capacity 0
          }, {
            typ = 0x4, 
            val = "28.5", 
            keys = std::vector of length 0, capacity 0, 
            values = std::vector of length 0, capacity 0
          }}
      }}
  }, 
  fHelp = 0x0, 
  URI = "/", 
  authUser = ""
}
376	    if (request.params[0].isNull() || request.params[1].isNull())
380	    UniValue inputs = request.params[0].get_array();
381	    const bool outputs_is_obj = request.params[1].isObject();
384	                           request.params[1].get_array();
383	                           request.params[1].get_obj() :
384	                           request.params[1].get_array();
387	    CMutableTransaction rawTx;
390	    if (!request.params[2].isNull()) {
398	    bool rbfOptIn = request.params[3].isTrue();
401	    for (unsigned int idx = 0; idx < inputs.size(); idx++) {
402	        const UniValue& input = inputs[idx];
$3 = "input:------"
$4 = (const UniValue &) @0x7ffb18ef9120: {
  typ = 0x18ef9160, 
  val = '\000' <repeats 48 times>, "\300\000\000\000\000\000\000\000U\000\000\000\000\000\000\000\260\f\000\360\372\177\000\000\004\000\000\000\000\000\000\000txid\000f127bd9bb29\320\f\000\360\372\177\000\000\004\000\000\000\000\000\000\000vout\000\066b22c8bcd00\000\016\000\360\372\177\000\000U\000\000\000\000\000\000\000`\r\000\360\372\177\000\000#\000\000\000\000\000\000\000#", '\000' <repeats 15 times>, "P\025\000\360\372\177\000\000#\000\000\000\000\000\000\000#\000\000\000\000\000\000\000"..., 
  keys = std::vector of length -4397391670477, capacity -4397391670477 = {
    <error: Cannot access memory at address 0x334864f8458b4890>, <error: Cannot access memory at address 0x48e0758948e87d89>, 
    "", <error: Cannot access memory at address 0xfb713ce805740000>, "", "", 
    <error: Cannot access memory at address 0x2504334864f8458b>, "", 
    <error: Cannot access memory at address 0xcae8c78948d68948>, "", 
    <error: Cannot access memory at address 0xe8458b48e04d8b48>, <error: Cannot access memory at address 0xfffb703de8057400>, 
    "", <error: Cannot access memory at address 0x2504334864f8458b>, "", 
    <error: Cannot access memory at address 0x282504334864f8>, "", 
    <error: Cannot access memory at address 0x48e0458b485674e0>, "", "", 
    <error: Cannot access memory at address 0x7400000028250433>, "", "", "", 
    <error: Cannot access memory at address 0x282514334864f855>, <error: Cannot access memory at address 0x2825048b4864987d>, 
    <error: Cannot access memory at address 0x63f905158d48a0>, <error: Cannot access memory at address 0xc7894898458b48ff>, 
    <error: Cannot access memory at address 0xff0294e8c7894800>, <error: Cannot access memory at address 0x98458b48ffff2463>, 
    "", "", <error: Cannot access memory at address 0x4820ec8348e58948>, 
    <error: Cannot access memory at address 0x4864f8558b480840>, "", 
    <error: Cannot access memory at address 0x4890108948e8458b>, "", "", "", "", 
    <error: Cannot access memory at address 0x48e8458b48c031f8>, "", 
    <error: Cannot access memory at address 0xf8558b48ffffffa4>, <error: Cannot access memory at address 0x4864e87d894820ec>, 
    <error: Cannot access memory at address 0x334864f8558b48ff>, <error: Cannot access memory at address 0x25048b4864e87d89>, 
    <error: Cannot access memory at address 0x282514334864f855>, "", "", 
    <error: Cannot access memory at address 0x48b4864d0758948>, "", "", 
    <error: Cannot access memory at address 0x48e8458b48c031f8>, "", 
    <error: Cannot access memory at address 0xf8558b48ffffffa4>, <error: Cannot access memory at address 0x4864e87d894820ec>, 
    <error: Cannot access memory at address 0x334864f8558b48ff>, <error: Cannot access memory at address 0x25048b4864e87d89>, 
    <error: Cannot access memory at address 0x282514334864f855>, "", "", 
    <error: Cannot access memory at address 0x25048b4864e07589>, <error: Cannot access memory at address 0x2504334864f8458b>, 
    "", <error: Cannot access memory at address 0x2bfba00644b>, <error: Cannot access memory at address 0x4864f8558b48008b>, 
    <error: Cannot access memory at address 0x8b4864e87d894820>, <error: Cannot access memory at address 0x458b4890fffb9c79>, 
    <error: Cannot access memory at address 0x48e87d894820ec83>, <error: Cannot access memory at address 0x8b4890108948e055>, 
    <error: Cannot access memory at address 0xe87d894820ec8348>, "", "", "", 
    <error: Cannot access memory at address 0x25048b4864e07589>, <error: Cannot access memory at address 0x282504334864f845>, 
    <error: Cannot access memory at address 0xfffffe08bd894800>, <error: Cannot access memory at address 0x4589480000002825>, 
    "", "", <error: Cannot access memory at address 0xb0b58d482074c084>, 
    <error: Cannot access memory at address 0x8958b48000090af>, "", "", "", "", "", "", 
    <error: Cannot access memory at address 0xb0958d48c6894800>, "", "", 
    <error: Cannot access memory at address 0xb0958d48c6894800>, <error: Cannot access memory at address 0x48fffffe20858d48>, 
    "", "", "", <error: Cannot access memory at address 0x48fffffe20858d48>, "", "", "", "", 
    <error: Cannot access memory at address 0x31f8458948000000>, <error: Cannot access memory at address 0xc8458b48c04d8b48>, 
    <error: Cannot access memory at address 0xfffb64bde8057400>, <error: Cannot access memory at address 0x458b48c031f84589>, 
    <error: Cannot access memory at address 0x4820ec8348e58948>, <error: Cannot access memory at address 0x8b48ffffffa4e8c7>, 
    <error: Cannot access memory at address 0xe87d894820ec8348>, <error: Cannot access memory at address 0x64f8558b48ffffff>, 
    <error: Cannot access memory at address 0x8b4864e87d894820>, <error: Cannot access memory at address 0x14334864f8558b48>, 
    <error: Cannot access memory at address 0x25048b4864e87d89>, <error: Cannot access memory at address 0x282514334864f855>, 
    "", <error: Cannot access memory at address 0x2279e8c78948e845>, 
    <error: Cannot access memory at address 0xec8348e5894855c3>, "", 
    <error: Cannot access memory at address 0xfffb62fde8057400>, "", 
    <error: Cannot access memory at address 0x282504334864f845>, <error: Cannot access memory at address 0x2825048b4864>, "", 
    "", "", "", <error: Cannot access memory at address 0x48e5894855c3c9ff>, "", 
    <error: Cannot access memory at address 0xec8348e589485590>, "", "", "", "", 
    <error: Cannot access memory at address 0x2825048b4864>, "", "", "", "", 
    <error: Cannot access memory at address 0x48e5894855c3c9ff>, "", 
    <error: Cannot access memory at address 0xec8348e589485590>, <error: Cannot access memory at address 0xffffff9be8c78948>, 
    <error: Cannot access memory at address 0xec8348e5894855c3>, "", "", "", 
    <error: Cannot access memory at address 0xf8558b48e8458b48>, <error: Cannot access memory at address 0x8948e87d894820ec>, 
    "", "", "", "", <error: Cannot access memory at address 0xe5894855c3c9fffb>, "", 
    <error: Cannot access memory at address 0x458b48108b48ffff>, <error: Cannot access memory at address 0x64f8458b48901089>, 
    <error: Cannot access memory at address 0x758948a87d894870>, "", "", "", 
    <error: Cannot access memory at address 0xe8c78948e8458b48>, "", 
    <error: Cannot access memory at address 0x48e8458b48c031f8>, <error: Cannot access memory at address 0x7d894820ec8348e5>, 
    <error: Cannot access memory at address 0xffffffa0e8c78948>, "", "", 
    <error: Cannot access memory at address 0x480000002825048b>, <error: Cannot access memory at address 0x55c3c9fffb5cc0e8>, 
    "", <error: Cannot access memory at address 0xe5894855c3c9fffb>, 
<error: Cannot access memory at address 0x9ce8c78948e8458b>Quit
403	        const UniValue& o = input.get_obj();
$5 = (const UniValue &) @0x7ffaf00009d0: {
  typ = UniValue::VOBJ, 
  val = "", 
  keys = std::vector of length 2, capacity 2 = {"txid", "vout"}, 
  values = std::vector of length 2, capacity 2 = {{
      typ = UniValue::VSTR, 
      val = "45a88f2a2f7b215f8014af127bd9bb29ee524ea95ada7f90854e36b22c8bcd00", 
      keys = std::vector of length 0, capacity 0, 
      values = std::vector of length 0, capacity 0
    }, {
      typ = UniValue::VNUM, 
      val = "0", 
      keys = std::vector of length 0, capacity 0, 
      values = std::vector of length 0, capacity 0
    }}
}
406	        uint256 txid = ParseHashO(o, "txid");
409	        const UniValue& vout_v = find_value(o, "vout");
410	        if (!vout_v.isNum())
412	        int nOutput = vout_v.get_int();
413	        if (nOutput < 0)
417	        if (rbfOptIn) {
419	        } else if (rawTx.nLockTime) {
423	            nSequence = std::numeric_limits<uint32_t>::max();
427	        const UniValue& sequenceObj = find_value(o, "sequence");
428	        if (sequenceObj.isNum()) {
438	        CTxIn in(COutPoint(txid, nOutput), CScript(), nSequence);
440	        rawTx.vin.push_back(in);
$6 = (const UniValue &) @0x7ffaf00009d0: {
  typ = <error reading variable>, 
  val = "", 
  keys = std::vector of length 2, capacity 2 = {"txid", "vout"}, 
  values = std::vector of length 2, capacity 2 = {{
      typ = <error reading variable>, 
      val = "45a88f2a2f7b215f8014af127bd9bb29ee524ea95ada7f90854e36b22c8bcd00", 
      keys = std::vector of length 0, capacity 0, 
      values = std::vector of length 0, capacity 0
    }, {
      typ = <error reading variable>, 
      val = "0", 
      keys = std::vector of length 0, capacity 0, 
      values = std::vector of length 0, capacity 0
    }}
}
438	        CTxIn in(COutPoint(txid, nOutput), CScript(), nSequence);
401	    for (unsigned int idx = 0; idx < inputs.size(); idx++) {
No symbol "in" in current context.
443	    std::set<CTxDestination> destinations;
444	    if (!outputs_is_obj) {
460	    for (const std::string& name_ : outputs.getKeys()) {
461	        if (name_ == "data") {
469	            CTxDestination destination = DecodeDestination(name_);
$7 = "2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ"
Bad format string, missing '"'.
$8 = "name_"
$9 = "2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ"
Breakpoint 3 at 0x7ffb1f5277ab: file key_io.cpp, line 216.
Breakpoint 4 at 0x7ffb1f526788: file key_io.cpp, line 73.
Continuing.

Breakpoint 3, DecodeDestination (str="2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ") at key_io.cpp:216
216	{
217	    return DecodeDestination(str, Params());

Breakpoint 4, (anonymous namespace)::DecodeDestination (str="2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", params=...) at key_io.cpp:74
74	{
75	    std::vector<unsigned char> data;
Breakpoint 5 at 0x7ffb1f55dec9: DecodeBase58Check. (2 locations)
76	    uint160 hash;
77	    if (DecodeBase58Check(str, data)) {
$10 = "2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ"

Breakpoint 5, DecodeBase58Check (str="2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", vchRet=std::vector of length 0, capacity 0)
    at base58.cpp:149
149	{
150	    return DecodeBase58Check(str.c_str(), vchRet);

Breakpoint 5, DecodeBase58Check (psz=0x7ffaf0000ea0 "2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", 
    vchRet=std::vector of length 0, capacity 0) at base58.cpp:126
126	{
127	    if (!DecodeBase58(psz, vchRet) ||
128	        (vchRet.size() < 4)) {
$11 = 0x7ffaf0000ea0
$12 = 0x32
$13 = 0x7ffaf0000ea0 "2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ"
127	    if (!DecodeBase58(psz, vchRet) ||
139	    uint256 hash = Hash(vchRet.begin(), vchRet.end() - 4);
$14 = std::vector of length 25, capacity 25 = {196 '\304', 7 '\a', 122 'z', 65 'A', 76 'L', 61 '=', 112 'p', 126 '~', 
  175 '\257', 242 '\362', 113 'q', 131 '\203', 105 'i', 186 '\272', 212 '\324', 43 '+', 38 '&', 135 '\207', 130 '\202', 
  121 'y', 200 '\310', 167 '\247', 108 'l', 104 'h', 151 '\227'}
$15 = std::vector of length 25, capacity 25 = {0xc4, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 
  0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 0xc8, 0xa7, 0x6c, 0x68, 0x97}
#0  DecodeBase58Check (psz=0x7ffaf0000ea0 "2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", 
    vchRet=std::vector of length 25, capacity 25 = {...}) at base58.cpp:139
139	    uint256 hash = Hash(vchRet.begin(), vchRet.end() - 4);
140	    if (memcmp(&hash, &vchRet[vchRet.size() - 4], 4) != 0) {
$16 = {
  <base_blob<256u>> = {
    static WIDTH = 32, 
    data = "\247lh\227T\367\226*\234\312\331N~R\312D\317\061\345w\307:\266)5\240\261B\023\362\245", <incomplete sequence \315>
  }, <No data fields>}
$17 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xa7, 0x6c, 0x68, 0x97, 0x54, 0xf7, 0x96, 0x2a, 0x9c, 0xca, 0xd9, 0x4e, 0x7e, 0x52, 0xca, 0x44, 0xcf, 0x31, 0xe5, 
      0x77, 0xc7, 0x3a, 0xb6, 0x29, 0x35, 0xa0, 0xb1, 0x42, 0x13, 0xf2, 0xa5, 0xcd}
  }, <No data fields>}
144	    vchRet.resize(vchRet.size() - 4);
145	    return true;
$18 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xa7, 0x6c, 0x68, 0x97, 0x54, 0xf7, 0x96, 0x2a, 0x9c, 0xca, 0xd9, 0x4e, 0x7e, 0x52, 0xca, 0x44, 0xcf, 0x31, 0xe5, 
      0x77, 0xc7, 0x3a, 0xb6, 0x29, 0x35, 0xa0, 0xb1, 0x42, 0x13, 0xf2, 0xa5, 0xcd}
  }, <No data fields>}
$19 = std::vector of length 21, capacity 25 = {0xc4, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 
  0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 0xc8}
146	}
DecodeBase58Check (str="2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", vchRet=std::vector of length 21, capacity 25 = {...})
    at base58.cpp:151
151	}
$20 = std::vector of length 21, capacity 25 = {196 '\304', 7 '\a', 122 'z', 65 'A', 76 'L', 61 '=', 112 'p', 126 '~', 
  175 '\257', 242 '\362', 113 'q', 131 '\203', 105 'i', 186 '\272', 212 '\324', 43 '+', 38 '&', 135 '\207', 130 '\202', 
  121 'y', 200 '\310'}
$21 = std::vector of length 21, capacity 25 = {0xc4, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 
  0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 0xc8}
(anonymous namespace)::DecodeDestination (str="2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", params=...) at key_io.cpp:81
81	        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);
82	        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {
$22 = std::vector of length 21, capacity 25 = {0xc4, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 
  0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 0xc8}
$23 = 0x6f
#0  (anonymous namespace)::DecodeDestination (str="2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", params=...) at key_io.cpp:82
82	        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {
$24 = std::vector of length 1, capacity 1 = {0x6f}
$25 = 0xc4
88	        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);
89	        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {
$26 = std::vector of length 1, capacity 1 = {0xc4}
91	            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());
$27 = std::vector of length 21, capacity 25 = {0xc4, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 
  0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 0xc8}
$28 = {
  <base_blob<160u>> = {
    static WIDTH = 0x14, 
    data = {0x0 <repeats 20 times>}
  }, <No data fields>}
92	            return CScriptID(hash);
$29 = {
  <base_blob<160u>> = {
    static WIDTH = 0x14, 
    data = {0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 
      0xc8}
  }, <No data fields>}
75	    std::vector<unsigned char> data;
$30 = {
  <base_blob<160u>> = {
    static WIDTH = 0x14, 
    data = {0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 
      0xc8}
  }, <No data fields>}
#0  (anonymous namespace)::DecodeDestination (str="2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ", params=...) at key_io.cpp:75
75	    std::vector<unsigned char> data;
131	}
DecodeDestination (str="2MsvmB4K5yFMxAdFhGyGW87SeWrPRSksRYJ") at key_io.cpp:218
218	}
createrawtransaction (request=...) at rpc/rawtransaction.cpp:470
470	            if (!IsValidDestination(destination)) {
$31 = {
  which_ = 2, 
  storage_ = {
    <boost::detail::aligned_storage::aligned_storage_imp<48ul, 4ul>> = {
      data_ = {
        buf = "\azAL=p~\257\362q\203i\272\324+&\207\202y\310_!{/*\217\250E", '\000' <repeats 19 times>, 
        align_ = {<No data fields>}
      }
    }, 
    members of boost::aligned_storage<48ul, 4ul>: 
    static size = <optimized out>, 
    static alignment = <optimized out>
  }
}
$32 = {
  which_ = 0x2, 
  storage_ = {
    <boost::detail::aligned_storage::aligned_storage_imp<48ul, 4ul>> = {
      data_ = {
        buf = {0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 
          0x79, 0xc8, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0 <repeats 20 times>}, 
        align_ = {<No data fields>}
      }
    }, 
    members of boost::aligned_storage<48ul, 4ul>: 
    static size = <optimized out>, 
    static alignment = <optimized out>
  }
}
474	            if (!destinations.insert(destination).second) {
480	            CScript scriptPubKey = GetScriptForDestination(destination);
482	            CAmount nAmount = AmountFromValue(outputs[name_]);
$33 = {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 23, 
    _union = {
      direct = "\251\024\azAL=p~\257\362q\203i\272\324+&\207\202yȇ\000\000\000\000", 
      {
        capacity = 2047284393, 
        indirect = 0x71f2af7e703d4c41 <error: Cannot access memory at address 0x71f2af7e703d4c41>
      }
    }
  }, <No data fields>}
$34 = {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x17, 
    _union = {
      direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 
        0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
      {
        capacity = 0x7a0714a9, 
        indirect = 0x71f2af7e703d4c41
      }
    }
  }, <No data fields>}
484	            CTxOut out(nAmount, scriptPubKey);
485	            rawTx.vout.push_back(out);
$35 = {
  nValue = 2149000000, 
  scriptPubKey = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 23, 
      _union = {
        direct = "\251\024\azAL=p~\257\362q\203i\272\324+&\207\202yȇ\000\000\000\000", 
        {
          capacity = 2047284393, 
          indirect = 0x71f2af7e703d4c41 <error: Cannot access memory at address 0x71f2af7e703d4c41>
        }
      }
    }, <No data fields>}
}
$36 = {
  nValue = 0x80172340, 
  scriptPubKey = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x17, 
      _union = {
        direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 
          0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x7a0714a9, 
          indirect = 0x71f2af7e703d4c41
        }
      }
    }, <No data fields>}
}
484	            CTxOut out(nAmount, scriptPubKey);
480	            CScript scriptPubKey = GetScriptForDestination(destination);
$37 = {
  nValue = 0x80172340, 
  scriptPubKey = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x17, 
      _union = {
        direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 
          0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x7a0714a9, 
          indirect = 0x71f2af7e703d4c41
        }
      }
    }, <No data fields>}
}
469	            CTxDestination destination = DecodeDestination(name_);
$38 = {
  nValue = 0x80172340, 
  scriptPubKey = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x17, 
      _union = {
        direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 
          0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x7a0714a9, 
          indirect = 0x71f2af7e703d4c41
        }
      }
    }, <No data fields>}
}
460	    for (const std::string& name_ : outputs.getKeys()) {
461	        if (name_ == "data") {
469	            CTxDestination destination = DecodeDestination(name_);

Breakpoint 3, DecodeDestination (str="2N2EYbEMbZyr1zy7GAghRKSDo4EXpFYRvQM") at key_io.cpp:216
216	{
217	    return DecodeDestination(str, Params());

Breakpoint 4, (anonymous namespace)::DecodeDestination (str="2N2EYbEMbZyr1zy7GAghRKSDo4EXpFYRvQM", params=...) at key_io.cpp:74
74	{
75	    std::vector<unsigned char> data;
76	    uint160 hash;
77	    if (DecodeBase58Check(str, data)) {

Breakpoint 5, DecodeBase58Check (str="2N2EYbEMbZyr1zy7GAghRKSDo4EXpFYRvQM", vchRet=std::vector of length 0, capacity 0)
    at base58.cpp:149
149	{
150	    return DecodeBase58Check(str.c_str(), vchRet);

Breakpoint 5, DecodeBase58Check (psz=0x7ffaf00008c0 "2N2EYbEMbZyr1zy7GAghRKSDo4EXpFYRvQM", 
    vchRet=std::vector of length 0, capacity 0) at base58.cpp:126
126	{
127	    if (!DecodeBase58(psz, vchRet) ||
128	        (vchRet.size() < 4)) {
127	    if (!DecodeBase58(psz, vchRet) ||
139	    uint256 hash = Hash(vchRet.begin(), vchRet.end() - 4);
140	    if (memcmp(&hash, &vchRet[vchRet.size() - 4], 4) != 0) {
144	    vchRet.resize(vchRet.size() - 4);
145	    return true;
146	}
DecodeBase58Check (str="2N2EYbEMbZyr1zy7GAghRKSDo4EXpFYRvQM", vchRet=std::vector of length 21, capacity 25 = {...})
    at base58.cpp:151
151	}
(anonymous namespace)::DecodeDestination (str="2N2EYbEMbZyr1zy7GAghRKSDo4EXpFYRvQM", params=...) at key_io.cpp:81
81	        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);
82	        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {
88	        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);
89	        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {
91	            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());
92	            return CScriptID(hash);
75	    std::vector<unsigned char> data;
131	}
DecodeDestination (str="2N2EYbEMbZyr1zy7GAghRKSDo4EXpFYRvQM") at key_io.cpp:218
218	}
createrawtransaction (request=...) at rpc/rawtransaction.cpp:470
470	            if (!IsValidDestination(destination)) {
474	            if (!destinations.insert(destination).second) {
480	            CScript scriptPubKey = GetScriptForDestination(destination);
482	            CAmount nAmount = AmountFromValue(outputs[name_]);
484	            CTxOut out(nAmount, scriptPubKey);
485	            rawTx.vout.push_back(out);
$39 = {
  nValue = 0xa9df8c80, 
  scriptPubKey = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x17, 
      _union = {
        direct = {0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 0x4a, 
          0x4a, 0xc7, 0xb7, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x986214a9, 
          indirect = 0x4845309d352ba53e
        }
      }
    }, <No data fields>}
}
$40 = {
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 
              0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
          }, <No data fields>}, 
        n = 0x0
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x71, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1a, 0x0, 0xf0, 0xfa, 0x7f, 0x0, 0x0, 0xe0, 0x8, 0x0, 
              0xf0, 0xfa, 0x7f, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x171, 
              indirect = 0xf0001a0000000000
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 1, capacity 1 = {{
      nValue = 0x80172340, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0xf0, 0xfa, 0x7f, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
484	            CTxOut out(nAmount, scriptPubKey);
480	            CScript scriptPubKey = GetScriptForDestination(destination);
469	            CTxDestination destination = DecodeDestination(name_);
460	    for (const std::string& name_ : outputs.getKeys()) {
489	    if (!request.params[3].isNull() && rbfOptIn != SignalsOptInRBF(rawTx)) {
494	    return EncodeHexTx(rawTx);
443	    std::set<CTxDestination> destinations;
$41 = {
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 
              0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
          }, <No data fields>}, 
        n = 0x0
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x71, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1a, 0x0, 0xf0, 0xfa, 0x7f, 0x0, 0x0, 0xe0, 0x8, 0x0, 
              0xf0, 0xfa, 0x7f, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x171, 
              indirect = 0xf0001a0000000000
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 2, capacity 2 = {{
      nValue = 0x80172340, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x34, 0x39, 0x36, 0x37, 0x32}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }, {
      nValue = 0xa9df8c80, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 
              0x4a, 0x4a, 0xc7, 0xb7, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x986214a9, 
              indirect = 0x4845309d352ba53e
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
$42 = 2047284393
$43 = 2556564649
$44 = 2556564649
$45 = 2850000000
387	    CMutableTransaction rawTx;
384	                           request.params[1].get_array();
380	    UniValue inputs = request.params[0].get_array();
494	    return EncodeHexTx(rawTx);
495	}
CRPCTable::execute (this=0x7ffb1fba3fa0 <tableRPC>, request=...) at rpc/server.cpp:504
504	}
HTTPReq_JSONRPC (req=0x7ffb0c0021f0) at httprpc.cpp:194
194	            strReply = JSONRPCReply(result, NullUniValue, jreq.id);
191	            UniValue result = tableRPC.execute(jreq);
202	        req->WriteHeader("Content-Type", "application/json");
203	        req->WriteReply(HTTP_OK, strReply);
$46 = "{\"result\":\"020000000100cd8b2cb2364e85907fda5aa94e52ee29bbd97b12af14805f217b2f2a8fa8450000000000ffffffff02402317800000000017a914077a414c3d707eaff2718369bad42b26878279c887808cdfa90000000017a91462983ea52"...
$47 = "{\"result\":\"020000000100cd8b2cb2364e85907fda5aa94e52ee29bbd97b12af14805f217b2f2a8fa8450000000000ffffffff02402317800000000017a914077a414c3d707eaff2718369bad42b26878279c887808cdfa90000000017a91462983ea52"...
$48 = "{\"result\":\"020000000100cd8b2cb2364e85907fda5aa94e52ee29bbd97b12af14805f217b2f2a8fa8450000000000ffffffff02402317800000000017a914077a414c3d707eaff2718369bad42b26878279c887808cdfa90000000017a91462983ea52b359d304548bf09e4a09f4a4ac7b7008700000000\",\"error\":null,\"id\":1}\n"
184	        std::string strReply;
Continuing.

Program received signal SIGPIPE, Broken pipe.
[Switching to Thread 0x7ffb196fb700 (LWP 552)]
0x00007ffb1c617e8d in writev () from /lib/x86_64-linux-gnu/libc.so.6
A debugging session is active.

	Inferior 1 [process 550] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 550
Breakpoint 1 at 0x7f610c6aca1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7f610c68b0f8: file rpc/rawtransaction.cpp, line 960.
Breakpoint 3 at 0x7f610c8d32eb: file wallet/rpcwallet.cpp, line 3260.
Continuing.
[Switching to Thread 0x7f61063cc700 (LWP 11711)]

Breakpoint 1, CRPCTable::execute (this=0x7f610d075fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:960
960	{
Already logging to createtx.txt.
Breakpoint 4 at 0x7f610c6aca1f: file rpc/server.cpp, line 473.
Breakpoint 5 at 0x7f610c68b0f8: file rpc/rawtransaction.cpp, line 960.
Breakpoint 6 at 0x7f610c8d32eb: file wallet/rpcwallet.cpp, line 3260.
Currently logging to "createtx.txt".
Future logs will be written to signtx.txt.
Logs will be appended to the log file.
Output is being logged and displayed.
A debugging session is active.

	Inferior 1 [process 11708] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 11708
