Breakpoint 1 at 0x7f12a9953a1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7f12a99320f8: file rpc/rawtransaction.cpp, line 962.
Breakpoint 3 at 0x7f12a992f653: file rpc/rawtransaction.cpp, line 726.
Breakpoint 4 at 0x7f12a9b7a2eb: file wallet/rpcwallet.cpp, line 3260.
Breakpoint 5 at 0x7f12a9cc702e: file script/sign.cpp, line 150.
Continuing.
[Switching to Thread 0x7f12a3673700 (LWP 1960)]

Breakpoint 1, CRPCTable::execute (this=0x7f12aa31cfa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 3, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f12a3672230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 5, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.
[Switching to Thread 0x7f12a2e72700 (LWP 1961)]

Breakpoint 1, CRPCTable::execute (this=0x7f12aa31cfa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
CKey::Sign: No such file or directory.
Breakpoint 6 at 0x7f12a9c9d9b3: file key.cpp, line 192.
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 3, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f12a2e71230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 5, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 6, CKey::Sign (this=0x7f12a2e70220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:192
192	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
$1 = {static PRIVATE_KEY_SIZE = 279, static COMPRESSED_PRIVATE_KEY_SIZE = 214, fValid = true, fCompressed = true, 
  keydata = std::vector of length 32, capacity 32 = {234 '\352', 98 'b', 138 '\212', 226 '\342', 75 'K', 10 '\n', 104 'h', 
    82 'R', 252 '\374', 85 'U', 248 '\370', 164 '\244', 11 '\v', 240 '\360', 127 '\177', 169 '\251', 169 '\251', 227 '\343', 
    190 '\276', 120 'x', 215 '\327', 99 'c', 89 'Y', 103 'g', 31 '\037', 44 ',', 74 'J', 162 '\242', 230 '\346', 149 '\225', 
    202 '\312', 32 ' '}}
$2 = {static PRIVATE_KEY_SIZE = 0x117, static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, fValid = 0x1, fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}}
A debugging session is active.

	Inferior 1 [process 1954] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 1954
Breakpoint 1 at 0x7fa1deefea1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7fa1deedd0f8: file rpc/rawtransaction.cpp, line 962.
Function "CKey::Sign  # 最终签名的地方" not defined.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Breakpoint 3 at 0x7fa1df248827: file key.cpp, line 179.
Breakpoint 4 at 0x7fa1deeda653: file rpc/rawtransaction.cpp, line 726.
Breakpoint 5 at 0x7fa1df1252eb: file wallet/rpcwallet.cpp, line 3260.
Breakpoint 6 at 0x7fa1df272046: file script/sign.cpp, line 150.
Breakpoint 7 at 0x7fa1df2489b3: file key.cpp, line 192.
Continuing.
[Switching to Thread 0x7fa1d8c1e700 (LWP 2372)]

Breakpoint 1, CRPCTable::execute (this=0x7fa1df8c7fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 3, CKey::GetPubKey (this=0x7fa1d8c1d0b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
180	    assert(fValid);
#0  CKey::GetPubKey (this=0x7fa1d8c1d0b0) at key.cpp:180
#1  0x00007fa1df24db5b in CKeyStore::AddKey (this=0x7fa1d8c1d230, key=...) at keystore.cpp:11
#2  0x00007fa1deedce1a in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:955
#3  0x00007fa1deedd726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#4  0x00007fa1deefec0a in CRPCTable::execute (this=0x7fa1df8c7fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#5  0x00007fa1df0b03c2 in HTTPReq_JSONRPC (req=0x7fa1b0001060) at httprpc.cpp:191
#6  0x00007fa1dee836a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#7  0x00007fa1df0bd5f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7fa1b00021a0, __args#0=0x7fa1b0001060, __args#1="") at /usr/include/c++/6/functional:2127
#8  0x00007fa1df0bbabd in HTTPWorkItem::operator() (this=0x7fa1b0002170) at httpserver.cpp:53
#9  0x00007fa1df0be844 in WorkQueue<HTTPClosure>::Run (this=0x7fa1e0a6dfb0) at httpserver.cpp:112
#10 0x00007fa1df0b6b8c in HTTPWorkQueueRun (queue=0x7fa1e0a6dfb0) at httpserver.cpp:334
#11 0x00007fa1df0cc6a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7fa1e0a6db88) at /usr/include/c++/6/functional:1391
#12 0x00007fa1df0cc122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7fa1e0a6db88) at /usr/include/c++/6/functional:1380
#13 0x00007fa1df0cb9e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7fa1e0a6db80) at /usr/include/c++/6/thread:197
#14 0x00007fa1dcdebe6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007fa1dc601494 in start_thread (arg=0x7fa1d8c1e700) at pthread_create.c:333
#16 0x00007fa1dc343acf in clone () from /lib/x86_64-linux-gnu/libc.so.6
182	    size_t clen = CPubKey::PUBLIC_KEY_SIZE;
183	    CPubKey result;
184	    int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());
$1 = {static PRIVATE_KEY_SIZE = 279, static COMPRESSED_PRIVATE_KEY_SIZE = 214, fValid = true, fCompressed = true, 
  keydata = std::vector of length 32, capacity 32 = {234 '\352', 98 'b', 138 '\212', 226 '\342', 75 'K', 10 '\n', 104 'h', 
    82 'R', 252 '\374', 85 'U', 248 '\370', 164 '\244', 11 '\v', 240 '\360', 127 '\177', 169 '\251', 169 '\251', 227 '\343', 
    190 '\276', 120 'x', 215 '\327', 99 'c', 89 'Y', 103 'g', 31 '\037', 44 ',', 74 'J', 162 '\242', 230 '\346', 149 '\225', 
    202 '\312', 32 ' '}}
$2 = {static PRIVATE_KEY_SIZE = 0x117, static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, fValid = 0x1, fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}}
185	    assert(ret);
$3 = {data = {0xaf, 0x4d, 0xc9, 0x75, 0xc2, 0xcc, 0x76, 0x67, 0x8e, 0xc8, 0x32, 0x8c, 0xe4, 0xa4, 0xa5, 0x53, 0xd0, 0x4, 0x5d, 
    0x3c, 0xca, 0x8b, 0x4, 0x0, 0xcf, 0x5a, 0xa5, 0xaa, 0x7d, 0x7, 0xc7, 0xb9, 0x24, 0xf4, 0x94, 0xa7, 0xf6, 0xd3, 0xa5, 0xf2, 
    0xe4, 0xb0, 0x69, 0x74, 0xd8, 0xc7, 0x5, 0xd2, 0x4f, 0x63, 0x3c, 0x58, 0xa9, 0x97, 0x37, 0xb4, 0xbc, 0x3e, 0xfb, 0xa3, 
    0xbe, 0x9d, 0x3a, 0x47}}
186	    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);
$4 = {data = {0xaf, 0x4d, 0xc9, 0x75, 0xc2, 0xcc, 0x76, 0x67, 0x8e, 0xc8, 0x32, 0x8c, 0xe4, 0xa4, 0xa5, 0x53, 0xd0, 0x4, 0x5d, 
    0x3c, 0xca, 0x8b, 0x4, 0x0, 0xcf, 0x5a, 0xa5, 0xaa, 0x7d, 0x7, 0xc7, 0xb9, 0x24, 0xf4, 0x94, 0xa7, 0xf6, 0xd3, 0xa5, 0xf2, 
    0xe4, 0xb0, 0x69, 0x74, 0xd8, 0xc7, 0x5, 0xd2, 0x4f, 0x63, 0x3c, 0x58, 0xa9, 0x97, 0x37, 0xb4, 0xbc, 0x3e, 0xfb, 0xa3, 
    0xbe, 0x9d, 0x3a, 0x47}}
$5 = {static PRIVATE_KEY_SIZE = 0x117, static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, fValid = 0x1, fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}}
187	    assert(result.size() == clen);
$6 = {data = {0xaf, 0x4d, 0xc9, 0x75, 0xc2, 0xcc, 0x76, 0x67, 0x8e, 0xc8, 0x32, 0x8c, 0xe4, 0xa4, 0xa5, 0x53, 0xd0, 0x4, 0x5d, 
    0x3c, 0xca, 0x8b, 0x4, 0x0, 0xcf, 0x5a, 0xa5, 0xaa, 0x7d, 0x7, 0xc7, 0xb9, 0x24, 0xf4, 0x94, 0xa7, 0xf6, 0xd3, 0xa5, 0xf2, 
    0xe4, 0xb0, 0x69, 0x74, 0xd8, 0xc7, 0x5, 0xd2, 0x4f, 0x63, 0x3c, 0x58, 0xa9, 0x97, 0x37, 0xb4, 0xbc, 0x3e, 0xfb, 0xa3, 
    0xbe, 0x9d, 0x3a, 0x47}}
188	    assert(result.IsValid());
189	    return result;
$7 = {static PUBLIC_KEY_SIZE = 0x41, static COMPRESSED_PUBLIC_KEY_SIZE = 0x21, static SIGNATURE_SIZE = 0x48, 
  static COMPACT_SIGNATURE_SIZE = 0x41, vch = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 
    0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 0xe4, 0x8c, 0x32, 0xc8, 0x8e, 0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf, 
    0x0 <repeats 32 times>}}
190	}
$8 = {static PUBLIC_KEY_SIZE = 0x41, static COMPRESSED_PUBLIC_KEY_SIZE = 0x21, static SIGNATURE_SIZE = 0x48, 
  static COMPACT_SIGNATURE_SIZE = 0x41, vch = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 
    0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 0xe4, 0x8c, 0x32, 0xc8, 0x8e, 0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf, 
    0x0 <repeats 32 times>}}
CKeyStore::AddKey (this=0x7fa1d8c1d230, key=...) at keystore.cpp:12
12	}
signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:951
951	        CKey key = DecodeSecret(k.get_str());
950	        UniValue k = keys[idx];
949	    for (unsigned int idx = 0; idx < keys.size(); ++idx) {
958	    return SignTransaction(mtx, request.params[2], &keystore, true, request.params[3]);
Continuing.

Breakpoint 4, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7fa1d8c1d230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 6, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 7, CKey::Sign (this=0x7fa1d8c1c220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:192
192	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
194	    GetPubKey();

Breakpoint 3, CKey::GetPubKey (this=0x7fa1d8c1c220) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
180	    assert(fValid);
182	    size_t clen = CPubKey::PUBLIC_KEY_SIZE;
183	    CPubKey result;
184	    int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());
$9 = {static PRIVATE_KEY_SIZE = 0x117, static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, fValid = 0x1, fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}}
$10 = {data = {0xe0, 0xc5, 0xc1, 0xd8, 0xa1, 0x7f, 0x0, 0x0, 0x40, 0xc2, 0xc1, 0xd8, 0xa1, 0x7f, 0x0, 0x0, 0xd0, 0xc0, 0xc1, 
    0xd8, 0xa1, 0x7f, 0x0, 0x0, 0x1b, 0x59, 0xd0, 0xde, 0xa1, 0x7f, 0x0, 0x0, 0x20, 0x80, 0x6e, 0xdf, 0xa1, 0x7f, 0x0, 0x0, 
    0x38, 0xd2, 0xc1, 0xd8, 0xa1, 0x7f, 0x0, 0x0, 0xa0, 0x81, 0x6e, 0xdf, 0xa1, 0x7f, 0x0, 0x0, 0x0, 0xda, 0xfe, 0x45, 0xdd, 
    0xed, 0x7, 0xd3}}
185	    assert(ret);
186	    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);
187	    assert(result.size() == clen);
188	    assert(result.IsValid());
189	    return result;
190	}
No symbol "resutl" in current context.
$11 = {static PUBLIC_KEY_SIZE = 0x41, static COMPRESSED_PUBLIC_KEY_SIZE = 0x21, static SIGNATURE_SIZE = 0x48, 
  static COMPACT_SIGNATURE_SIZE = 0x41, vch = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 
    0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 0xe4, 0x8c, 0x32, 0xc8, 0x8e, 0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf, 
    0x0 <repeats 32 times>}}
CKey::Sign (this=0x7fa1d8c1c220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0) at key.cpp:196
196	    if (!fValid)
198	    vchSig.resize(CPubKey::SIGNATURE_SIZE);
199	    size_t nSigLen = CPubKey::SIGNATURE_SIZE;
Continuing.

Breakpoint 3, CKey::GetPubKey (this=0x7fa1d8c1c2b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
180	    assert(fValid);
Continuing.
[Switching to Thread 0x7fa1d841d700 (LWP 2373)]

Breakpoint 1, CRPCTable::execute (this=0x7fa1df8c7fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 3, CKey::GetPubKey (this=0x7fa1d841c0b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 4, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7fa1d841c230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 6, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 7, CKey::Sign (this=0x7fa1d841b220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:192
192	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
194	    GetPubKey();

Breakpoint 3, CKey::GetPubKey (this=0x7fa1d841b220) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
180	    assert(fValid);
182	    size_t clen = CPubKey::PUBLIC_KEY_SIZE;
183	    CPubKey result;
184	    int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());
185	    assert(ret);
186	    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);
187	    assert(result.size() == clen);
188	    assert(result.IsValid());
189	    return result;
190	}
CKey::Sign (this=0x7fa1d841b220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0) at key.cpp:196
196	    if (!fValid)
198	    vchSig.resize(CPubKey::SIGNATURE_SIZE);
199	    size_t nSigLen = CPubKey::SIGNATURE_SIZE;
200	    unsigned char extra_entropy[32] = {0};
Undefined command: "nn".  Try "help".
201	    WriteLE32(extra_entropy, test_case);
204	    int ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : nullptr);
$12 = (const uint256 &) @0x7fa1d841b240: {<base_blob<256u>> = {static WIDTH = 0x20, data = {0x5a, 0x72, 0x9, 0x79, 0xcd, 0x61, 
      0xf9, 0x2f, 0xea, 0xfc, 0xe2, 0xd5, 0xbd, 0x44, 0x67, 0xb0, 0xf0, 0x7b, 0xfd, 0xa2, 0xb3, 0x66, 0x50, 0x5b, 0xa6, 0x4c, 
      0x72, 0x4d, 0x82, 0xf8, 0x40, 0xe8}}, <No data fields>}
$13 = (const uint256 &) @0x7fa1d841b240: {<base_blob<256u>> = {static WIDTH = 0x20, data = {0x5a, 0x72, 0x9, 0x79, 0xcd, 0x61, 
      0xf9, 0x2f, 0xea, 0xfc, 0xe2, 0xd5, 0xbd, 0x44, 0x67, 0xb0, 0xf0, 0x7b, 0xfd, 0xa2, 0xb3, 0x66, 0x50, 0x5b, 0xa6, 0x4c, 
      0x72, 0x4d, 0x82, 0xf8, 0x40, 0xe8}}, <No data fields>}
205	    assert(ret);
207	    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, vchSig.data(), &nSigLen, &sig);
208	    vchSig.resize(nSigLen);
$14 = {data = {0x2a, 0x66, 0x8e, 0x74, 0x2b, 0x50, 0x5d, 0x28, 0xb9, 0x30, 0x4b, 0xba, 0x77, 0x7e, 0x6a, 0xf6, 0xd4, 0xcc, 
    0xef, 0xa7, 0x8b, 0xf9, 0x4d, 0xd6, 0x19, 0x64, 0xc0, 0xa4, 0x8, 0xf2, 0x5c, 0xcd, 0xc7, 0x2b, 0x56, 0x5f, 0xd9, 0x3e, 
    0xd4, 0x3f, 0x8c, 0xc8, 0x6f, 0x1e, 0xfc, 0x1f, 0xdb, 0xa2, 0x1a, 0x44, 0xed, 0x6c, 0xd, 0x5b, 0x38, 0x8d, 0x18, 0xf2, 
    0xb7, 0xac, 0xa1, 0x60, 0x21, 0x43}}
$15 = std::vector of length 72, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xcd, 0x5c, 0xf2, 0x8, 0xa4, 0xc0, 0x64, 0x19, 
  0xd6, 0x4d, 0xf9, 0x8b, 0xa7, 0xef, 0xcc, 0xd4, 0xf6, 0x6a, 0x7e, 0x77, 0xba, 0x4b, 0x30, 0xb9, 0x28, 0x5d, 0x50, 0x2b, 
  0x74, 0x8e, 0x66, 0x2a, 0x2, 0x20, 0x43, 0x21, 0x60, 0xa1, 0xac, 0xb7, 0xf2, 0x18, 0x8d, 0x38, 0x5b, 0xd, 0x6c, 0xed, 0x44, 
  0x1a, 0xa2, 0xdb, 0x1f, 0xfc, 0x1e, 0x6f, 0xc8, 0x8c, 0x3f, 0xd4, 0x3e, 0xd9, 0x5f, 0x56, 0x2b, 0xc7, 0x0}
A debugging session is active.

	Inferior 1 [process 2369] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 2369
