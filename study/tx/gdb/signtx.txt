Breakpoint 1 at 0x7f12a9953a1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7f12a99320f8: file rpc/rawtransaction.cpp, line 962.
Breakpoint 3 at 0x7f12a992f653: file rpc/rawtransaction.cpp, line 726.
Breakpoint 4 at 0x7f12a9b7a2eb: file wallet/rpcwallet.cpp, line 3260.
Breakpoint 5 at 0x7f12a9cc702e: file script/sign.cpp, line 150.
Continuing.
[Switching to Thread 0x7f12a3673700 (LWP 1960)]

Breakpoint 1, CRPCTable::execute (this=0x7f12aa31cfa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 3, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f12a3672230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 5, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.
[Switching to Thread 0x7f12a2e72700 (LWP 1961)]

Breakpoint 1, CRPCTable::execute (this=0x7f12aa31cfa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
CKey::Sign: No such file or directory.
Breakpoint 6 at 0x7f12a9c9d9b3: file key.cpp, line 192.
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 3, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f12a2e71230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 5, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 6, CKey::Sign (this=0x7f12a2e70220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:192
192	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
$1 = {static PRIVATE_KEY_SIZE = 279, static COMPRESSED_PRIVATE_KEY_SIZE = 214, fValid = true, fCompressed = true, 
  keydata = std::vector of length 32, capacity 32 = {234 '\352', 98 'b', 138 '\212', 226 '\342', 75 'K', 10 '\n', 104 'h', 
    82 'R', 252 '\374', 85 'U', 248 '\370', 164 '\244', 11 '\v', 240 '\360', 127 '\177', 169 '\251', 169 '\251', 227 '\343', 
    190 '\276', 120 'x', 215 '\327', 99 'c', 89 'Y', 103 'g', 31 '\037', 44 ',', 74 'J', 162 '\242', 230 '\346', 149 '\225', 
    202 '\312', 32 ' '}}
$2 = {static PRIVATE_KEY_SIZE = 0x117, static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, fValid = 0x1, fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}}
A debugging session is active.

	Inferior 1 [process 1954] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 1954
Breakpoint 1 at 0x7fa1deefea1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7fa1deedd0f8: file rpc/rawtransaction.cpp, line 962.
Function "CKey::Sign  # 最终签名的地方" not defined.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
Breakpoint 3 at 0x7fa1df248827: file key.cpp, line 179.
Breakpoint 4 at 0x7fa1deeda653: file rpc/rawtransaction.cpp, line 726.
Breakpoint 5 at 0x7fa1df1252eb: file wallet/rpcwallet.cpp, line 3260.
Breakpoint 6 at 0x7fa1df272046: file script/sign.cpp, line 150.
Breakpoint 7 at 0x7fa1df2489b3: file key.cpp, line 192.
Continuing.
[Switching to Thread 0x7fa1d8c1e700 (LWP 2372)]

Breakpoint 1, CRPCTable::execute (this=0x7fa1df8c7fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 3, CKey::GetPubKey (this=0x7fa1d8c1d0b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
180	    assert(fValid);
#0  CKey::GetPubKey (this=0x7fa1d8c1d0b0) at key.cpp:180
#1  0x00007fa1df24db5b in CKeyStore::AddKey (this=0x7fa1d8c1d230, key=...) at keystore.cpp:11
#2  0x00007fa1deedce1a in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:955
#3  0x00007fa1deedd726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#4  0x00007fa1deefec0a in CRPCTable::execute (this=0x7fa1df8c7fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#5  0x00007fa1df0b03c2 in HTTPReq_JSONRPC (req=0x7fa1b0001060) at httprpc.cpp:191
#6  0x00007fa1dee836a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#7  0x00007fa1df0bd5f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7fa1b00021a0, __args#0=0x7fa1b0001060, __args#1="") at /usr/include/c++/6/functional:2127
#8  0x00007fa1df0bbabd in HTTPWorkItem::operator() (this=0x7fa1b0002170) at httpserver.cpp:53
#9  0x00007fa1df0be844 in WorkQueue<HTTPClosure>::Run (this=0x7fa1e0a6dfb0) at httpserver.cpp:112
#10 0x00007fa1df0b6b8c in HTTPWorkQueueRun (queue=0x7fa1e0a6dfb0) at httpserver.cpp:334
#11 0x00007fa1df0cc6a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7fa1e0a6db88) at /usr/include/c++/6/functional:1391
#12 0x00007fa1df0cc122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7fa1e0a6db88) at /usr/include/c++/6/functional:1380
#13 0x00007fa1df0cb9e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7fa1e0a6db80) at /usr/include/c++/6/thread:197
#14 0x00007fa1dcdebe6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007fa1dc601494 in start_thread (arg=0x7fa1d8c1e700) at pthread_create.c:333
#16 0x00007fa1dc343acf in clone () from /lib/x86_64-linux-gnu/libc.so.6
182	    size_t clen = CPubKey::PUBLIC_KEY_SIZE;
183	    CPubKey result;
184	    int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());
$1 = {static PRIVATE_KEY_SIZE = 279, static COMPRESSED_PRIVATE_KEY_SIZE = 214, fValid = true, fCompressed = true, 
  keydata = std::vector of length 32, capacity 32 = {234 '\352', 98 'b', 138 '\212', 226 '\342', 75 'K', 10 '\n', 104 'h', 
    82 'R', 252 '\374', 85 'U', 248 '\370', 164 '\244', 11 '\v', 240 '\360', 127 '\177', 169 '\251', 169 '\251', 227 '\343', 
    190 '\276', 120 'x', 215 '\327', 99 'c', 89 'Y', 103 'g', 31 '\037', 44 ',', 74 'J', 162 '\242', 230 '\346', 149 '\225', 
    202 '\312', 32 ' '}}
$2 = {static PRIVATE_KEY_SIZE = 0x117, static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, fValid = 0x1, fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}}
185	    assert(ret);
$3 = {data = {0xaf, 0x4d, 0xc9, 0x75, 0xc2, 0xcc, 0x76, 0x67, 0x8e, 0xc8, 0x32, 0x8c, 0xe4, 0xa4, 0xa5, 0x53, 0xd0, 0x4, 0x5d, 
    0x3c, 0xca, 0x8b, 0x4, 0x0, 0xcf, 0x5a, 0xa5, 0xaa, 0x7d, 0x7, 0xc7, 0xb9, 0x24, 0xf4, 0x94, 0xa7, 0xf6, 0xd3, 0xa5, 0xf2, 
    0xe4, 0xb0, 0x69, 0x74, 0xd8, 0xc7, 0x5, 0xd2, 0x4f, 0x63, 0x3c, 0x58, 0xa9, 0x97, 0x37, 0xb4, 0xbc, 0x3e, 0xfb, 0xa3, 
    0xbe, 0x9d, 0x3a, 0x47}}
186	    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);
$4 = {data = {0xaf, 0x4d, 0xc9, 0x75, 0xc2, 0xcc, 0x76, 0x67, 0x8e, 0xc8, 0x32, 0x8c, 0xe4, 0xa4, 0xa5, 0x53, 0xd0, 0x4, 0x5d, 
    0x3c, 0xca, 0x8b, 0x4, 0x0, 0xcf, 0x5a, 0xa5, 0xaa, 0x7d, 0x7, 0xc7, 0xb9, 0x24, 0xf4, 0x94, 0xa7, 0xf6, 0xd3, 0xa5, 0xf2, 
    0xe4, 0xb0, 0x69, 0x74, 0xd8, 0xc7, 0x5, 0xd2, 0x4f, 0x63, 0x3c, 0x58, 0xa9, 0x97, 0x37, 0xb4, 0xbc, 0x3e, 0xfb, 0xa3, 
    0xbe, 0x9d, 0x3a, 0x47}}
$5 = {static PRIVATE_KEY_SIZE = 0x117, static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, fValid = 0x1, fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}}
187	    assert(result.size() == clen);
$6 = {data = {0xaf, 0x4d, 0xc9, 0x75, 0xc2, 0xcc, 0x76, 0x67, 0x8e, 0xc8, 0x32, 0x8c, 0xe4, 0xa4, 0xa5, 0x53, 0xd0, 0x4, 0x5d, 
    0x3c, 0xca, 0x8b, 0x4, 0x0, 0xcf, 0x5a, 0xa5, 0xaa, 0x7d, 0x7, 0xc7, 0xb9, 0x24, 0xf4, 0x94, 0xa7, 0xf6, 0xd3, 0xa5, 0xf2, 
    0xe4, 0xb0, 0x69, 0x74, 0xd8, 0xc7, 0x5, 0xd2, 0x4f, 0x63, 0x3c, 0x58, 0xa9, 0x97, 0x37, 0xb4, 0xbc, 0x3e, 0xfb, 0xa3, 
    0xbe, 0x9d, 0x3a, 0x47}}
188	    assert(result.IsValid());
189	    return result;
$7 = {static PUBLIC_KEY_SIZE = 0x41, static COMPRESSED_PUBLIC_KEY_SIZE = 0x21, static SIGNATURE_SIZE = 0x48, 
  static COMPACT_SIGNATURE_SIZE = 0x41, vch = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 
    0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 0xe4, 0x8c, 0x32, 0xc8, 0x8e, 0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf, 
    0x0 <repeats 32 times>}}
190	}
$8 = {static PUBLIC_KEY_SIZE = 0x41, static COMPRESSED_PUBLIC_KEY_SIZE = 0x21, static SIGNATURE_SIZE = 0x48, 
  static COMPACT_SIGNATURE_SIZE = 0x41, vch = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 
    0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 0xe4, 0x8c, 0x32, 0xc8, 0x8e, 0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf, 
    0x0 <repeats 32 times>}}
CKeyStore::AddKey (this=0x7fa1d8c1d230, key=...) at keystore.cpp:12
12	}
signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:951
951	        CKey key = DecodeSecret(k.get_str());
950	        UniValue k = keys[idx];
949	    for (unsigned int idx = 0; idx < keys.size(); ++idx) {
958	    return SignTransaction(mtx, request.params[2], &keystore, true, request.params[3]);
Continuing.

Breakpoint 4, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7fa1d8c1d230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 6, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 7, CKey::Sign (this=0x7fa1d8c1c220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:192
192	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
194	    GetPubKey();

Breakpoint 3, CKey::GetPubKey (this=0x7fa1d8c1c220) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
180	    assert(fValid);
182	    size_t clen = CPubKey::PUBLIC_KEY_SIZE;
183	    CPubKey result;
184	    int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());
$9 = {static PRIVATE_KEY_SIZE = 0x117, static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, fValid = 0x1, fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}}
$10 = {data = {0xe0, 0xc5, 0xc1, 0xd8, 0xa1, 0x7f, 0x0, 0x0, 0x40, 0xc2, 0xc1, 0xd8, 0xa1, 0x7f, 0x0, 0x0, 0xd0, 0xc0, 0xc1, 
    0xd8, 0xa1, 0x7f, 0x0, 0x0, 0x1b, 0x59, 0xd0, 0xde, 0xa1, 0x7f, 0x0, 0x0, 0x20, 0x80, 0x6e, 0xdf, 0xa1, 0x7f, 0x0, 0x0, 
    0x38, 0xd2, 0xc1, 0xd8, 0xa1, 0x7f, 0x0, 0x0, 0xa0, 0x81, 0x6e, 0xdf, 0xa1, 0x7f, 0x0, 0x0, 0x0, 0xda, 0xfe, 0x45, 0xdd, 
    0xed, 0x7, 0xd3}}
185	    assert(ret);
186	    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);
187	    assert(result.size() == clen);
188	    assert(result.IsValid());
189	    return result;
190	}
No symbol "resutl" in current context.
$11 = {static PUBLIC_KEY_SIZE = 0x41, static COMPRESSED_PUBLIC_KEY_SIZE = 0x21, static SIGNATURE_SIZE = 0x48, 
  static COMPACT_SIGNATURE_SIZE = 0x41, vch = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 
    0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 0xe4, 0x8c, 0x32, 0xc8, 0x8e, 0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf, 
    0x0 <repeats 32 times>}}
CKey::Sign (this=0x7fa1d8c1c220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0) at key.cpp:196
196	    if (!fValid)
198	    vchSig.resize(CPubKey::SIGNATURE_SIZE);
199	    size_t nSigLen = CPubKey::SIGNATURE_SIZE;
Continuing.

Breakpoint 3, CKey::GetPubKey (this=0x7fa1d8c1c2b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
180	    assert(fValid);
Continuing.
[Switching to Thread 0x7fa1d841d700 (LWP 2373)]

Breakpoint 1, CRPCTable::execute (this=0x7fa1df8c7fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 3, CKey::GetPubKey (this=0x7fa1d841c0b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 4, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7fa1d841c230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 6, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 7, CKey::Sign (this=0x7fa1d841b220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:192
192	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
194	    GetPubKey();

Breakpoint 3, CKey::GetPubKey (this=0x7fa1d841b220) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
180	    assert(fValid);
182	    size_t clen = CPubKey::PUBLIC_KEY_SIZE;
183	    CPubKey result;
184	    int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());
185	    assert(ret);
186	    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);
187	    assert(result.size() == clen);
188	    assert(result.IsValid());
189	    return result;
190	}
CKey::Sign (this=0x7fa1d841b220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0) at key.cpp:196
196	    if (!fValid)
198	    vchSig.resize(CPubKey::SIGNATURE_SIZE);
199	    size_t nSigLen = CPubKey::SIGNATURE_SIZE;
200	    unsigned char extra_entropy[32] = {0};
Undefined command: "nn".  Try "help".
201	    WriteLE32(extra_entropy, test_case);
204	    int ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : nullptr);
$12 = (const uint256 &) @0x7fa1d841b240: {<base_blob<256u>> = {static WIDTH = 0x20, data = {0x5a, 0x72, 0x9, 0x79, 0xcd, 0x61, 
      0xf9, 0x2f, 0xea, 0xfc, 0xe2, 0xd5, 0xbd, 0x44, 0x67, 0xb0, 0xf0, 0x7b, 0xfd, 0xa2, 0xb3, 0x66, 0x50, 0x5b, 0xa6, 0x4c, 
      0x72, 0x4d, 0x82, 0xf8, 0x40, 0xe8}}, <No data fields>}
$13 = (const uint256 &) @0x7fa1d841b240: {<base_blob<256u>> = {static WIDTH = 0x20, data = {0x5a, 0x72, 0x9, 0x79, 0xcd, 0x61, 
      0xf9, 0x2f, 0xea, 0xfc, 0xe2, 0xd5, 0xbd, 0x44, 0x67, 0xb0, 0xf0, 0x7b, 0xfd, 0xa2, 0xb3, 0x66, 0x50, 0x5b, 0xa6, 0x4c, 
      0x72, 0x4d, 0x82, 0xf8, 0x40, 0xe8}}, <No data fields>}
205	    assert(ret);
207	    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, vchSig.data(), &nSigLen, &sig);
208	    vchSig.resize(nSigLen);
$14 = {data = {0x2a, 0x66, 0x8e, 0x74, 0x2b, 0x50, 0x5d, 0x28, 0xb9, 0x30, 0x4b, 0xba, 0x77, 0x7e, 0x6a, 0xf6, 0xd4, 0xcc, 
    0xef, 0xa7, 0x8b, 0xf9, 0x4d, 0xd6, 0x19, 0x64, 0xc0, 0xa4, 0x8, 0xf2, 0x5c, 0xcd, 0xc7, 0x2b, 0x56, 0x5f, 0xd9, 0x3e, 
    0xd4, 0x3f, 0x8c, 0xc8, 0x6f, 0x1e, 0xfc, 0x1f, 0xdb, 0xa2, 0x1a, 0x44, 0xed, 0x6c, 0xd, 0x5b, 0x38, 0x8d, 0x18, 0xf2, 
    0xb7, 0xac, 0xa1, 0x60, 0x21, 0x43}}
$15 = std::vector of length 72, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xcd, 0x5c, 0xf2, 0x8, 0xa4, 0xc0, 0x64, 0x19, 
  0xd6, 0x4d, 0xf9, 0x8b, 0xa7, 0xef, 0xcc, 0xd4, 0xf6, 0x6a, 0x7e, 0x77, 0xba, 0x4b, 0x30, 0xb9, 0x28, 0x5d, 0x50, 0x2b, 
  0x74, 0x8e, 0x66, 0x2a, 0x2, 0x20, 0x43, 0x21, 0x60, 0xa1, 0xac, 0xb7, 0xf2, 0x18, 0x8d, 0x38, 0x5b, 0xd, 0x6c, 0xed, 0x44, 
  0x1a, 0xa2, 0xdb, 0x1f, 0xfc, 0x1e, 0x6f, 0xc8, 0x8c, 0x3f, 0xd4, 0x3e, 0xd9, 0x5f, 0x56, 0x2b, 0xc7, 0x0}
A debugging session is active.

	Inferior 1 [process 2369] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 2369
Breakpoint 1 at 0x7f1493597a1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7f14935760f8: file rpc/rawtransaction.cpp, line 962.
Breakpoint 3 at 0x7f14938e19b3: file key.cpp, line 197.
Breakpoint 4 at 0x7f14938e1827: file key.cpp, line 179.
Breakpoint 5 at 0x7f1493573653: file rpc/rawtransaction.cpp, line 726.
Breakpoint 6 at 0x7f14937be2eb: file wallet/rpcwallet.cpp, line 3260.
Breakpoint 7 at 0x7f149390b02e: file script/sign.cpp, line 150.
[Switching to Thread 0x7f148d2b7700 (LWP 15689)]

Breakpoint 1, CRPCTable::execute (this=0x7f1493f60fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
476	        LOCK(cs_rpcWarmup);
477	        if (fRPCInWarmup)
476	        LOCK(cs_rpcWarmup);
484	    const CRPCCommand *pcmd = tableRPC[request.strMethod];
485	    if (!pcmd)
488	    g_rpcSignals.PreCommand(*pcmd);
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
964	    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);
967	    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)
1025	    if (!IsDeprecatedRPCEnabled("signrawtransaction")) {
1031	    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);
1034	    JSONRPCRequest new_request;
1035	    new_request.id = request.id;
1036	    new_request.params.setArray();
1039	    if (!request.params[2].isNull()) {
1040	        new_request.params.push_back(request.params[0]);
1042	        new_request.params.push_back(request.params[2]);
1043	        new_request.params.push_back(request.params[1]);
1044	        new_request.params.push_back(request.params[3]);
1045	        return signrawtransactionwithkey(new_request);

Breakpoint 4, CKey::GetPubKey (this=0x7f148d2b60b0) at key.cpp:179
warning: Source file is more recent than executable.
179	CPubKey CKey::GetPubKey() const {
180	    assert(fValid);
182	    size_t clen = CPubKey::PUBLIC_KEY_SIZE;
184	    CPubKey result;
Continuing.

Breakpoint 5, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f148d2b6230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
728	    CCoinsView viewDummy;
729	    CCoinsViewCache view(&viewDummy);
731	        LOCK2(cs_main, mempool.cs);
732	        CCoinsViewCache &viewChain = *pcoinsTip;
733	        CCoinsViewMemPool viewMempool(&viewChain, mempool);
734	        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view
736	        for (const CTxIn& txin : mtx.vin) {
737	            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.
736	        for (const CTxIn& txin : mtx.vin) {
740	        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long
733	        CCoinsViewMemPool viewMempool(&viewChain, mempool);
731	        LOCK2(cs_main, mempool.cs);
744	    if (!prevTxsUnival.isNull()) {
Continuing.

Breakpoint 7, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
151	    std::vector<valtype> result;
155	    bool solved = SignStep(creator, fromPubKey, result, whichType, SIGVERSION_BASE);
156	    bool P2SH = false;
157	    CScript subscript;
158	    sigdata.scriptWitness.stack.clear();
160	    if (solved && whichType == TX_SCRIPTHASH)
165	        subscript = CScript(result[0].begin(), result[0].end());
168	        solved = solved && SignStep(creator, subscript, result, whichType, SIGVERSION_BASE) && whichType != TX_SCRIPTHASH;
169	        P2SH = true;
172	    if (solved && whichType == TX_WITNESS_V0_KEYHASH)
Continuing.

Breakpoint 3, CKey::Sign (this=0x7f148d2b5220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:197
197	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
#0  CKey::Sign (this=0x7f148d2b5220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0) at key.cpp:197
#1  0x00007f149390a4f5 in TransactionSignatureCreator::CreateSig (this=0x7f148d2b5ea0, 
    vchSig=std::vector of length 0, capacity 0, address=..., scriptCode=..., sigversion=SIGVERSION_WITNESS_V0)
    at script/sign.cpp:38
#2  0x00007f149390a5c5 in Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, 
    sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:47
#3  0x00007f149390a9cf in SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 1, 
    whichTypeRet=@0x7f148d2b5580: TX_PUBKEYHASH, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:96
#4  0x00007f149390b2a7 in ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:178
#5  0x00007f1493574bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f148d2b6230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#6  0x00007f1493575ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#7  0x00007f1493576726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#8  0x00007f1493597c0a in CRPCTable::execute (this=0x7f1493f60fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#9  0x00007f14937493c2 in HTTPReq_JSONRPC (req=0x7f14600018e0) at httprpc.cpp:191
#10 0x00007f149351c6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#11 0x00007f14937565f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f1460001650, __args#0=0x7f14600018e0, __args#1="") at /usr/include/c++/6/functional:2127
#12 0x00007f1493754abd in HTTPWorkItem::operator() (this=0x7f1460001620) at httpserver.cpp:53
#13 0x00007f1493757844 in WorkQueue<HTTPClosure>::Run (this=0x7f1495b7ce30) at httpserver.cpp:112
#14 0x00007f149374fb8c in HTTPWorkQueueRun (queue=0x7f1495b7ce30) at httpserver.cpp:334
#15 0x00007f14937656a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f1495b7da88) at /usr/include/c++/6/functional:1391
#16 0x00007f1493765122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f1495b7da88) at /usr/include/c++/6/functional:1380
#17 0x00007f14937649e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f1495b7da80) at /usr/include/c++/6/thread:197
#18 0x00007f1491484e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f1490c9a494 in start_thread (arg=0x7f148d2b7700) at pthread_create.c:333
#20 0x00007f14909dcacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
#0  CKey::Sign (this=0x7f148d2b5220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0) at key.cpp:197
#1  0x00007f149390a4f5 in TransactionSignatureCreator::CreateSig (this=0x7f148d2b5ea0, 
    vchSig=std::vector of length 0, capacity 0, address=..., scriptCode=..., sigversion=SIGVERSION_WITNESS_V0)
    at script/sign.cpp:38
#2  0x00007f149390a5c5 in Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, 
    sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:47
#3  0x00007f149390a9cf in SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 1, 
    whichTypeRet=@0x7f148d2b5580: TX_PUBKEYHASH, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:96
#4  0x00007f149390b2a7 in ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:178
#5  0x00007f1493574bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f148d2b6230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#6  0x00007f1493575ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#7  0x00007f1493576726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#8  0x00007f1493597c0a in CRPCTable::execute (this=0x7f1493f60fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#9  0x00007f14937493c2 in HTTPReq_JSONRPC (req=0x7f14600018e0) at httprpc.cpp:191
#10 0x00007f149351c6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#11 0x00007f14937565f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f1460001650, __args#0=0x7f14600018e0, __args#1="") at /usr/include/c++/6/functional:2127
#12 0x00007f1493754abd in HTTPWorkItem::operator() (this=0x7f1460001620) at httpserver.cpp:53
#13 0x00007f1493757844 in WorkQueue<HTTPClosure>::Run (this=0x7f1495b7ce30) at httpserver.cpp:112
#14 0x00007f149374fb8c in HTTPWorkQueueRun (queue=0x7f1495b7ce30) at httpserver.cpp:334
#15 0x00007f14937656a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f1495b7da88) at /usr/include/c++/6/functional:1391
#16 0x00007f1493765122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f1495b7da88) at /usr/include/c++/6/functional:1380
#17 0x00007f14937649e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f1495b7da80) at /usr/include/c++/6/thread:197
#18 0x00007f1491484e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f1490c9a494 in start_thread (arg=0x7f148d2b7700) at pthread_create.c:333
#20 0x00007f14909dcacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
Breakpoint 8 at 0x7f149395a72b: file script/interpreter.cpp, line 1182.
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f148d2b52b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 8, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f148d2b5ee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
1213	        ss << hashPrevouts;
$1 = (const CTransaction &) @0x7f148d2b5ef0: {static CURRENT_VERSION = 0x2, static MAX_STANDARD_VERSION = 0x2, 
  vin = std::vector of length 1, capacity 1 = {{prevout = {hash = {<base_blob<256u>> = {static WIDTH = 0x20, data = {0x0, 
              0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
              0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}}, <No data fields>}, n = 0x0}, 
      scriptSig = {<prevector<28u, unsigned char, unsigned int, int>> = {_size = 0x0, _union = {direct = {0x3a, 0x32, 0x2c, 
              0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x32, 0x34, 0x38, 0x2c, 0x22, 0x76, 0x73, 0x69, 0x7a, 0x65, 0x22, 
              0x3a, 0x31, 0x36, 0x36, 0x2c, 0x22, 0x6c}, {capacity = 0x222c323a, 
              indirect = 0x34323a22657a6973}}}, <No data fields>}, nSequence = 0xffffffff, scriptWitness = {
        stack = std::vector of length 0, capacity 0}, static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, static SEQUENCE_LOCKTIME_GRANULARITY = 0x9}}, 
  vout = std::vector of length 2, capacity 2 = {{nValue = 0x80172340, 
      scriptPubKey = {<prevector<28u, unsigned char, unsigned int, int>> = {_size = 0x17, _union = {direct = {0xa9, 0x14, 0x7, 
              0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 
              0xc8, 0x87, 0x33, 0x36, 0x62, 0x32, 0x32}, {capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41}}}, <No data fields>}}, {nValue = 0xa9df8c80, 
      scriptPubKey = {<prevector<28u, unsigned char, unsigned int, int>> = {_size = 0x17, _union = {direct = {0xa9, 0x14, 
              0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 0x4a, 0x4a, 0xc7, 0xb7, 
              0x0, 0x87, 0x22, 0x3a, 0x22, 0x30, 0x30}, {capacity = 0x986214a9, 
              indirect = 0x4845309d352ba53e}}}, <No data fields>}}}, nVersion = 0x2, nLockTime = 0x0, 
  hash = {<base_blob<256u>> = {static WIDTH = 0x20, data = {0xce, 0x1b, 0x6a, 0x54, 0x79, 0xf8, 0x41, 0xf1, 0x77, 0x3c, 0xe6, 
        0xde, 0x15, 0xce, 0x19, 0xdb, 0x50, 0xf8, 0x4a, 0x4c, 0xfa, 0xe6, 0x73, 0x83, 0xdb, 0x97, 0x3a, 0x61, 0xe0, 0xf3, 
        0x6b, 0xfb}}, <No data fields>}}
$2 = 0x2
$3 = {<base_blob<256u>> = {static WIDTH = 0x20, data = {0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 
      0x8f, 0xd0, 0xa1, 0x6c, 0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 
      0xc0}}, <No data fields>}
1214	        ss << hashSequence;
1218	        ss << txTo.vin[nIn].prevout;
Breakpoint 1 at 0x7f8779b98a1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7f8779b770f8: file rpc/rawtransaction.cpp, line 962.
Breakpoint 3 at 0x7f8779ee29b3: file key.cpp, line 197.
Breakpoint 4 at 0x7f8779ee2827: file key.cpp, line 179.
Breakpoint 5 at 0x7f8779b74653: file rpc/rawtransaction.cpp, line 726.
Breakpoint 6 at 0x7f8779dbf2eb: file wallet/rpcwallet.cpp, line 3260.
Breakpoint 7 at 0x7f8779f0c02e: file script/sign.cpp, line 150.
Breakpoint 8 at 0x7f8779f5b72b: file script/interpreter.cpp, line 1182.
Continuing.
[Switching to Thread 0x7f876f7fe700 (LWP 1986)]

Breakpoint 1, CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
964	    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);
967	    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)
1025	    if (!IsDeprecatedRPCEnabled("signrawtransaction")) {
1031	    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);
1034	    JSONRPCRequest new_request;
1035	    new_request.id = request.id;
1036	    new_request.params.setArray();
1039	    if (!request.params[2].isNull()) {
1040	        new_request.params.push_back(request.params[0]);
1042	        new_request.params.push_back(request.params[2]);
1043	        new_request.params.push_back(request.params[1]);
1044	        new_request.params.push_back(request.params[3]);
1045	        return signrawtransactionwithkey(new_request);

Breakpoint 4, CKey::GetPubKey (this=0x7f876f7fd0b0) at key.cpp:179
warning: Source file is more recent than executable.
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 5, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 7, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 8, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 3, CKey::Sign (this=0x7f876f7fc220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:197
197	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f876f7fc2b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 8, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 8, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fc768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.
[Switching to Thread 0x7f876effd700 (LWP 1987)]

Breakpoint 1, CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Breakpoint 9 at 0x7f8779b7686f: file rpc/rawtransaction.cpp, line 883.
Continuing.

Breakpoint 9, signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:883
883	{
884	    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)
940	    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);
942	    CMutableTransaction mtx;
943	    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {
947	    CBasicKeyStore keystore;
948	    const UniValue& keys = request.params[1].get_array();
949	    for (unsigned int idx = 0; idx < keys.size(); ++idx) {
950	        UniValue k = keys[idx];
$1 = (const UniValue &) @0x7f8750001708: {typ = 0x2, val = "", keys = std::vector of length 0, capacity 0, 
  values = std::vector of length 1, capacity 1 = {{typ = 0x3, val = "cVSKEzHXxJ8pJcMB1BX6H6wPXG9ZPDKZQwtqBe9uvjDxoZwjySXg", 
      keys = std::vector of length 0, capacity 0, values = std::vector of length 0, capacity 0}}}
951	        CKey key = DecodeSecret(k.get_str());
$2 = (const UniValue &) @0x7f8750001708: {typ = 0x2, val = "", keys = std::vector of length 0, capacity 0, 
  values = std::vector of length 1, capacity 1 = {{typ = 0x3, val = "cVSKEzHXxJ8pJcMB1BX6H6wPXG9ZPDKZQwtqBe9uvjDxoZwjySXg", 
      keys = std::vector of length 0, capacity 0, values = std::vector of length 0, capacity 0}}}
$3 = (const UniValue &) @0x7f8750001708: {
  typ = 0x2, 
  val = "", 
  keys = std::vector of length 0, capacity 0, 
  values = std::vector of length 1, capacity 1 = {{
      typ = 0x3, 
      val = "cVSKEzHXxJ8pJcMB1BX6H6wPXG9ZPDKZQwtqBe9uvjDxoZwjySXg", 
      keys = std::vector of length 0, capacity 0, 
      values = std::vector of length 0, capacity 0
    }}
}
Breakpoint 10 at 0x7f8779ee4eb3: file key_io.cpp, line 149.

Breakpoint 10, DecodeSecret (str="cVSKEzHXxJ8pJcMB1BX6H6wPXG9ZPDKZQwtqBe9uvjDxoZwjySXg") at key_io.cpp:149
149	{
150	    CKey key;
151	    std::vector<unsigned char> data;
152	    if (DecodeBase58Check(str, data)) {
153	        const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);
154	        if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&
155	            std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {
154	        if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&
156	            bool compressed = data.size() == 33 + privkey_prefix.size();
157	            key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);
160	    memory_cleanse(data.data(), data.size());
161	    return key;
$4 = {
  static PRIVATE_KEY_SIZE = 0x117, 
  static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, 
  fValid = 0x1, 
  fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}
}
151	    std::vector<unsigned char> data;
161	    return key;
162	}
signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:952
952	        if (!key.IsValid()) {
955	        keystore.AddKey(key);

Breakpoint 4, CKey::GetPubKey (this=0x7f876effc0b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
No symbol "keystore" in current context.
Function "AddKeyPubKey" not defined.
Make breakpoint pending on future shared library load? (y or [n]) Breakpoint 11 at 0x7f8779ee7f91: file keystore.cpp, line 56.
180	    assert(fValid);
182	    size_t clen = CPubKey::PUBLIC_KEY_SIZE;
184	    CPubKey result;
#0  CKey::GetPubKey (this=0x7f876effc0b0) at key.cpp:184
#1  0x00007f8779ee7b43 in CKeyStore::AddKey (this=0x7f876effc230, key=...) at keystore.cpp:11
#2  0x00007f8779b76e1a in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:955
#3  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#4  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#5  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001330) at httprpc.cpp:191
#6  0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#7  0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001d40, __args#0=0x7f8758001330, __args#1="") at /usr/include/c++/6/functional:2127
#8  0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001d10) at httpserver.cpp:53
#9  0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#10 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#11 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d748) at /usr/include/c++/6/functional:1391
#12 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d748) at /usr/include/c++/6/functional:1380
#13 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d740) at /usr/include/c++/6/thread:197
#14 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007f877729b494 in start_thread (arg=0x7f876effd700) at pthread_create.c:333
#16 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
#0  CKey::GetPubKey (this=0x7f876effc0b0) at key.cpp:184
184	    CPubKey result;
185	    int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());
$5 = {
  static PRIVATE_KEY_SIZE = 0x117, 
  static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, 
  fValid = 0x1, 
  fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}
}
186	    assert(ret);
$6 = {
  data = {0xaf, 0x4d, 0xc9, 0x75, 0xc2, 0xcc, 0x76, 0x67, 0x8e, 0xc8, 0x32, 0x8c, 0xe4, 0xa4, 0xa5, 0x53, 0xd0, 0x4, 0x5d, 
    0x3c, 0xca, 0x8b, 0x4, 0x0, 0xcf, 0x5a, 0xa5, 0xaa, 0x7d, 0x7, 0xc7, 0xb9, 0x24, 0xf4, 0x94, 0xa7, 0xf6, 0xd3, 0xa5, 0xf2, 
    0xe4, 0xb0, 0x69, 0x74, 0xd8, 0xc7, 0x5, 0xd2, 0x4f, 0x63, 0x3c, 0x58, 0xa9, 0x97, 0x37, 0xb4, 0xbc, 0x3e, 0xfb, 0xa3, 
    0xbe, 0x9d, 0x3a, 0x47}
}
187	    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);
188	    assert(result.size() == clen);
$7 = {
  data = {0xaf, 0x4d, 0xc9, 0x75, 0xc2, 0xcc, 0x76, 0x67, 0x8e, 0xc8, 0x32, 0x8c, 0xe4, 0xa4, 0xa5, 0x53, 0xd0, 0x4, 0x5d, 
    0x3c, 0xca, 0x8b, 0x4, 0x0, 0xcf, 0x5a, 0xa5, 0xaa, 0x7d, 0x7, 0xc7, 0xb9, 0x24, 0xf4, 0x94, 0xa7, 0xf6, 0xd3, 0xa5, 0xf2, 
    0xe4, 0xb0, 0x69, 0x74, 0xd8, 0xc7, 0x5, 0xd2, 0x4f, 0x63, 0x3c, 0x58, 0xa9, 0x97, 0x37, 0xb4, 0xbc, 0x3e, 0xfb, 0xa3, 
    0xbe, 0x9d, 0x3a, 0x47}
}
No symbol "reult" in current context.
$8 = {
  static PUBLIC_KEY_SIZE = 0x41, 
  static COMPRESSED_PUBLIC_KEY_SIZE = 0x21, 
  static SIGNATURE_SIZE = 0x48, 
  static COMPACT_SIGNATURE_SIZE = 0x41, 
  vch = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 
    0xe4, 0x8c, 0x32, 0xc8, 0x8e, 0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf, 0x0 <repeats 32 times>}
}
189	    assert(result.IsValid());
194	    return result;
195	}

Breakpoint 11, CBasicKeyStore::AddKeyPubKey (this=0x7f876effc230, key=..., pubkey=...) at keystore.cpp:56
56	{
57	    LOCK(cs_KeyStore);
58	    mapKeys[pubkey.GetID()] = key;
$9 = (const CKey &) @0x7f876effc0b0: {
  static PRIVATE_KEY_SIZE = 0x117, 
  static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, 
  fValid = 0x1, 
  fCompressed = 0x1, 
  keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 0xa4, 
    0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 0x20}
}
$10 = (const CPubKey &) @0x7f876effc020: {
  static PUBLIC_KEY_SIZE = 0x41, 
  static COMPRESSED_PUBLIC_KEY_SIZE = 0x21, 
  static SIGNATURE_SIZE = 0x48, 
  static COMPACT_SIGNATURE_SIZE = 0x41, 
  vch = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 
    0xe4, 0x8c, 0x32, 0xc8, 0x8e, 0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf, 0x0 <repeats 32 times>}
}
A syntax error in expression, near `'.
$11 = {
  <uint160> = {
    <base_blob<160u>> = {
      static WIDTH = 0x14, 
      data = {0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 0x2a, 
        0xa3}
    }, <No data fields>}, <No data fields>}
Function "ImplicitlyLearnRelatedKeyScripts" not defined.
Make breakpoint pending on future shared library load? (y or [n]) Breakpoint 12 at 0x7f8779ee7b8c: file keystore.cpp, line 15.
59	    ImplicitlyLearnRelatedKeyScripts(pubkey);

Breakpoint 12, CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts (this=0x7f876effc230, pubkey=...) at keystore.cpp:15
15	{
16	    AssertLockHeld(cs_KeyStore);
17	    CKeyID key_id = pubkey.GetID();
19	    assert(HaveKey(key_id) || mapWatchKeys.count(key_id));
$12 = {
  <uint160> = {
    <base_blob<160u>> = {
      static WIDTH = 0x14, 
      data = {0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 0x2a, 
        0xa3}
    }, <No data fields>}, <No data fields>}
31	    if (pubkey.IsCompressed()) {
32	        CScript script = GetScriptForDestination(WitnessV0KeyHash(key_id));
34	        CScriptID id(script);
35	        mapScripts[id] = std::move(script);
32	        CScript script = GetScriptForDestination(WitnessV0KeyHash(key_id));
37	}
$13 = std::map with 1 elements = {
  [{
    <uint160> = {
      <base_blob<160u>> = {
        static WIDTH = 0x14, 
        data = {0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 
          0x79, 0xc8}
      }, <No data fields>}, <No data fields>}] = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x16, 
      _union = {
        direct = {0x0, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
          0x1e, 0xd2, 0x2a, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x2f681400, 
          indirect = 0x89447f433c471f95
        }
      }
    }, <No data fields>}
}
CBasicKeyStore::AddKeyPubKey (this=0x7f876effc230, key=..., pubkey=...) at keystore.cpp:60
60	    return true;
57	    LOCK(cs_KeyStore);
60	    return true;
61	}
CKeyStore::AddKey (this=0x7f876effc230, key=...) at keystore.cpp:12
12	}
signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:951
951	        CKey key = DecodeSecret(k.get_str());
950	        UniValue k = keys[idx];
949	    for (unsigned int idx = 0; idx < keys.size(); ++idx) {
958	    return SignTransaction(mtx, request.params[2], &keystore, true, request.params[3]);

Breakpoint 5, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876effc230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
728	    CCoinsView viewDummy;
$14 = (CMutableTransaction &) @0x7f876effc0d0: {
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 
              0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
          }, <No data fields>}, 
        n = 0x0
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x0 <repeats 28 times>}, 
            {
              capacity = 0x0, 
              indirect = 0x0
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 2, capacity 2 = {{
      nValue = 0x80172340, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }, {
      nValue = 0xa9df8c80, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 
              0x4a, 0x4a, 0xc7, 0xb7, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x986214a9, 
              indirect = 0x4845309d352ba53e
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0
}
$15 = 0x7f876effc230
$16 = {
  <CKeyStore> = {
    _vptr.CKeyStore = 0x7f877a551378 <vtable for CBasicKeyStore+16>, 
    cs_KeyStore = {
      <AnnotatedMixin<std::recursive_mutex>> = {
        <std::recursive_mutex> = {
          <std::__recursive_mutex_base> = {
            _M_mutex = {
              __data = {
                __lock = 0x0, 
                __count = 0x0, 
                __owner = 0x0, 
                __nusers = 0x0, 
                __kind = 0x1, 
                __spins = 0x0, 
                __elision = 0x0, 
                __list = {
                  __prev = 0x0, 
                  __next = 0x0
                }
              }, 
              __size = {0x0 <repeats 16 times>, 0x1, 0x0 <repeats 23 times>}, 
              __align = 0x0
            }
          }, <No data fields>}, <No data fields>}, <No data fields>}
  }, 
  members of CBasicKeyStore: 
  mapKeys = std::map with 1 elements = {
    [{
      <uint160> = {
        <base_blob<160u>> = {
          static WIDTH = 0x14, 
          data = {0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 
            0x2a, 0xa3}
        }, <No data fields>}, <No data fields>}] = {
      static PRIVATE_KEY_SIZE = 0x117, 
      static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, 
      fValid = 0x1, 
      fCompressed = 0x1, 
      keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 
        0xa4, 0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 
        0x20}
    }
  }, 
  mapWatchKeys = std::map with 0 elements, 
  mapScripts = std::map with 1 elements = {
    [{
      <uint160> = {
        <base_blob<160u>> = {
          static WIDTH = 0x14, 
          data = {0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 
            0x79, 0xc8}
        }, <No data fields>}, <No data fields>}] = {
      <prevector<28u, unsigned char, unsigned int, int>> = {
        _size = 0x16, 
        _union = {
          direct = {0x0, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
            0x1e, 0xd2, 0x2a, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
          {
            capacity = 0x2f681400, 
            indirect = 0x89447f433c471f95
          }
        }
      }, <No data fields>}
  }, 
  setWatchOnly = std::set with 0 elements
}
729	    CCoinsViewCache view(&viewDummy);
Undefined command: "nbt".  Try "help".
#0  SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876effc230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:729
#1  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#2  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#3  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#4  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001330) at httprpc.cpp:191
#5  0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#6  0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001d40, __args#0=0x7f8758001330, __args#1="") at /usr/include/c++/6/functional:2127
#7  0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001d10) at httpserver.cpp:53
#8  0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#9  0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#10 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d748) at /usr/include/c++/6/functional:1391
#11 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d748) at /usr/include/c++/6/functional:1380
#12 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d740) at /usr/include/c++/6/thread:197
#13 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#14 0x00007f877729b494 in start_thread (arg=0x7f876effd700) at pthread_create.c:333
#15 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
731	        LOCK2(cs_main, mempool.cs);
$17 = 0x7f876effc230
$18 = {
  <CKeyStore> = {
    _vptr.CKeyStore = 0x7f877a551378 <vtable for CBasicKeyStore+16>, 
    cs_KeyStore = {
      <AnnotatedMixin<std::recursive_mutex>> = {
        <std::recursive_mutex> = {
          <std::__recursive_mutex_base> = {
            _M_mutex = {
              __data = {
                __lock = 0x0, 
                __count = 0x0, 
                __owner = 0x0, 
                __nusers = 0x0, 
                __kind = 0x1, 
                __spins = 0x0, 
                __elision = 0x0, 
                __list = {
                  __prev = 0x0, 
                  __next = 0x0
                }
              }, 
              __size = {0x0 <repeats 16 times>, 0x1, 0x0 <repeats 23 times>}, 
              __align = 0x0
            }
          }, <No data fields>}, <No data fields>}, <No data fields>}
  }, 
  members of CBasicKeyStore: 
  mapKeys = std::map with 1 elements = {
    [{
      <uint160> = {
        <base_blob<160u>> = {
          static WIDTH = 0x14, 
          data = {0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 
            0x2a, 0xa3}
        }, <No data fields>}, <No data fields>}] = {
      static PRIVATE_KEY_SIZE = 0x117, 
      static COMPRESSED_PRIVATE_KEY_SIZE = 0xd6, 
      fValid = 0x1, 
      fCompressed = 0x1, 
      keydata = std::vector of length 32, capacity 32 = {0xea, 0x62, 0x8a, 0xe2, 0x4b, 0xa, 0x68, 0x52, 0xfc, 0x55, 0xf8, 
        0xa4, 0xb, 0xf0, 0x7f, 0xa9, 0xa9, 0xe3, 0xbe, 0x78, 0xd7, 0x63, 0x59, 0x67, 0x1f, 0x2c, 0x4a, 0xa2, 0xe6, 0x95, 0xca, 
        0x20}
    }
  }, 
  mapWatchKeys = std::map with 0 elements, 
  mapScripts = std::map with 1 elements = {
    [{
      <uint160> = {
        <base_blob<160u>> = {
          static WIDTH = 0x14, 
          data = {0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 
            0x79, 0xc8}
        }, <No data fields>}, <No data fields>}] = {
      <prevector<28u, unsigned char, unsigned int, int>> = {
        _size = 0x16, 
        _union = {
          direct = {0x0, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
            0x1e, 0xd2, 0x2a, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
          {
            capacity = 0x2f681400, 
            indirect = 0x89447f433c471f95
          }
        }
      }, <No data fields>}
  }, 
  setWatchOnly = std::set with 0 elements
}
732	        CCoinsViewCache &viewChain = *pcoinsTip;
733	        CCoinsViewMemPool viewMempool(&viewChain, mempool);
734	        view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view
736	        for (const CTxIn& txin : mtx.vin) {
737	            view.AccessCoin(txin.prevout); // Load entries from viewChain into view; can fail.
736	        for (const CTxIn& txin : mtx.vin) {
740	        view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long
$19 = {
  <CCoinsViewBacked> = {
    <CCoinsView> = {
      _vptr.CCoinsView = 0x7f877a551270 <vtable for CCoinsViewCache+16>
    }, 
    members of CCoinsViewBacked: 
    base = 0x7f876effb750
  }, 
  members of CCoinsViewCache: 
  hashBlock = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x0 <repeats 32 times>}
    }, <No data fields>}, 
  cacheCoins = std::unordered_map with 1 elements = {
    [{
      hash = {
        <base_blob<256u>> = {
          static WIDTH = 0x20, 
          data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 
            0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
        }, <No data fields>}, 
      n = 0x0
    }] = {
      coin = {
        out = {
          nValue = 0x12a05f200, 
          scriptPubKey = {
            <prevector<28u, unsigned char, unsigned int, int>> = {
              _size = 0x17, 
              _union = {
                direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
                  0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
                {
                  capacity = 0x7a0714a9, 
                  indirect = 0x71f2af7e703d4c41
                }
              }
            }, <No data fields>}
        }, 
        fCoinBase = 0x1, 
        nHeight = 0x55
      }, 
      flags = 0x0
    }
  }, 
  cachedCoinsUsage = 0x0
}
733	        CCoinsViewMemPool viewMempool(&viewChain, mempool);
731	        LOCK2(cs_main, mempool.cs);
744	    if (!prevTxsUnival.isNull()) {
745	        UniValue prevTxs = prevTxsUnival.get_array();
746	        for (unsigned int idx = 0; idx < prevTxs.size(); ++idx) {
745	        UniValue prevTxs = prevTxsUnival.get_array();
812	    int nHashType = SIGHASH_ALL;
813	    if (!hashType.isNull()) {
830	    bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);
833	    UniValue vErrors(UniValue::VARR);
837	    const CTransaction txConst(mtx);
839	    for (unsigned int i = 0; i < mtx.vin.size(); i++) {
840	        CTxIn& txin = mtx.vin[i];
841	        const Coin& coin = view.AccessCoin(txin.prevout);
842	        if (coin.IsSpent()) {
846	        const CScript& prevPubKey = coin.out.scriptPubKey;
847	        const CAmount& amount = coin.out.nValue;
849	        SignatureData sigdata;
851	        if (!fHashSingle || (i < mtx.vout.size())) {
853	            ProduceSignature(MutableTransactionSignatureCreator(keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);

Breakpoint 7, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
151	    std::vector<valtype> result;
155	    bool solved = SignStep(creator, fromPubKey, result, whichType, SIGVERSION_BASE);
$20 = (const CScript &) @0x7f8750000b28: {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x17, 
    _union = {
      direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 
        0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
      {
        capacity = 0x7a0714a9, 
        indirect = 0x71f2af7e703d4c41
      }
    }
  }, <No data fields>}
$21 = (SignatureData &) @0x7f876effbf50: {
  scriptSig = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x0, 
      _union = {
        direct = {0x0 <repeats 28 times>}, 
        {
          capacity = 0x0, 
          indirect = 0x0
        }
      }
    }, <No data fields>}, 
  scriptWitness = {
    stack = std::vector of length 0, capacity 0
  }
}
156	    bool P2SH = false;
157	    CScript subscript;
158	    sigdata.scriptWitness.stack.clear();
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00007f8779b98a1f in CRPCTable::execute(JSONRPCRequest const&) const at rpc/server.cpp:473
	breakpoint already hit 2 times
2       breakpoint     keep y   0x00007f8779b770f8 in signrawtransaction(JSONRPCRequest const&) at rpc/rawtransaction.cpp:962
	breakpoint already hit 2 times
3       breakpoint     keep y   0x00007f8779ee29b3 in CKey::Sign(uint256 const&, std::vector<unsigned char, std::allocator<unsigned char> >&, unsigned int) const at key.cpp:197
	breakpoint already hit 1 time
4       breakpoint     keep y   0x00007f8779ee2827 in CKey::GetPubKey() const at key.cpp:179
	breakpoint already hit 3 times
5       breakpoint     keep y   0x00007f8779b74653 in SignTransaction(CMutableTransaction&, UniValue const&, CBasicKeyStore*, bool, UniValue const&) at rpc/rawtransaction.cpp:726
	breakpoint already hit 2 times
6       breakpoint     keep y   0x00007f8779dbf2eb in signrawtransactionwithwallet(JSONRPCRequest const&) 
                                                   at wallet/rpcwallet.cpp:3260
7       breakpoint     keep y   0x00007f8779f0c02e in ProduceSignature(BaseSignatureCreator const&, CScript const&, SignatureData&) at script/sign.cpp:150
	breakpoint already hit 2 times
8       breakpoint     keep y   0x00007f8779f5b72b in SignatureHash(CScript const&, CTransaction const&, unsigned int, int, long const&, SigVersion, PrecomputedTransactionData const*) at script/interpreter.cpp:1182
	breakpoint already hit 3 times
9       breakpoint     keep y   0x00007f8779b7686f in signrawtransactionwithkey(JSONRPCRequest const&) 
                                                   at rpc/rawtransaction.cpp:883
	breakpoint already hit 1 time
10      breakpoint     keep y   0x00007f8779ee4eb3 in DecodeSecret(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) at key_io.cpp:149
	breakpoint already hit 1 time
11      breakpoint     keep y   0x00007f8779ee7f91 in CBasicKeyStore::AddKeyPubKey(CKey const&, CPubKey const&) 
                                                   at keystore.cpp:56
	breakpoint already hit 1 time
12      breakpoint     keep y   0x00007f8779ee7b8c in CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(CPubKey const&) 
                                                   at keystore.cpp:15
	breakpoint already hit 1 time
Note: breakpoint 8 also set at pc 0x7f8779f5b72b.
Breakpoint 13 at 0x7f8779f5b72b: file script/interpreter.cpp, line 1182.
Continuing.

Breakpoint 8, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
#0  SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
#1  0x00007f8779f0b4d8 in TransactionSignatureCreator::CreateSig (this=0x7f876effbea0, 
    vchSig=std::vector of length 0, capacity 0, address=..., scriptCode=..., sigversion=SIGVERSION_WITNESS_V0)
    at script/sign.cpp:33
#2  0x00007f8779f0b5c5 in Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, 
    sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:47
#3  0x00007f8779f0b9cf in SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 1, 
    whichTypeRet=@0x7f876effb580: TX_PUBKEYHASH, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:96
#4  0x00007f8779f0c2a7 in ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:178
#5  0x00007f8779b75bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876effc230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#6  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#7  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#8  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#9  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001330) at httprpc.cpp:191
#10 0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#11 0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001d40, __args#0=0x7f8758001330, __args#1="") at /usr/include/c++/6/functional:2127
#12 0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001d10) at httpserver.cpp:53
#13 0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#14 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#15 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d748) at /usr/include/c++/6/functional:1391
#16 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d748) at /usr/include/c++/6/functional:1380
#17 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d740) at /usr/include/c++/6/thread:197
#18 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f877729b494 in start_thread (arg=0x7f876effd700) at pthread_create.c:333
#20 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
$22 = (const CScript &) @0x7f876effb5e0: {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x19, 
    _union = {
      direct = {0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
        0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 0x88, 0xac, 0x0, 0x0, 0x0}, 
      {
        capacity = 0x6814a976, 
        indirect = 0x447f433c471f952f
      }
    }
  }, <No data fields>}
No symbol "to" in current context.
$23 = (const CTransaction &) @0x7f876effbef0: {
  static CURRENT_VERSION = 0x2, 
  static MAX_STANDARD_VERSION = 0x2, 
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 
              0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
          }, <No data fields>}, 
        n = 0x0
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x0 <repeats 28 times>}, 
            {
              capacity = 0x0, 
              indirect = 0x0
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 2, capacity 2 = {{
      nValue = 0x80172340, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }, {
      nValue = 0xa9df8c80, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 
              0x4a, 0x4a, 0xc7, 0xb7, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x986214a9, 
              indirect = 0x4845309d352ba53e
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0, 
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0xce, 0x1b, 0x6a, 0x54, 0x79, 0xf8, 0x41, 0xf1, 0x77, 0x3c, 0xe6, 0xde, 0x15, 0xce, 0x19, 0xdb, 0x50, 0xf8, 
        0x4a, 0x4c, 0xfa, 0xe6, 0x73, 0x83, 0xdb, 0x97, 0x3a, 0x61, 0xe0, 0xf3, 0x6b, 0xfb}
    }, <No data fields>}
}
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
$24 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 0x96, 0x77, 0xd7, 0xca, 
      0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0}
  }, <No data fields>}
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
$25 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x3b, 0xb1, 0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 
      0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e, 0x70, 0x66, 0x50, 0x44}
  }, <No data fields>}
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
$26 = 0x2
$27 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0xad, 0xb2, 0xff, 0x6e, 0x87, 0x7f, 0x0, 0x0, 0x0, 0xbb, 0xc, 0x56, 0xe5, 0x6c, 0xe0, 0x6, 0xd0, 0xb1, 0xff, 
        0x6e, 0x87, 0x7f, 0x0, 0x0, 0xb, 0x83, 0xee, 0x79, 0x87, 0x7f, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x20, 0xb2, 0xff, 0x6e, 0x87, 0x7f, 0x0, 0x0, 0xf0, 0xb3, 0xff, 0x6e, 0x87, 0x7f, 0x0, 0x0, 0x30, 0xc2, 0xff, 0x6e, 
        0x87, 0x7f, 0x0, 0x0}, 
      bytes = 0x0, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1213	        ss << hashPrevouts;
$28 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x2, 0x0, 0x0, 0x0, 0x87, 0x7f, 0x0, 0x0, 0x0, 0xbb, 0xc, 0x56, 0xe5, 0x6c, 0xe0, 0x6, 0xd0, 0xb1, 0xff, 0x6e, 
        0x87, 0x7f, 0x0, 0x0, 0xb, 0x83, 0xee, 0x79, 0x87, 0x7f, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 
        0xb2, 0xff, 0x6e, 0x87, 0x7f, 0x0, 0x0, 0xf0, 0xb3, 0xff, 0x6e, 0x87, 0x7f, 0x0, 0x0, 0x30, 0xc2, 0xff, 0x6e, 0x87, 
        0x7f, 0x0, 0x0}, 
      bytes = 0x4, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$29 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 0x96, 0x77, 0xd7, 0xca, 
      0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0}
  }, <No data fields>}
$30 = 0x0
1214	        ss << hashSequence;
$31 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x2, 0x0, 0x0, 0x0, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 
        0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x0, 0x0, 0x0, 
        0x0, 0x20, 0xb2, 0xff, 0x6e, 0x87, 0x7f, 0x0, 0x0, 0xf0, 0xb3, 0xff, 0x6e, 0x87, 0x7f, 0x0, 0x0, 0x30, 0xc2, 0xff, 
        0x6e, 0x87, 0x7f, 0x0, 0x0}, 
      bytes = 0x24, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$32 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x3b, 0xb1, 0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 
      0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e, 0x70, 0x66, 0x50, 0x44}
  }, <No data fields>}
$33 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x3b, 0xb1, 0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 
      0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e, 0x70, 0x66, 0x50, 0x44}
  }, <No data fields>}
1218	        ss << txTo.vin[nIn].prevout;
$34 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 
        0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x3b, 0xb1, 
        0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 
        0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e}, 
      bytes = 0x44, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$35 = {
  sha = {
    s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
    buf = {0x70, 0x66, 0x50, 0x44, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 
      0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x3b, 0xb1, 0x30, 
      0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 
      0xb7, 0x22, 0x90, 0x79, 0x5e}, 
    bytes = 0x44, 
    static OUTPUT_SIZE = 0x20
  }, 
  static OUTPUT_SIZE = 0x20
}
There is no member or method named s.
$36 = {0x70, 0x66, 0x50, 0x44, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 0x96, 
  0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x3b, 0xb1, 0x30, 0x29, 
  0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 
  0x90, 0x79, 0x5e}
Item count other than 1 is meaningless in "print" command.
Size letters are meaningless in "print" command.
$37 = {0x70, 0x66, 0x50, 0x44, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 0x96, 
  0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x3b, 0xb1, 0x30, 0x29, 
  0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 
  0x90, 0x79, 0x5e}
$38 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 
        0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x3b, 0xb1, 
        0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 
        0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e}, 
      bytes = 0x44, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$39 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x3b, 0xb1, 0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 
      0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e, 0x70, 0x66, 0x50, 0x44}
  }, <No data fields>}
1221	        ss << scriptCode;
$40 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 
        0xee, 0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 
        0x0, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 
        0xb7, 0x22, 0x90, 0x79, 0x5e}, 
      bytes = 0x68, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$41 = {
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
        0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
    }, <No data fields>}, 
  n = 0x0
}
$42 = {0x70, 0x66, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
  0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 0xce, 
  0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 
  0x79, 0x5e}
0x7f876effb150:	0x44506670	0x2c8bcd00	0x854e36b2	0x5ada7f90
0x7f876effb160:	0xee524ea9	0x7bd9bb29	0x8014af12	0x2f7b215f
0x7f876effb170:	0x45a88f2a	0x00000000	0x551f7bce	0x47e7f59e
0x7f876effb180:	0x9f43acfc	0xeca25514	0xb7095f7c	0x5e799022
0x7f876effb190:	0x00000068	0x00000000	0x00000004	0x00000000
0x7f876effb1a0:	0x6effc238	0x00007f87	0x560cbb00	0x06e06ce5
0x7f876effb1b0:	0x00000000	0x00000000	0x6effc230	0x00007f87
0x7f876effb1c0:	0x6effb280	0x00007f87	0x79f0b4d8	0x00007f87
0x7f876effb1d0:	0x00000001	0x00000000	0x00000000	0x00000000
0x7f876effb1e0:	0x6effb2a4	0x00007f87	0x560cbb00	0x00000001
0x7f876effb1f0:	0x6effb5e0	0x00007f87	0x6effb3f0	0x00007f87
0x7f876effb200:	0x6effb2c0	0x00007f87	0x6effbea0	0x00007f87
0x7f876effb210:	0x00000000	0x00000000	0x560cbb00	0x06e06ce5
0x7f876effb220:	0x6eff0101	0x00007f87	0x7a382000	0x00007f87
0x7f876effb230:	0x7a382020	0x00007f87	0x7a382020	0x00007f87
0x7f876effb240:	0x50000cb0	0x00007f87	0x560cbb00	0x06e06ce5
0x7f876effb250:	0x6effb280	0x00007f87	0x799ea0b3	0x00007f87
0x7f876effb260:	0x6effb290	0x00007f87	0x560cbb00	0x06e06ce5
0x7f876effb270:	0x50000bf8	0x00007f87	0x00000000	0x00000000
0x7f876effb280:	0x6effb2f0	0x00007f87	0x79f0b5c5	0x00007f87
0x7f876effb290:	0x6effb2c0	0x00007f87	0x79f61677	0x00000001
0x7f876effb2a0:	0x6effb520	0x00007f87	0x6effb5e0	0x00007f87
0x7f876effb2b0:	0x6effbea0	0x00007f87	0x6effb3f0	0x00007f87
0x7f876effb2c0:	0x00000000	0x00000000	0x00000000	0x00000000
0x7f876effb2d0:	0x00000000	0x00000000	0x560cbb00	0x06e06ce5
0x7f876effb150:	0x70	0x66	0x50	0x44	0x00	0xcd	0x8b	0x2c
0x7f876effb158:	0xb2	0x36	0x4e	0x85	0x90	0x7f	0xda	0x5a
0x7f876effb160:	0xa9	0x4e	0x52	0xee	0x29	0xbb	0xd9	0x7b
0x7f876effb168:	0x12	0xaf	0x14	0x80	0x5f	0x21	0x7b	0x2f
0x7f876effb170:	0x2a	0x8f	0xa8	0x45	0x00	0x00	0x00	0x00
0x7f876effb178:	0xce	0x7b	0x1f	0x55	0x9e	0xf5	0xe7	0x47
0x7f876effb180:	0xfc	0xac	0x43	0x9f	0x14	0x55	0xa2	0xec
0x7f876effb188:	0x7c	0x5f	0x09	0xb7	0x22	0x90	0x79	0x5e
0x7f876effb190:	0x68	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x7f876effb198:	0x04	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x7f876effb1a0:	0x38	0xc2	0xff	0x6e	0x87	0x7f	0x00	0x00
0x7f876effb1a8:	0x00	0xbb	0x0c	0x56	0xe5	0x6c	0xe0	0x06
0x7f876effb1b0:	0x00	0x00	0x00	0x00
$43 = {0x70, 0x66, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
  0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 0xce, 
  0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 
  0x79, 0x5e}
0x7f876effb150:	0x70	0x66	0x50	0x44	0x00	0xcd	0x8b	0x2c
0x7f876effb158:	0xb2	0x36	0x4e	0x85	0x90	0x7f	0xda	0x5a
0x7f876effb160:	0xa9	0x4e	0x52	0xee	0x29	0xbb	0xd9	0x7b
0x7f876effb168:	0x12	0xaf	0x14	0x80	0x5f	0x21	0x7b	0x2f
0x7f876effb170:	0x2a	0x8f	0xa8	0x45	0x00	0x00	0x00	0x00
0x7f876effb178:	0xce	0x7b	0x1f	0x55	0x9e	0xf5	0xe7	0x47
0x7f876effb180:	0xfc	0xac	0x43	0x9f	0x14	0x55	0xa2	0xec
0x7f876effb188:	0x7c	0x5f	0x09	0xb7	0x22	0x90	0x79	0x5e
0x7f876effb190:	0x68	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x7f876effb198:	0x04	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x7f876effb1a0:	0x38	0xc2	0xff	0x6e	0x87	0x7f	0x00	0x00
0x7f876effb1a8:	0x00	0xbb	0x0c	0x56	0xe5	0x6c	0xe0	0x06
0x7f876effb1b0:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
$44 = {0x70, 0x66, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
  0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 0xce, 
  0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 
  0x79, 0x5e}
$45 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 
        0xee, 0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 
        0x0, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 
        0xb7, 0x22, 0x90, 0x79, 0x5e}, 
      bytes = 0x68, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$46 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 
        0xee, 0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 
        0x0, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 
        0xb7, 0x22, 0x90, 0x79, 0x5e}, 
      bytes = 0x68, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1222	        ss << amount;
1223	        ss << txTo.vin[nIn].nSequence;
$47 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
        0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 
        0x19, 0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
        0x1e, 0xd2, 0x2a, 0xa3}, 
      bytes = 0x8a, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$48 = {
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
        0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
    }, <No data fields>}, 
  n = 0x0
}
$49 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x3b, 0xb1, 0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 
      0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e, 0x70, 0x66, 0x50, 0x44}
  }, <No data fields>}
$50 = (const CScript &) @0x7f876effb5e0: {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x19, 
    _union = {
      direct = {0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
        0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 0x88, 0xac, 0x0, 0x0, 0x0}, 
      {
        capacity = 0x6814a976, 
        indirect = 0x447f433c471f952f
      }
    }
  }, <No data fields>}
$51 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
        0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 
        0x19, 0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
        0x1e, 0xd2, 0x2a, 0xa3}, 
      bytes = 0x8a, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1225	        ss << hashOutputs;
$52 = (const CAmount &) @0x7f876effbec0: 0x12a05f200
$53 = 0xffffffff
1227	        ss << txTo.nLockTime;
$54 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xdd, 0xc2, 0x89, 0x7e, 0xda, 0xc1, 0xd6, 0x7e, 0x87, 0x7c, 0x63, 0xcb, 0x51, 0xff, 0xa, 0x2b, 0xb3, 0xf6, 0xf0, 
      0xab, 0xbd, 0xaa, 0x5f, 0x66, 0xb6, 0x13, 0x86, 0xc8, 0x76, 0x4c, 0x1, 0x8b}
  }, <No data fields>}
Invalid character ';' in expression.
$55 = 0x0
1229	        ss << nHashType;
$56 = 0x1
1231	        return ss.GetHash();
$57 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x5a, 0x72, 0x9, 0x79, 0xcd, 0x61, 0xf9, 0x2f, 0xea, 0xfc, 0xe2, 0xd5, 0xbd, 0x44, 0x67, 0xb0, 0xf0, 0x7b, 0xfd, 
      0xa2, 0xb3, 0x66, 0x50, 0x5b, 0xa6, 0x4c, 0x72, 0x4d, 0x82, 0xf8, 0x40, 0xe8}
  }, <No data fields>}
1251	}
TransactionSignatureCreator::CreateSig (this=0x7f876effbea0, vchSig=std::vector of length 0, capacity 0, address=..., 
    scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:38
38	    if (!key.Sign(hash, vchSig))
$58 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x1c, 0x7, 0x12, 0x75, 0x72, 0x8f, 0xfa, 0xcb, 0x11, 0x27, 0x99, 0x68, 0x58, 0xc0, 0x3a, 0x5b, 0x18, 0x6b, 0x6d, 
      0x59, 0xe6, 0x76, 0x4e, 0x42, 0x5c, 0x21, 0x23, 0x88, 0xed, 0x63, 0xef, 0x6}
  }, <No data fields>}

Breakpoint 3, CKey::Sign (this=0x7f876effb220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:197
197	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
No symbol "has" in current context.
$59 = (const uint256 &) @0x7f876effb240: {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x1c, 0x7, 0x12, 0x75, 0x72, 0x8f, 0xfa, 0xcb, 0x11, 0x27, 0x99, 0x68, 0x58, 0xc0, 0x3a, 0x5b, 0x18, 0x6b, 0x6d, 
      0x59, 0xe6, 0x76, 0x4e, 0x42, 0x5c, 0x21, 0x23, 0x88, 0xed, 0x63, 0xef, 0x6}
  }, <No data fields>}
199	    if (!fValid)
201	    vchSig.resize(CPubKey::SIGNATURE_SIZE);
202	    size_t nSigLen = CPubKey::SIGNATURE_SIZE;
203	    unsigned char extra_entropy[32] = {0};
204	    WriteLE32(extra_entropy, test_case);
207	    int ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : nullptr);
$60 = (const uint256 &) @0x7f876effb240: {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x1c, 0x7, 0x12, 0x75, 0x72, 0x8f, 0xfa, 0xcb, 0x11, 0x27, 0x99, 0x68, 0x58, 0xc0, 0x3a, 0x5b, 0x18, 0x6b, 0x6d, 
      0x59, 0xe6, 0x76, 0x4e, 0x42, 0x5c, 0x21, 0x23, 0x88, 0xed, 0x63, 0xef, 0x6}
  }, <No data fields>}
208	    assert(ret);
210	    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, vchSig.data(), &nSigLen, &sig);
211	    vchSig.resize(nSigLen);
212	    return true;
$61 = std::vector of length 71, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xfd, 0x5e, 0x4e, 0xe7, 0x28, 0x71, 0x6b, 0x8a, 
  0x98, 0xca, 0x94, 0x7f, 0xc9, 0xf0, 0x38, 0xdf, 0xd1, 0x14, 0x7c, 0x1e, 0xc1, 0xda, 0x91, 0xc0, 0xc1, 0xd6, 0x26, 0x59, 
  0xd5, 0x6b, 0x4e, 0xb4, 0x2, 0x20, 0x61, 0xad, 0xfc, 0xb7, 0x7c, 0xd2, 0xbf, 0x7a, 0x57, 0x39, 0xf9, 0x26, 0x4e, 0xaf, 0x94, 
  0x4e, 0x38, 0xc7, 0x8a, 0x19, 0x23, 0x64, 0xe2, 0xf6, 0xc5, 0x81, 0x1, 0xd2, 0xc5, 0xae, 0xae, 0x31}
213	}
TransactionSignatureCreator::CreateSig (this=0x7f876effbea0, vchSig=std::vector of length 71, capacity 72 = {...}, 
    address=..., scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:40
40	    vchSig.push_back((unsigned char)nHashType);
41	    return true;
22	    CKey key;  // key中存放着私钥
42	}
Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, sigversion=SIGVERSION_WITNESS_V0)
    at script/sign.cpp:49
49	    ret.push_back(vchSig);
$62 = std::vector of length 72, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xfd, 0x5e, 0x4e, 0xe7, 0x28, 0x71, 0x6b, 0x8a, 
  0x98, 0xca, 0x94, 0x7f, 0xc9, 0xf0, 0x38, 0xdf, 0xd1, 0x14, 0x7c, 0x1e, 0xc1, 0xda, 0x91, 0xc0, 0xc1, 0xd6, 0x26, 0x59, 
  0xd5, 0x6b, 0x4e, 0xb4, 0x2, 0x20, 0x61, 0xad, 0xfc, 0xb7, 0x7c, 0xd2, 0xbf, 0x7a, 0x57, 0x39, 0xf9, 0x26, 0x4e, 0xaf, 0x94, 
  0x4e, 0x38, 0xc7, 0x8a, 0x19, 0x23, 0x64, 0xe2, 0xf6, 0xc5, 0x81, 0x1, 0xd2, 0xc5, 0xae, 0xae, 0x31, 0x1}
50	    return true;
46	    std::vector<unsigned char> vchSig;
51	}
SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f876effb580: TX_PUBKEYHASH, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:100
100	            CPubKey vch;
101	            creator.KeyStore().GetPubKey(keyID, vch);

Breakpoint 4, CKey::GetPubKey (this=0x7f876effb2b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
180	    assert(fValid);
182	    size_t clen = CPubKey::PUBLIC_KEY_SIZE;
184	    CPubKey result;
185	    int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());
186	    assert(ret);
187	    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);
188	    assert(result.size() == clen);
189	    assert(result.IsValid());
194	    return result;
195	}
CBasicKeyStore::GetPubKey (this=0x7f876effc230, address=..., vchPubKeyOut=...) at keystore.cpp:52
52	    return true;
41	    CKey key;
53	}
SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f876effb580: TX_PUBKEYHASH, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:102
102	            ret.push_back(ToByteVector(vch));
104	        return true;
80	    std::vector<valtype> vSolutions;
76	    CScript scriptRet;
131	}
ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:179
179	        sigdata.scriptWitness.stack = result;
180	        result.clear();
174	        CScript witnessscript;
180	        result.clear();
192	    if (P2SH) {
193	        result.push_back(std::vector<unsigned char>(subscript.begin(), subscript.end()));
195	    sigdata.scriptSig = PushAll(result);
198	    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());
$63 = std::vector of length 1, capacity 2 = {std::vector of length 22, capacity 22 = {0x0, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 
    0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 0x2a, 0xa3}}

Breakpoint 8, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
1213	        ss << hashPrevouts;
1214	        ss << hashSequence;
1218	        ss << txTo.vin[nIn].prevout;
1221	        ss << scriptCode;
1222	        ss << amount;
1223	        ss << txTo.vin[nIn].nSequence;
1225	        ss << hashOutputs;
1227	        ss << txTo.nLockTime;
1229	        ss << nHashType;
1231	        return ss.GetHash();
1251	}
TransactionSignatureChecker::CheckSig (this=0x7f876effbec8, vchSigIn=std::vector of length 72, capacity 72 = {...}, 
    vchPubKey=std::vector of length 33, capacity 33 = {...}, scriptCode=..., sigversion=SIGVERSION_WITNESS_V0)
    at script/interpreter.cpp:1273
1273	    if (!VerifySignature(vchSig, pubkey, sighash))
1274	        return false;
1265	    std::vector<unsigned char> vchSig(vchSigIn);
$64 = std::vector of length 72, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xfd, 0x5e, 0x4e, 0xe7, 0x28, 0x71, 0x6b, 0x8a, 
  0x98, 0xca, 0x94, 0x7f, 0xc9, 0xf0, 0x38, 0xdf, 0xd1, 0x14, 0x7c, 0x1e, 0xc1, 0xda, 0x91, 0xc0, 0xc1, 0xd6, 0x26, 0x59, 
  0xd5, 0x6b, 0x4e, 0xb4, 0x2, 0x20, 0x61, 0xad, 0xfc, 0xb7, 0x7c, 0xd2, 0xbf, 0x7a, 0x57, 0x39, 0xf9, 0x26, 0x4e, 0xaf, 0x94, 
  0x4e, 0x38, 0xc7, 0x8a, 0x19, 0x23, 0x64, 0xe2, 0xf6, 0xc5, 0x81, 0x1, 0xd2, 0xc5, 0xae, 0xae, 0x31, 0x1}
1277	}
EvalScript (stack=std::vector of length 2, capacity 4 = {...}, script=..., flags=65503, checker=..., 
    sigversion=SIGVERSION_WITNESS_V0, serror=0x0) at script/interpreter.cpp:903
903	                    if (!fSuccess && (flags & SCRIPT_VERIFY_NULLFAIL) && vchSig.size())
904	                        return set_error(serror, SCRIPT_ERR_SIG_NULLFAIL);
884	                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);
269	    std::vector<valtype> altstack;
268	    std::vector<bool> vfExec;
267	    valtype vchPushValue;
1045	}
VerifyWitnessProgram (witness=..., witversion=0, program=std::vector of length 20, capacity 20 = {...}, flags=65503, 
    checker=..., serror=0x0) at script/interpreter.cpp:1403
1403	        return false;
1364	    CScript scriptPubKey;
1363	    std::vector<std::vector<unsigned char> > stack;
1412	}
VerifyScript (scriptSig=..., scriptPubKey=..., witness=0x7f876effbf70, flags=65503, checker=..., serror=0x0)
    at script/interpreter.cpp:1498
1498	                    return false;
1466	            return set_error(serror, SCRIPT_ERR_SIG_PUSHONLY);
1444	    std::vector<unsigned char> witnessprogram;
1428	    std::vector<std::vector<unsigned char> > stack, stackCopy;
1531	}
ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:157
157	    CScript subscript;
151	    std::vector<valtype> result;
198	    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());
199	}
SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876effc230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:856
856	        sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i));
858	        UpdateTransaction(mtx, i, sigdata);
$65 = {
  scriptSig = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x17, 
      _union = {
        direct = {0x16, 0x0, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
          0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x68140016, 
          indirect = 0x447f433c471f952f
        }
      }
    }, <No data fields>}, 
  scriptWitness = {
    stack = std::vector of length 2, capacity 2 = {std::vector of length 72, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xfd, 
        0x5e, 0x4e, 0xe7, 0x28, 0x71, 0x6b, 0x8a, 0x98, 0xca, 0x94, 0x7f, 0xc9, 0xf0, 0x38, 0xdf, 0xd1, 0x14, 0x7c, 0x1e, 
        0xc1, 0xda, 0x91, 0xc0, 0xc1, 0xd6, 0x26, 0x59, 0xd5, 0x6b, 0x4e, 0xb4, 0x2, 0x20, 0x61, 0xad, 0xfc, 0xb7, 0x7c, 0xd2, 
        0xbf, 0x7a, 0x57, 0x39, 0xf9, 0x26, 0x4e, 0xaf, 0x94, 0x4e, 0x38, 0xc7, 0x8a, 0x19, 0x23, 0x64, 0xe2, 0xf6, 0xc5, 
        0x81, 0x1, 0xd2, 0xc5, 0xae, 0xae, 0x31, 0x1}, std::vector of length 33, capacity 33 = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 
        0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 0xe4, 0x8c, 0x32, 0xc8, 0x8e, 
        0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf}}
  }
}
A debugging session is active.

	Inferior 1 [process 1980] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 1980
Function "break    SignatureHash" not defined.
Make breakpoint pending on future shared library load? (y or [n]) Breakpoint 1 at 0x7f8779f5b72b: file script/interpreter.cpp, line 1182.
Continuing.
[Switching to Thread 0x7f876f7fe700 (LWP 1986)]

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
1213	        ss << hashPrevouts;
1214	        ss << hashSequence;
1218	        ss << txTo.vin[nIn].prevout;
1221	        ss << scriptCode;
1222	        ss << amount;
1223	        ss << txTo.vin[nIn].nSequence;
1225	        ss << hashOutputs;
1227	        ss << txTo.nLockTime;
1229	        ss << nHashType;
1231	        return ss.GetHash();
$1 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x5a, 0x72, 0x9, 0x79, 0xcd, 0x61, 0xf9, 0x2f, 0xea, 0xfc, 0xe2, 0xd5, 0xbd, 0x44, 0x67, 0xb0, 0xf0, 0x7b, 0xfd, 
      0xa2, 0xb3, 0x66, 0x50, 0x5b, 0xa6, 0x4c, 0x72, 0x4d, 0x82, 0xf8, 0x40, 0xe8}
  }, <No data fields>}
1251	}
TransactionSignatureCreator::CreateSig (this=0x7f876f7fcea0, vchSig=std::vector of length 0, capacity 0, address=..., 
    scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:38
38	    if (!key.Sign(hash, vchSig))
$2 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x1c, 0x7, 0x12, 0x75, 0x72, 0x8f, 0xfa, 0xcb, 0x11, 0x27, 0x99, 0x68, 0x58, 0xc0, 0x3a, 0x5b, 0x18, 0x6b, 0x6d, 
      0x59, 0xe6, 0x76, 0x4e, 0x42, 0x5c, 0x21, 0x23, 0x88, 0xed, 0x63, 0xef, 0x6}
  }, <No data fields>}
#0  TransactionSignatureCreator::CreateSig (this=0x7f876f7fcea0, vchSig=std::vector of length 0, capacity 0, address=..., 
    scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:38
38	    if (!key.Sign(hash, vchSig))
#0  TransactionSignatureCreator::CreateSig (this=0x7f876f7fcea0, vchSig=std::vector of length 0, capacity 0, address=..., 
    scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:38
#1  0x00007f8779f0b5c5 in Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, 
    sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:47
#2  0x00007f8779f0b9cf in SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 1, 
    whichTypeRet=@0x7f876f7fc580: TX_PUBKEYHASH, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:96
#3  0x00007f8779f0c2a7 in ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:178
#4  0x00007f8779b75bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#5  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#6  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#7  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#8  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#9  0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#10 0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001d60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#11 0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001d30) at httpserver.cpp:53
#12 0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#13 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#14 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d708) at /usr/include/c++/6/functional:1391
#15 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d708) at /usr/include/c++/6/functional:1380
#16 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d700) at /usr/include/c++/6/thread:197
#17 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#18 0x00007f877729b494 in start_thread (arg=0x7f876f7fe700) at pthread_create.c:333
#19 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
40	    vchSig.push_back((unsigned char)nHashType);
$3 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x1c, 0x7, 0x12, 0x75, 0x72, 0x8f, 0xfa, 0xcb, 0x11, 0x27, 0x99, 0x68, 0x58, 0xc0, 0x3a, 0x5b, 0x18, 0x6b, 0x6d, 
      0x59, 0xe6, 0x76, 0x4e, 0x42, 0x5c, 0x21, 0x23, 0x88, 0xed, 0x63, 0xef, 0x6}
  }, <No data fields>}
41	    return true;
22	    CKey key;  // key中存放着私钥
42	}
Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, sigversion=SIGVERSION_WITNESS_V0)
    at script/sign.cpp:49
49	    ret.push_back(vchSig);
$4 = std::vector of length 72, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xfd, 0x5e, 0x4e, 0xe7, 0x28, 0x71, 0x6b, 0x8a, 
  0x98, 0xca, 0x94, 0x7f, 0xc9, 0xf0, 0x38, 0xdf, 0xd1, 0x14, 0x7c, 0x1e, 0xc1, 0xda, 0x91, 0xc0, 0xc1, 0xd6, 0x26, 0x59, 
  0xd5, 0x6b, 0x4e, 0xb4, 0x2, 0x20, 0x61, 0xad, 0xfc, 0xb7, 0x7c, 0xd2, 0xbf, 0x7a, 0x57, 0x39, 0xf9, 0x26, 0x4e, 0xaf, 0x94, 
  0x4e, 0x38, 0xc7, 0x8a, 0x19, 0x23, 0x64, 0xe2, 0xf6, 0xc5, 0x81, 0x1, 0xd2, 0xc5, 0xae, 0xae, 0x31, 0x1}
50	    return true;
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
1213	        ss << hashPrevouts;
1214	        ss << hashSequence;
1218	        ss << txTo.vin[nIn].prevout;
1221	        ss << scriptCode;
1222	        ss << amount;
1223	        ss << txTo.vin[nIn].nSequence;
1225	        ss << hashOutputs;
1227	        ss << txTo.nLockTime;
1229	        ss << nHashType;
1231	        return ss.GetHash();
1251	}
$5 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x1c, 0x7, 0x12, 0x75, 0x72, 0x8f, 0xfa, 0xcb, 0x11, 0x27, 0x99, 0x68, 0x58, 0xc0, 0x3a, 0x5b, 0x18, 0x6b, 0x6d, 
      0x59, 0xe6, 0x76, 0x4e, 0x42, 0x5c, 0x21, 0x23, 0x88, 0xed, 0x63, 0xef, 0x6}
  }, <No data fields>}
TransactionSignatureChecker::CheckSig (this=0x7f876f7fcec8, vchSigIn=std::vector of length 72, capacity 72 = {...}, 
    vchPubKey=std::vector of length 33, capacity 33 = {...}, scriptCode=..., sigversion=SIGVERSION_WITNESS_V0)
    at script/interpreter.cpp:1273
1273	    if (!VerifySignature(vchSig, pubkey, sighash))
1274	        return false;
1265	    std::vector<unsigned char> vchSig(vchSigIn);
1277	}
$6 = std::vector of length 71, capacity 72 = {0xc0, 0xa, 0x0, 0x54, 0x87, 0x7f, 0x0, 0x0, 0xe7, 0x28, 0x71, 0x6b, 0x8a, 0x98, 
  0xca, 0x94, 0x7f, 0xc9, 0xf0, 0x38, 0xdf, 0xd1, 0x14, 0x7c, 0x1e, 0xc1, 0xda, 0x91, 0xc0, 0xc1, 0xd6, 0x26, 0x59, 0xd5, 
  0x6b, 0x4e, 0xb4, 0x2, 0x20, 0x61, 0xad, 0xfc, 0xb7, 0x7c, 0xd2, 0xbf, 0x7a, 0x57, 0x39, 0xf9, 0x26, 0x4e, 0xaf, 0x94, 0x4e, 
  0x38, 0xc7, 0x8a, 0x19, 0x23, 0x64, 0xe2, 0xf6, 0xc5, 0x81, 0x1, 0xd2, 0xc5, 0xae, 0xae, 0x31}
EvalScript (stack=std::vector of length 2, capacity 4 = {...}, script=..., flags=65503, checker=..., 
    sigversion=SIGVERSION_WITNESS_V0, serror=0x0) at script/interpreter.cpp:903
903	                    if (!fSuccess && (flags & SCRIPT_VERIFY_NULLFAIL) && vchSig.size())
904	                        return set_error(serror, SCRIPT_ERR_SIG_NULLFAIL);
884	                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);
269	    std::vector<valtype> altstack;
268	    std::vector<bool> vfExec;
267	    valtype vchPushValue;
1045	}
VerifyWitnessProgram (witness=..., witversion=0, program=std::vector of length 20, capacity 20 = {...}, flags=65503, 
    checker=..., serror=0x0) at script/interpreter.cpp:1403
1403	        return false;
1364	    CScript scriptPubKey;
1363	    std::vector<std::vector<unsigned char> > stack;
1412	}
VerifyScript (scriptSig=..., scriptPubKey=..., witness=0x7f876f7fcf70, flags=65503, checker=..., serror=0x0)
    at script/interpreter.cpp:1498
1498	                    return false;
1466	            return set_error(serror, SCRIPT_ERR_SIG_PUSHONLY);
1444	    std::vector<unsigned char> witnessprogram;
1428	    std::vector<std::vector<unsigned char> > stack, stackCopy;
1531	}
ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:157
157	    CScript subscript;
151	    std::vector<valtype> result;
198	    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());
#0  ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:198
#1  0x00007f8779b75bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#2  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#3  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#4  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#5  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#6  0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#7  0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001d60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#8  0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001d30) at httpserver.cpp:53
#9  0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#10 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#11 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d708) at /usr/include/c++/6/functional:1391
#12 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d708) at /usr/include/c++/6/functional:1380
#13 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d700) at /usr/include/c++/6/thread:197
#14 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007f877729b494 in start_thread (arg=0x7f876f7fe700) at pthread_create.c:333
#16 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
199	}
SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:856
856	        sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i));
$7 = {
  scriptSig = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x17, 
      _union = {
        direct = {0x16, 0x0, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
          0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x68140016, 
          indirect = 0x447f433c471f952f
        }
      }
    }, <No data fields>}, 
  scriptWitness = {
    stack = std::vector of length 2, capacity 2 = {std::vector of length 72, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xfd, 
        0x5e, 0x4e, 0xe7, 0x28, 0x71, 0x6b, 0x8a, 0x98, 0xca, 0x94, 0x7f, 0xc9, 0xf0, 0x38, 0xdf, 0xd1, 0x14, 0x7c, 0x1e, 
        0xc1, 0xda, 0x91, 0xc0, 0xc1, 0xd6, 0x26, 0x59, 0xd5, 0x6b, 0x4e, 0xb4, 0x2, 0x20, 0x61, 0xad, 0xfc, 0xb7, 0x7c, 0xd2, 
        0xbf, 0x7a, 0x57, 0x39, 0xf9, 0x26, 0x4e, 0xaf, 0x94, 0x4e, 0x38, 0xc7, 0x8a, 0x19, 0x23, 0x64, 0xe2, 0xf6, 0xc5, 
        0x81, 0x1, 0xd2, 0xc5, 0xae, 0xae, 0x31, 0x1}, std::vector of length 33, capacity 33 = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 
        0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 0xe4, 0x8c, 0x32, 0xc8, 0x8e, 
        0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf}}
  }
}
858	        UpdateTransaction(mtx, i, sigdata);
$8 = {
  scriptSig = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x17, 
      _union = {
        direct = {0x16, 0x0, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
          0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x68140016, 
          indirect = 0x447f433c471f952f
        }
      }
    }, <No data fields>}, 
  scriptWitness = {
    stack = std::vector of length 2, capacity 2 = {std::vector of length 72, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xfd, 
        0x5e, 0x4e, 0xe7, 0x28, 0x71, 0x6b, 0x8a, 0x98, 0xca, 0x94, 0x7f, 0xc9, 0xf0, 0x38, 0xdf, 0xd1, 0x14, 0x7c, 0x1e, 
        0xc1, 0xda, 0x91, 0xc0, 0xc1, 0xd6, 0x26, 0x59, 0xd5, 0x6b, 0x4e, 0xb4, 0x2, 0x20, 0x61, 0xad, 0xfc, 0xb7, 0x7c, 0xd2, 
        0xbf, 0x7a, 0x57, 0x39, 0xf9, 0x26, 0x4e, 0xaf, 0x94, 0x4e, 0x38, 0xc7, 0x8a, 0x19, 0x23, 0x64, 0xe2, 0xf6, 0xc5, 
        0x81, 0x1, 0xd2, 0xc5, 0xae, 0xae, 0x31, 0x1}, std::vector of length 33, capacity 33 = {0x2, 0xb9, 0xc7, 0x7, 0x7d, 
        0xaa, 0xa5, 0x5a, 0xcf, 0x0, 0x4, 0x8b, 0xca, 0x3c, 0x5d, 0x4, 0xd0, 0x53, 0xa5, 0xa4, 0xe4, 0x8c, 0x32, 0xc8, 0x8e, 
        0x67, 0x76, 0xcc, 0xc2, 0x75, 0xc9, 0x4d, 0xaf}}
  }
}
860	        ScriptError serror = SCRIPT_ERR_OK;
861	        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fc768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
1213	        ss << hashPrevouts;
$9 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 0x96, 0x77, 0xd7, 0xca, 
      0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0}
  }, <No data fields>}
1214	        ss << hashSequence;
$10 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x3b, 0xb1, 0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 
      0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e, 0x70, 0x66, 0x50, 0x44}
  }, <No data fields>}
1218	        ss << txTo.vin[nIn].prevout;
1221	        ss << scriptCode;
1222	        ss << amount;
1223	        ss << txTo.vin[nIn].nSequence;
1225	        ss << hashOutputs;
$11 = (const CAmount &) @0x7f876f7fc768: 0x12a05f200
1227	        ss << txTo.nLockTime;
1229	        ss << nHashType;
1231	        return ss.GetHash();
1251	}
$12 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x1c, 0x7, 0x12, 0x75, 0x72, 0x8f, 0xfa, 0xcb, 0x11, 0x27, 0x99, 0x68, 0x58, 0xc0, 0x3a, 0x5b, 0x18, 0x6b, 0x6d, 
      0x59, 0xe6, 0x76, 0x4e, 0x42, 0x5c, 0x21, 0x23, 0x88, 0xed, 0x63, 0xef, 0x6}
  }, <No data fields>}
TransactionSignatureChecker::CheckSig (this=0x7f876f7fc750, vchSigIn=std::vector of length 72, capacity 72 = {...}, 
    vchPubKey=std::vector of length 33, capacity 33 = {...}, scriptCode=..., sigversion=SIGVERSION_WITNESS_V0)
    at script/interpreter.cpp:1273
1273	    if (!VerifySignature(vchSig, pubkey, sighash))
1274	        return false;
1265	    std::vector<unsigned char> vchSig(vchSigIn);
1277	}
EvalScript (stack=std::vector of length 2, capacity 4 = {...}, script=..., flags=65503, checker=..., 
    sigversion=SIGVERSION_WITNESS_V0, serror=0x7f876f7fc720) at script/interpreter.cpp:903
903	                    if (!fSuccess && (flags & SCRIPT_VERIFY_NULLFAIL) && vchSig.size())
904	                        return set_error(serror, SCRIPT_ERR_SIG_NULLFAIL);
884	                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);
269	    std::vector<valtype> altstack;
268	    std::vector<bool> vfExec;
267	    valtype vchPushValue;
1045	}
VerifyWitnessProgram (witness=..., witversion=0, program=std::vector of length 20, capacity 20 = {...}, flags=65503, 
    checker=..., serror=0x7f876f7fc720) at script/interpreter.cpp:1403
1403	        return false;
1364	    CScript scriptPubKey;
1363	    std::vector<std::vector<unsigned char> > stack;
1412	}
VerifyScript (scriptSig=..., scriptPubKey=..., witness=0x7f87540009f8, flags=65503, checker=..., serror=0x7f876f7fc720)
    at script/interpreter.cpp:1498
1498	                    return false;
1466	            return set_error(serror, SCRIPT_ERR_SIG_PUSHONLY);
1444	    std::vector<unsigned char> witnessprogram;
1428	    std::vector<std::vector<unsigned char> > stack, stackCopy;
1531	}
SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:862
862	            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {
866	                TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));
849	        SignatureData sigdata;
839	    for (unsigned int i = 0; i < mtx.vin.size(); i++) {
No symbol "sigdate" in current context.
870	    bool fComplete = vErrors.empty();
872	    UniValue result(UniValue::VOBJ);
873	    result.pushKV("hex", EncodeHexTx(mtx));
874	    result.pushKV("complete", fComplete);
875	    if (!vErrors.empty()) {
876	        result.pushKV("errors", vErrors);
879	    return result;
837	    const CTransaction txConst(mtx);
833	    UniValue vErrors(UniValue::VARR);
729	    CCoinsViewCache view(&viewDummy);
728	    CCoinsView viewDummy;
879	    return result;
880	}
signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:947
947	    CBasicKeyStore keystore;
942	    CMutableTransaction mtx;
958	    return SignTransaction(mtx, request.params[2], &keystore, true, request.params[3]);
959	}
signrawtransaction (request=...) at rpc/rawtransaction.cpp:1034
1034	    JSONRPCRequest new_request;
1058	}
CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:504
504	}
HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:194
194	            strReply = JSONRPCReply(result, NullUniValue, jreq.id);
191	            UniValue result = tableRPC.execute(jreq);
202	        req->WriteHeader("Content-Type", "application/json");
203	        req->WriteReply(HTTP_OK, strReply);
184	        std::string strReply;
177	        UniValue valRequest;
211	    return true;
161	    JSONRPCRequest jreq;
154	    std::pair<bool, std::string> authHeader = req->GetHeader("authorization");
212	}
std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (
    __functor=..., __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1718
1718	      }
std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (
    this=0x7f8758001d60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2128
2128	    }
Continuing.

Program received signal SIGINT, Interrupt.
[Switching to Thread 0x7f877a530740 (LWP 1980)]
0x00007f87772a47dd in nanosleep () at ../sysdeps/unix/syscall-template.S:84
84	../sysdeps/unix/syscall-template.S: No such file or directory.
Continuing.
[Switching to Thread 0x7f876f7fe700 (LWP 1986)]

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fc768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.
[Switching to Thread 0x7f876effd700 (LWP 1987)]

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
1213	        ss << hashPrevouts;
1214	        ss << hashSequence;
1218	        ss << txTo.vin[nIn].prevout;
1221	        ss << scriptCode;
1222	        ss << amount;
1223	        ss << txTo.vin[nIn].nSequence;
1225	        ss << hashOutputs;
1227	        ss << txTo.nLockTime;
1229	        ss << nHashType;
1231	        return ss.GetHash();
1251	}
$13 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x1c, 0x7, 0x12, 0x75, 0x72, 0x8f, 0xfa, 0xcb, 0x11, 0x27, 0x99, 0x68, 0x58, 0xc0, 0x3a, 0x5b, 0x18, 0x6b, 0x6d, 
      0x59, 0xe6, 0x76, 0x4e, 0x42, 0x5c, 0x21, 0x23, 0x88, 0xed, 0x63, 0xef, 0x6}
  }, <No data fields>}
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effb768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.
[Switching to Thread 0x7f876f7fe700 (LWP 1986)]

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fc768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
1213	        ss << hashPrevouts;
1214	        ss << hashSequence;
1218	        ss << txTo.vin[nIn].prevout;
1221	        ss << scriptCode;
1222	        ss << amount;
1223	        ss << txTo.vin[nIn].nSequence;
1225	        ss << hashOutputs;
1227	        ss << txTo.nLockTime;
1229	        ss << nHashType;
1231	        return ss.GetHash();
1251	}
TransactionSignatureChecker::CheckSig (this=0x7f876f7fc750, vchSigIn=std::vector of length 72, capacity 72 = {...}, 
    vchPubKey=std::vector of length 33, capacity 33 = {...}, scriptCode=..., sigversion=SIGVERSION_WITNESS_V0)
    at script/interpreter.cpp:1273
1273	    if (!VerifySignature(vchSig, pubkey, sighash))
1276	    return true;
$14 = std::vector of length 71, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xcd, 0x5c, 0xf2, 0x8, 0xa4, 0xc0, 0x64, 0x19, 
  0xd6, 0x4d, 0xf9, 0x8b, 0xa7, 0xef, 0xcc, 0xd4, 0xf6, 0x6a, 0x7e, 0x77, 0xba, 0x4b, 0x30, 0xb9, 0x28, 0x5d, 0x50, 0x2b, 
  0x74, 0x8e, 0x66, 0x2a, 0x2, 0x20, 0x43, 0x21, 0x60, 0xa1, 0xac, 0xb7, 0xf2, 0x18, 0x8d, 0x38, 0x5b, 0xd, 0x6c, 0xed, 0x44, 
  0x1a, 0xa2, 0xdb, 0x1f, 0xfc, 0x1e, 0x6f, 0xc8, 0x8c, 0x3f, 0xd4, 0x3e, 0xd9, 0x5f, 0x56, 0x2b, 0xc7}
Continuing.
[Switching to Thread 0x7f876effd700 (LWP 1987)]

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
#0  SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
#1  0x00007f8779f5bf32 in TransactionSignatureChecker::CheckSig (this=0x7f876effbec8, 
    vchSigIn=std::vector of length 72, capacity 72 = {...}, vchPubKey=std::vector of length 33, capacity 33 = {...}, 
    scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/interpreter.cpp:1271
#2  0x00007f8779f5a5e7 in EvalScript (stack=std::vector of length 2, capacity 4 = {...}, script=..., flags=65503, checker=..., 
    sigversion=SIGVERSION_WITNESS_V0, serror=0x0) at script/interpreter.cpp:901
#3  0x00007f8779f5c6e2 in VerifyWitnessProgram (witness=..., witversion=0, 
    program=std::vector of length 20, capacity 20 = {...}, flags=65503, checker=..., serror=0x0) at script/interpreter.cpp:1402
#4  0x00007f8779f5ce29 in VerifyScript (scriptSig=..., scriptPubKey=..., witness=0x7f876effbf70, flags=65503, checker=..., 
    serror=0x0) at script/interpreter.cpp:1497
#5  0x00007f8779f0c5e7 in ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:198
#6  0x00007f8779b75bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876effc230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#7  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#8  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#9  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#10 0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#11 0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#12 0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001c60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#13 0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001c30) at httpserver.cpp:53
#14 0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#15 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#16 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d748) at /usr/include/c++/6/functional:1391
#17 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d748) at /usr/include/c++/6/functional:1380
#18 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d740) at /usr/include/c++/6/thread:197
#19 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007f877729b494 in start_thread (arg=0x7f876effd700) at pthread_create.c:333
#21 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effb768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
#0  SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effb768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
#1  0x00007f8779f5bf32 in TransactionSignatureChecker::CheckSig (this=0x7f876effb750, 
    vchSigIn=std::vector of length 72, capacity 72 = {...}, vchPubKey=std::vector of length 33, capacity 33 = {...}, 
    scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/interpreter.cpp:1271
#2  0x00007f8779f5a5e7 in EvalScript (stack=std::vector of length 2, capacity 4 = {...}, script=..., flags=65503, checker=..., 
    sigversion=SIGVERSION_WITNESS_V0, serror=0x7f876effb720) at script/interpreter.cpp:901
#3  0x00007f8779f5c6e2 in VerifyWitnessProgram (witness=..., witversion=0, 
    program=std::vector of length 20, capacity 20 = {...}, flags=65503, checker=..., serror=0x7f876effb720)
    at script/interpreter.cpp:1402
#4  0x00007f8779f5ce29 in VerifyScript (scriptSig=..., scriptPubKey=..., witness=0x7f8750000a58, flags=65503, checker=..., 
    serror=0x7f876effb720) at script/interpreter.cpp:1497
#5  0x00007f8779b75d0e in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876effc230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:861
#6  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#7  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#8  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#9  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#10 0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#11 0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001c60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#12 0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001c30) at httpserver.cpp:53
#13 0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#14 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#15 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d748) at /usr/include/c++/6/functional:1391
#16 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d748) at /usr/include/c++/6/functional:1380
#17 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d740) at /usr/include/c++/6/thread:197
#18 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#19 0x00007f877729b494 in start_thread (arg=0x7f876effd700) at pthread_create.c:333
#20 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
Continuing.
[Switching to Thread 0x7f876f7fe700 (LWP 1986)]

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
#0  SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
#1  0x00007f8779f5bf32 in TransactionSignatureChecker::CheckSig (this=0x7f876f7fcec8, 
    vchSigIn=std::vector of length 72, capacity 72 = {...}, vchPubKey=std::vector of length 33, capacity 33 = {...}, 
    scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/interpreter.cpp:1271
#2  0x00007f8779f5a5e7 in EvalScript (stack=std::vector of length 2, capacity 4 = {...}, script=..., flags=65503, checker=..., 
    sigversion=SIGVERSION_WITNESS_V0, serror=0x0) at script/interpreter.cpp:901
#3  0x00007f8779f5c6e2 in VerifyWitnessProgram (witness=..., witversion=0, 
    program=std::vector of length 20, capacity 20 = {...}, flags=65503, checker=..., serror=0x0) at script/interpreter.cpp:1402
#4  0x00007f8779f5ce29 in VerifyScript (scriptSig=..., scriptPubKey=..., witness=0x7f876f7fcf70, flags=65503, checker=..., 
    serror=0x0) at script/interpreter.cpp:1497
#5  0x00007f8779f0c5e7 in ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:198
#6  0x00007f8779b75bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#7  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#8  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#9  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#10 0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001300) at httprpc.cpp:191
#11 0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#12 0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001d60, __args#0=0x7f8758001300, __args#1="") at /usr/include/c++/6/functional:2127
#13 0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001d30) at httpserver.cpp:53
#14 0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#15 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#16 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d708) at /usr/include/c++/6/functional:1391
#17 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d708) at /usr/include/c++/6/functional:1380
Quit
Undefined command: "y".  Try "help".
A debugging session is active.

	Inferior 1 [process 1980] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 1980
Breakpoint 1 at 0x7f8779b98a1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7f8779b770f8: file rpc/rawtransaction.cpp, line 962.
Breakpoint 3 at 0x7f8779ee29b3: file key.cpp, line 197.
Breakpoint 4 at 0x7f8779ee2827: file key.cpp, line 179.
Breakpoint 5 at 0x7f8779b74653: file rpc/rawtransaction.cpp, line 726.
Breakpoint 6 at 0x7f8779dbf2eb: file wallet/rpcwallet.cpp, line 3260.
Breakpoint 7 at 0x7f8779b7686f: file rpc/rawtransaction.cpp, line 883.
Breakpoint 8 at 0x7f8779f0c02e: file script/sign.cpp, line 150.
Breakpoint 9 at 0x7f8779f5b72b: file script/interpreter.cpp, line 1182.
Breakpoint 10 at 0x7f8779f0b7d3: file script/sign.cpp, line 75.
Breakpoint 11 at 0x7f8779f0b586: file script/sign.cpp, line 45.
Breakpoint 12 at 0x7f8779f0b411: file script/sign.cpp, line 21.
Continuing.
[Switching to Thread 0x7f876f7fe700 (LWP 1986)]

Breakpoint 1, CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
476	        LOCK(cs_rpcWarmup);
477	        if (fRPCInWarmup)
476	        LOCK(cs_rpcWarmup);
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
964	    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);
967	    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)
1025	    if (!IsDeprecatedRPCEnabled("signrawtransaction")) {
1031	    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);
Continuing.

Breakpoint 7, signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:883
883	{
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f876f7fd0b0) at key.cpp:179
warning: Source file is more recent than executable.
179	CPubKey CKey::GetPubKey() const {
#0  CKey::GetPubKey (this=0x7f876f7fd0b0) at key.cpp:179
#1  0x00007f8779ee7b43 in CKeyStore::AddKey (this=0x7f876f7fd230, key=...) at keystore.cpp:11
#2  0x00007f8779b76e1a in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:955
#3  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#4  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#5  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#6  0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#7  0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001a60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#8  0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001a30) at httpserver.cpp:53
#9  0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#10 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#11 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d708) at /usr/include/c++/6/functional:1391
#12 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d708) at /usr/include/c++/6/functional:1380
#13 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d700) at /usr/include/c++/6/thread:197
#14 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007f877729b494 in start_thread (arg=0x7f876f7fe700) at pthread_create.c:333
#16 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
A debugging session is active.

	Inferior 1 [process 1980] will be detached.

Quit anyway? (y or n) Not confirmed.
Continuing.

Breakpoint 5, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
728	    CCoinsView viewDummy;
#0  SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:728
#1  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#2  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#3  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#4  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#5  0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#6  0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001a60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#7  0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001a30) at httpserver.cpp:53
#8  0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#9  0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#10 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d708) at /usr/include/c++/6/functional:1391
#11 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d708) at /usr/include/c++/6/functional:1380
#12 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d700) at /usr/include/c++/6/thread:197
#13 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#14 0x00007f877729b494 in start_thread (arg=0x7f876f7fe700) at pthread_create.c:333
#15 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
Continuing.

Breakpoint 8, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
#0  ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
#1  0x00007f8779b75bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#2  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#3  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#4  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#5  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#6  0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#7  0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001a60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#8  0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001a30) at httpserver.cpp:53
#9  0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#10 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#11 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d708) at /usr/include/c++/6/functional:1391
#12 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d708) at /usr/include/c++/6/functional:1380
#13 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d700) at /usr/include/c++/6/thread:197
#14 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007f877729b494 in start_thread (arg=0x7f876f7fe700) at pthread_create.c:333
#16 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
151	    std::vector<valtype> result;
155	    bool solved = SignStep(creator, fromPubKey, result, whichType, SIGVERSION_BASE);

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 0, 
    whichTypeRet=@0x7f876f7fc514: TX_NONSTANDARD, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
#0  SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 0, 
    whichTypeRet=@0x7f876f7fc514: TX_NONSTANDARD, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
#1  0x00007f8779f0c076 in ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:155
#2  0x00007f8779b75bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#3  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#4  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#5  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#6  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#7  0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#8  0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001a60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#9  0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001a30) at httpserver.cpp:53
#10 0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#11 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#12 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d708) at /usr/include/c++/6/functional:1391
#13 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d708) at /usr/include/c++/6/functional:1380
#14 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d700) at /usr/include/c++/6/thread:197
#15 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#16 0x00007f877729b494 in start_thread (arg=0x7f876f7fe700) at pthread_create.c:333
#17 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
76	    CScript scriptRet;
77	    uint160 h160;
78	    ret.clear();
80	    std::vector<valtype> vSolutions;
81	    if (!Solver(scriptPubKey, whichTypeRet, vSolutions))
84	    CKeyID keyID;
85	    switch (whichTypeRet)
106	        if (creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptRet)) {
107	            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));
108	            return true;
80	    std::vector<valtype> vSolutions;
76	    CScript scriptRet;
131	}
ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:156
156	    bool P2SH = false;
#0  ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:156
#1  0x00007f8779b75bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#2  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#3  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#4  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#5  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#6  0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#7  0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001a60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#8  0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001a30) at httpserver.cpp:53
#9  0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#10 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#11 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d708) at /usr/include/c++/6/functional:1391
#12 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d708) at /usr/include/c++/6/functional:1380
#13 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d700) at /usr/include/c++/6/thread:197
#14 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007f877729b494 in start_thread (arg=0x7f876f7fe700) at pthread_create.c:333
#16 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
157	    CScript subscript;
158	    sigdata.scriptWitness.stack.clear();
160	    if (solved && whichType == TX_SCRIPTHASH)
165	        subscript = CScript(result[0].begin(), result[0].end());
168	        solved = solved && SignStep(creator, subscript, result, whichType, SIGVERSION_BASE) && whichType != TX_SCRIPTHASH;
#0  ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:168
#1  0x00007f8779b75bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#2  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#3  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#4  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#5  0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#6  0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#7  0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001a60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#8  0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001a30) at httpserver.cpp:53
#9  0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#10 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#11 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d708) at /usr/include/c++/6/functional:1391
#12 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d708) at /usr/include/c++/6/functional:1380
#13 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d700) at /usr/include/c++/6/thread:197
#14 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#15 0x00007f877729b494 in start_thread (arg=0x7f876f7fe700) at pthread_create.c:333
#16 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
The history is empty.
$1 = 0x3

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f876f7fc514: TX_SCRIPTHASH, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
76	    CScript scriptRet;
77	    uint160 h160;
78	    ret.clear();
80	    std::vector<valtype> vSolutions;
81	    if (!Solver(scriptPubKey, whichTypeRet, vSolutions))
84	    CKeyID keyID;
85	    switch (whichTypeRet)
117	        ret.push_back(vSolutions[0]);
118	        return true;
80	    std::vector<valtype> vSolutions;
76	    CScript scriptRet;
131	}
ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:169
169	        P2SH = true;
$2 = std::vector of length 1, capacity 1 = {std::vector of length 20, capacity 20 = {0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 
    0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 0x2a, 0xa3}}
172	    if (solved && whichType == TX_WITNESS_V0_KEYHASH)
174	        CScript witnessscript;
175	        witnessscript << OP_DUP << OP_HASH160 << ToByteVector(result[0]) << OP_EQUALVERIFY << OP_CHECKSIG;
178	        solved = solved && SignStep(creator, witnessscript, result, subType, SIGVERSION_WITNESS_V0);

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f876f7fc580: 1409289782, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:75
75	{
76	    CScript scriptRet;
77	    uint160 h160;
78	    ret.clear();
80	    std::vector<valtype> vSolutions;
81	    if (!Solver(scriptPubKey, whichTypeRet, vSolutions))
84	    CKeyID keyID;
85	    switch (whichTypeRet)
95	        keyID = CKeyID(uint160(vSolutions[0]));
96	        if (!Sign1(keyID, creator, scriptPubKey, ret, sigversion))

Breakpoint 11, Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, 
    sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:45
45	{
46	    std::vector<unsigned char> vchSig;
47	    if (!creator.CreateSig(vchSig, address, scriptCode, sigversion))

Breakpoint 12, TransactionSignatureCreator::CreateSig (this=0x7f876f7fcea0, vchSig=std::vector of length 0, capacity 0, 
    address=..., scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:21
21	{
22	    CKey key;  // key中存放着私钥
23	    if (!keystore->GetKey(address, key))
30	    if (sigversion == SIGVERSION_WITNESS_V0 && !key.IsCompressed())
33	    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
1213	        ss << hashPrevouts;
1214	        ss << hashSequence;
1218	        ss << txTo.vin[nIn].prevout;
1221	        ss << scriptCode;
1222	        ss << amount;
1223	        ss << txTo.vin[nIn].nSequence;
1225	        ss << hashOutputs;
1227	        ss << txTo.nLockTime;
1229	        ss << nHashType;
1231	        return ss.GetHash();
1251	}
TransactionSignatureCreator::CreateSig (this=0x7f876f7fcea0, vchSig=std::vector of length 0, capacity 0, address=..., 
    scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:38
38	    if (!key.Sign(hash, vchSig))
$3 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x5a, 0x72, 0x9, 0x79, 0xcd, 0x61, 0xf9, 0x2f, 0xea, 0xfc, 0xe2, 0xd5, 0xbd, 0x44, 0x67, 0xb0, 0xf0, 0x7b, 0xfd, 
      0xa2, 0xb3, 0x66, 0x50, 0x5b, 0xa6, 0x4c, 0x72, 0x4d, 0x82, 0xf8, 0x40, 0xe8}
  }, <No data fields>}

Breakpoint 3, CKey::Sign (this=0x7f876f7fc220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:197
197	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
199	    if (!fValid)
201	    vchSig.resize(CPubKey::SIGNATURE_SIZE);
202	    size_t nSigLen = CPubKey::SIGNATURE_SIZE;
203	    unsigned char extra_entropy[32] = {0};
204	    WriteLE32(extra_entropy, test_case);
207	    int ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : nullptr);
208	    assert(ret);
210	    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, vchSig.data(), &nSigLen, &sig);
$4 = (const uint256 &) @0x7f876f7fc240: {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x5a, 0x72, 0x9, 0x79, 0xcd, 0x61, 0xf9, 0x2f, 0xea, 0xfc, 0xe2, 0xd5, 0xbd, 0x44, 0x67, 0xb0, 0xf0, 0x7b, 0xfd, 
      0xa2, 0xb3, 0x66, 0x50, 0x5b, 0xa6, 0x4c, 0x72, 0x4d, 0x82, 0xf8, 0x40, 0xe8}
  }, <No data fields>}
211	    vchSig.resize(nSigLen);
212	    return true;
213	}
TransactionSignatureCreator::CreateSig (this=0x7f876f7fcea0, vchSig=std::vector of length 71, capacity 72 = {...}, 
    address=..., scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:40
40	    vchSig.push_back((unsigned char)nHashType);
$5 = std::vector of length 71, capacity 72 = {0x30, 0x45, 0x2, 0x21, 0x0, 0xcd, 0x5c, 0xf2, 0x8, 0xa4, 0xc0, 0x64, 0x19, 0xd6, 
  0x4d, 0xf9, 0x8b, 0xa7, 0xef, 0xcc, 0xd4, 0xf6, 0x6a, 0x7e, 0x77, 0xba, 0x4b, 0x30, 0xb9, 0x28, 0x5d, 0x50, 0x2b, 0x74, 
  0x8e, 0x66, 0x2a, 0x2, 0x20, 0x43, 0x21, 0x60, 0xa1, 0xac, 0xb7, 0xf2, 0x18, 0x8d, 0x38, 0x5b, 0xd, 0x6c, 0xed, 0x44, 0x1a, 
  0xa2, 0xdb, 0x1f, 0xfc, 0x1e, 0x6f, 0xc8, 0x8c, 0x3f, 0xd4, 0x3e, 0xd9, 0x5f, 0x56, 0x2b, 0xc7}
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f876f7fc2b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
#0  SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
#1  0x00007f8779f5bf32 in TransactionSignatureChecker::CheckSig (this=0x7f876f7fcec8, 
    vchSigIn=std::vector of length 72, capacity 72 = {...}, vchPubKey=std::vector of length 33, capacity 33 = {...}, 
    scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/interpreter.cpp:1271
#2  0x00007f8779f5a5e7 in EvalScript (stack=std::vector of length 2, capacity 4 = {...}, script=..., flags=65503, checker=..., 
    sigversion=SIGVERSION_WITNESS_V0, serror=0x0) at script/interpreter.cpp:901
#3  0x00007f8779f5c6e2 in VerifyWitnessProgram (witness=..., witversion=0, 
    program=std::vector of length 20, capacity 20 = {...}, flags=65503, checker=..., serror=0x0) at script/interpreter.cpp:1402
#4  0x00007f8779f5ce29 in VerifyScript (scriptSig=..., scriptPubKey=..., witness=0x7f876f7fcf70, flags=65503, checker=..., 
    serror=0x0) at script/interpreter.cpp:1497
#5  0x00007f8779f0c5e7 in ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:198
#6  0x00007f8779b75bc0 in SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, 
    hashType=...) at rpc/rawtransaction.cpp:853
#7  0x00007f8779b76ea6 in signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:958
#8  0x00007f8779b77726 in signrawtransaction (request=...) at rpc/rawtransaction.cpp:1045
#9  0x00007f8779b98c0a in CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:497
#10 0x00007f8779d4a3c2 in HTTPReq_JSONRPC (req=0x7f8758001530) at httprpc.cpp:191
#11 0x00007f8779b1d6a0 in std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (__functor=..., 
    __args#0=<unknown type in /home/StephenSun/bitcoin/src/bitcoind, CU 0x50bff9, DIE 0x55c9ad>, __args#1="")
    at /usr/include/c++/6/functional:1717
#12 0x00007f8779d575f4 in std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (this=0x7f8758001a60, __args#0=0x7f8758001530, __args#1="") at /usr/include/c++/6/functional:2127
#13 0x00007f8779d55abd in HTTPWorkItem::operator() (this=0x7f8758001a30) at httpserver.cpp:53
#14 0x00007f8779d58844 in WorkQueue<HTTPClosure>::Run (this=0x7f877be9d580) at httpserver.cpp:112
#15 0x00007f8779d50b8c in HTTPWorkQueueRun (queue=0x7f877be9d580) at httpserver.cpp:334
#16 0x00007f8779d666a6 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::_M_invoke<0ul>(std::_Index_tuple<0ul>) (this=0x7f877be9d708) at /usr/include/c++/6/functional:1391
#17 0x00007f8779d66122 in std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)>::operator()() (
    this=0x7f877be9d708) at /usr/include/c++/6/functional:1380
#18 0x00007f8779d659e3 in std::thread::_State_impl<std::_Bind_simple<void (*(WorkQueue<HTTPClosure>*))(WorkQueue<HTTPClosure>*)> >::_M_run() (this=0x7f877be9d700) at /usr/include/c++/6/thread:197
#19 0x00007f8777a85e6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007f877729b494 in start_thread (arg=0x7f876f7fe700) at pthread_create.c:333
#21 0x00007f8776fddacf in clone () from /lib/x86_64-linux-gnu/libc.so.6
Continuing.

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fc768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.
[Switching to Thread 0x7f876effd700 (LWP 1987)]

Breakpoint 1, CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 7, signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:883
883	{
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f876effc0b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 5, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876effc230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 8, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 0, 
    whichTypeRet=@0x7f876effb514: TX_NONSTANDARD, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f876effb514: TX_SCRIPTHASH, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f876effb580: 1342181222, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 11, Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, 
    sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:45
45	{
Continuing.

Breakpoint 12, TransactionSignatureCreator::CreateSig (this=0x7f876effbea0, vchSig=std::vector of length 0, capacity 0, 
    address=..., scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:21
21	{
Continuing.

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
$6 = 0x2
1213	        ss << hashPrevouts;
$7 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 0x96, 0x77, 0xd7, 0xca, 
      0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0}
  }, <No data fields>}
1214	        ss << hashSequence;
$8 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x3b, 0xb1, 0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 
      0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e, 0x70, 0x66, 0x50, 0x44}
  }, <No data fields>}
1218	        ss << txTo.vin[nIn].prevout;
1221	        ss << scriptCode;
$9 = {
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
        0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
    }, <No data fields>}, 
  n = 0x0
}
1222	        ss << amount;
Quit
Undefined command: "jj".  Try "help".
$10 = (const CScript &) @0x7f876effb5e0: {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x19, 
    _union = {
      direct = {0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
        0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 0x88, 0xac, 0x0, 0x0, 0x0}, 
      {
        capacity = 0x6814a976, 
        indirect = 0x447f433c471f952f
      }
    }
  }, <No data fields>}
1223	        ss << txTo.vin[nIn].nSequence;
1225	        ss << hashOutputs;
$11 = (const CAmount &) @0x7f876effbec0: 0x12a05f200
1227	        ss << txTo.nLockTime;
#0  SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1227
1227	        ss << txTo.nLockTime;
$12 = (const CScript &) @0x7f876effb5e0: {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x19, 
    _union = {
      direct = {0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
        0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 0x88, 0xac, 0x0, 0x0, 0x0}, 
      {
        capacity = 0x6814a976, 
        indirect = 0x447f433c471f952f
      }
    }
  }, <No data fields>}
1229	        ss << nHashType;
1231	        return ss.GetHash();
$13 = 0x1
$14 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xdd, 0xc2, 0x89, 0x7e, 0xda, 0xc1, 0xd6, 0x7e, 0x87, 0x7c, 0x63, 0xcb, 0x51, 0xff, 0xa, 0x2b, 0xb3, 0xf6, 0xf0, 
      0xab, 0xbd, 0xaa, 0x5f, 0x66, 0xb6, 0x13, 0x86, 0xc8, 0x76, 0x4c, 0x1, 0x8b}
  }, <No data fields>}
$15 = 0x162
Continuing.

Breakpoint 3, CKey::Sign (this=0x7f876effb220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:197
197	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f876effb2b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effb768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.
[Switching to Thread 0x7f876f7fe700 (LWP 1986)]

Breakpoint 1, CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 7, signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:883
883	{
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f876f7fd0b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 5, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876f7fd230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 8, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 0, 
    whichTypeRet=@0x7f876f7fc514: TX_NONSTANDARD, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f876f7fc514: TX_SCRIPTHASH, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f876f7fc580: 1409288550, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 11, Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, 
    sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:45
45	{
Continuing.

Breakpoint 12, TransactionSignatureCreator::CreateSig (this=0x7f876f7fcea0, vchSig=std::vector of length 0, capacity 0, 
    address=..., scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:21
21	{
Continuing.

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
1213	        ss << hashPrevouts;
$16 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x2, 0x0, 0x0, 0x0, 0x87, 0x7f, 0x0, 0x0, 0x0, 0xbb, 0xc, 0x56, 0xe5, 0x6c, 0xe0, 0x6, 0xd0, 0xc1, 0x7f, 0x6f, 
        0x87, 0x7f, 0x0, 0x0, 0xb, 0x83, 0xee, 0x79, 0x87, 0x7f, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 
        0xc2, 0x7f, 0x6f, 0x87, 0x7f, 0x0, 0x0, 0xf0, 0xc3, 0x7f, 0x6f, 0x87, 0x7f, 0x0, 0x0, 0x30, 0xd2, 0x7f, 0x6f, 0x87, 
        0x7f, 0x0, 0x0}, 
      bytes = 0x4, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1214	        ss << hashSequence;
$17 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x2, 0x0, 0x0, 0x0, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 
        0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x0, 0x0, 0x0, 
        0x0, 0x20, 0xc2, 0x7f, 0x6f, 0x87, 0x7f, 0x0, 0x0, 0xf0, 0xc3, 0x7f, 0x6f, 0x87, 0x7f, 0x0, 0x0, 0x30, 0xd2, 0x7f, 
        0x6f, 0x87, 0x7f, 0x0, 0x0}, 
      bytes = 0x24, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1218	        ss << txTo.vin[nIn].prevout;
$18 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 
        0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x3b, 0xb1, 
        0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 
        0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e}, 
      bytes = 0x44, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$19 = {
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
        0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
    }, <No data fields>}, 
  n = 0x0
}
$20 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 
        0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x3b, 0xb1, 
        0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 
        0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e}, 
      bytes = 0x44, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1221	        ss << scriptCode;
$21 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 
        0xee, 0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 
        0x0, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 
        0xb7, 0x22, 0x90, 0x79, 0x5e}, 
      bytes = 0x68, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1222	        ss << amount;
$22 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 
        0xee, 0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 
        0x0, 0x19, 0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
        0x1d, 0x1e, 0xd2, 0x2a, 0xa3}, 
      bytes = 0x82, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$23 = 0x24
$24 = 0x1a
$25 = 26
$26 = 36
1223	        ss << txTo.vin[nIn].nSequence;
$27 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
        0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 
        0x19, 0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
        0x1e, 0xd2, 0x2a, 0xa3}, 
      bytes = 0x8a, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$28 = 8
Invalid number "8a".
$29 = 138
1225	        ss << hashOutputs;
$30 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
        0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 
        0x19, 0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
        0x1e, 0xd2, 0x2a, 0xa3}, 
      bytes = 0x8e, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
Invalid number "0x".
$31 = 142
1227	        ss << txTo.nLockTime;
$32 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xc2, 0x89, 0x7e, 0xda, 0xc1, 
        0xd6, 0x7e, 0x87, 0x7c, 0x63, 0xcb, 0x51, 0xff, 0xa, 0x2b, 0xb3, 0xf6, 0xf0, 0xab, 0xbd, 0xaa, 0x5f, 0x66, 0xb6, 0x13, 
        0x86, 0xc8, 0x76, 0x4c, 0x1, 0x8b, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
        0x1e, 0xd2, 0x2a, 0xa3}, 
      bytes = 0xae, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$33 = 174
1229	        ss << nHashType;
$34 = {
  ctx = {
    sha = {
      s = {1373191661, 540049131, 3805209682, 3429110481, 3819107605, 587309425, 1782586014, 2470281560}, 
      buf = "\210\254\000\362\005*\001\000\000\000\377\377\377\377\335\302\211~\332\301\326~\207|c\313Q\377\n+\263\366𫽪_f\266\023\206\310vL\001\213\000\000\000\000C\177D\211\257\002n[\373\035\036\322*\243", 
      bytes = 178, 
      static OUTPUT_SIZE = 32
    }, 
    static OUTPUT_SIZE = 32
  }, 
  nType = 4, 
  nVersion = 0
}
1231	        return ss.GetHash();
$35 = {
  ctx = {
    sha = {
      s = {1373191661, 540049131, 3805209682, 3429110481, 3819107605, 587309425, 1782586014, 2470281560}, 
      buf = "\210\254\000\362\005*\001\000\000\000\377\377\377\377\335\302\211~\332\301\326~\207|c\313Q\377\n+\263\366𫽪_f\266\023\206\310vL\001\213\000\000\000\000\001\000\000\000\257\002n[\373\035\036\322*\243", 
      bytes = 182, 
      static OUTPUT_SIZE = 32
    }, 
    static OUTPUT_SIZE = 32
  }, 
  nType = 4, 
  nVersion = 0
}
$36 = {
  ctx = {
    sha = {
      s = {1373191661, 540049131, 3805209682, 3429110481, 3819107605, 587309425, 1782586014, 2470281560}, 
      buf = "\210\254\000\362\005*\001\000\000\000\377\377\377\377\335\302\211~\332\301\326~\207|c\313Q\377\n+\263\366𫽪_f\266\023\206\310vL\001\213\000\000\000\000\001\000\000\000\257\002n[\373\035\036\322*\243", 
      bytes = 182, 
      static OUTPUT_SIZE = 32
    }, 
    static OUTPUT_SIZE = 32
  }, 
  nType = 4, 
  nVersion = 0
}
$37 = {
  ctx = {
    sha = {
      s = {1373191661, 540049131, 3805209682, 3429110481, 3819107605, 587309425, 1782586014, 2470281560}, 
      buf = "\210\254\000\362\005*\001\000\000\000\377\377\377\377\335\302\211~\332\301\326~\207|c\313Q\377\n+\263\366𫽪_f\266\023\206\310vL\001\213\000\000\000\000\001\000\000\000\257\002n[\373\035\036\322*\243", 
      bytes = 182, 
      static OUTPUT_SIZE = 32
    }, 
    static OUTPUT_SIZE = 32
  }, 
  nType = 4, 
  nVersion = 0
}
$38 = 0x19
Continuing.

Breakpoint 3, CKey::Sign (this=0x7f876f7fc220, hash=..., vchSig=std::vector of length 0, capacity 0, test_case=0)
    at key.cpp:197
197	bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f876f7fc2b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fcee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876f7fc768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.
[Switching to Thread 0x7f876effd700 (LWP 1987)]

Breakpoint 1, CRPCTable::execute (this=0x7f877a561fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
476	        LOCK(cs_rpcWarmup);
477	        if (fRPCInWarmup)
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:962
962	{
Continuing.

Breakpoint 7, signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:883
883	{
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f876effc0b0) at key.cpp:179
179	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 5, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f876effc230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 8, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 0, 
    whichTypeRet=@0x7f876effb514: TX_NONSTANDARD, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f876effb514: TX_SCRIPTHASH, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f876effb580: 1342180262, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 11, Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, 
    sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:45
45	{
Continuing.

Breakpoint 12, TransactionSignatureCreator::CreateSig (this=0x7f876effbea0, vchSig=std::vector of length 0, capacity 0, 
    address=..., scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:21
21	{
Continuing.

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f876effbec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1184	    assert(nIn < txTo.vin.size());
1186	    if (sigversion == SIGVERSION_WITNESS_V0) {
1187	        uint256 hashPrevouts;
1188	        uint256 hashSequence;
1189	        uint256 hashOutputs;
1190	        const bool cacheready = cache && cache->ready;
1192	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1193	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1196	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1197	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1201	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1202	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1209	        CHashWriter ss(SER_GETHASH, 0);
1211	        ss << txTo.nVersion;
1213	        ss << hashPrevouts;
$39 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x2, 0x0, 0x0, 0x0, 0x87, 0x7f, 0x0, 0x0, 0x0, 0xbb, 0xc, 0x56, 0xe5, 0x6c, 0xe0, 0x6, 0xd0, 0xb1, 0xff, 0x6e, 
        0x87, 0x7f, 0x0, 0x0, 0xb, 0x83, 0xee, 0x79, 0x87, 0x7f, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 
        0xb2, 0xff, 0x6e, 0x87, 0x7f, 0x0, 0x0, 0xf0, 0xb3, 0xff, 0x6e, 0x87, 0x7f, 0x0, 0x0, 0x30, 0xc2, 0xff, 0x6e, 0x87, 
        0x7f, 0x0, 0x0}, 
      bytes = 0x4, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$40 = 0x2
1214	        ss << hashSequence;
$41 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x3b, 0xb1, 0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 
      0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e, 0x70, 0x66, 0x50, 0x44}
  }, <No data fields>}
1218	        ss << txTo.vin[nIn].prevout;
$42 = {
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
        0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
    }, <No data fields>}, 
  n = 0x0
}
$43 = {
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
        0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
    }, <No data fields>}, 
  n = 0x0
}
$44 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 
        0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x3b, 0xb1, 
        0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 
        0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e}, 
      bytes = 0x44, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$45 = {
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
        0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
    }, <No data fields>}, 
  n = 0x0
}
$46 = {
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
        0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
    }, <No data fields>}, 
  n = 0x0
}
$47 = 0x0
$48 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
      0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
  }, <No data fields>}
$49 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
      0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
  }, <No data fields>}
$50 = 0x0
1221	        ss << scriptCode;
$51 = (const CScript &) @0x7f876effb5e0: {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x19, 
    _union = {
      direct = {0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
        0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 0x88, 0xac, 0x0, 0x0, 0x0}, 
      {
        capacity = 0x6814a976, 
        indirect = 0x447f433c471f952f
      }
    }
  }, <No data fields>}
$52 = (const CScript &) @0x7f876effb5e0: {
  <prevector<28u, unsigned char, unsigned int, int>> = {
    _size = 0x19, 
    _union = {
      direct = {0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
        0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 0x88, 0xac, 0x0, 0x0, 0x0}, 
      {
        capacity = 0x6814a976, 
        indirect = 0x447f433c471f952f
      }
    }
  }, <No data fields>}
1222	        ss << amount;
$53 = (const CAmount &) @0x7f876effbec0: 0x12a05f200
1223	        ss << txTo.vin[nIn].nSequence;
$54 = 0xffffffff
1225	        ss << hashOutputs;
$55 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xdd, 0xc2, 0x89, 0x7e, 0xda, 0xc1, 0xd6, 0x7e, 0x87, 0x7c, 0x63, 0xcb, 0x51, 0xff, 0xa, 0x2b, 0xb3, 0xf6, 0xf0, 
      0xab, 0xbd, 0xaa, 0x5f, 0x66, 0xb6, 0x13, 0x86, 0xc8, 0x76, 0x4c, 0x1, 0x8b}
  }, <No data fields>}
1227	        ss << txTo.nLockTime;
$56 = 0x0
1229	        ss << nHashType;
$57 = 0x1
A debugging session is active.

	Inferior 1 [process 1980] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 1980
Breakpoint 1 at 0x7f04f8e7d77b: file script/interpreter.cpp, line 1182.
Note: breakpoint 1 also set at pc 0x7f04f8e7d77b.
Breakpoint 2 at 0x7f04f8e7d77b: file script/interpreter.cpp, line 1182.
Continuing.
[Switching to Thread 0x7f04f27da700 (LWP 8045)]

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f04f27d8ec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1186	    assert(nIn < txTo.vin.size());
1188	    if (sigversion == SIGVERSION_WITNESS_V0) {
1189	        uint256 hashPrevouts;
1190	        uint256 hashSequence;
1191	        uint256 hashOutputs;
1192	        const bool cacheready = cache && cache->ready;
1194	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1195	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1198	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1199	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1203	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1204	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1211	        CHashWriter ss(SER_GETHASH, 0);
1213	        ss << txTo.nVersion;
1215	        ss << hashPrevouts;
$1 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x2, 0x0, 0x0, 0x0, 0x4, 0x7f, 0x0, 0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 0x7d, 0xf2, 
        0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x30, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x27, 
        0xde, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 
        0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x81, 0x7d, 0xf2, 
        0x4, 0x7f, 0x0, 0x0, 0xec, 0x86, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x58, 0x18, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xa0, 
        0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xad, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 
        0xd0, 0xeb, 0xd0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1d, 0xa3, 0xe0, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 
        0x30, 0x92, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x18, 0x0, 0xc8, 0x4, 0x7f}, 
      bytes = 0x4, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1216	        ss << hashSequence;
$2 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x2, 0x0, 0x0, 0x0, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 
        0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x4, 0x7f, 0x0, 
        0x0, 0x27, 0xde, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 
        0x7f, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x81, 
        0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xec, 0x86, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x58, 0x18, 0x0, 0xc8, 0x4, 0x7f, 0x0, 
        0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xad, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 
        0xeb, 0xe3, 0xd0, 0xeb, 0xd0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1d, 0xa3, 0xe0, 0xf8, 0x4, 0x7f, 0x0, 0x0, 
        0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 0x7d, 0xf2, 0x4, 
        0x7f, 0x0, 0x0, 0x30, 0x92, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x18, 0x0, 0xc8, 0x4, 0x7f}, 
      bytes = 0x24, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1221	        ss << txTo.vin[nIn].prevout;
$3 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 
        0x96, 0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x3b, 0xb1, 
        0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 
        0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 
        0xd0, 0xeb, 0x60, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xec, 0x86, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x58, 0x18, 0x0, 
        0xc8, 0x4, 0x7f, 0x0, 0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xad, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 
        0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1d, 0xa3, 0xe0, 0xf8, 
        0x4, 0x7f, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 
        0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x30, 0x92, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x18, 0x0, 0xc8, 0x4, 0x7f}, 
      bytes = 0x44, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1224	        ss << scriptCode;
$4 = {
  ctx = {
    sha = {
      s = {0xf19be4ea, 0x7e232ab3, 0xfee5c472, 0x85342740, 0x103f0d60, 0xbc6eb2, 0x26eb33dc, 0x10768668}, 
      buf = {0x70, 0x66, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 
        0xee, 0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 
        0x0, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 
        0xb7, 0x22, 0x90, 0x79, 0x5e, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 
        0x60, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xec, 0x86, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x58, 0x18, 0x0, 0xc8, 0x4, 
        0x7f, 0x0, 0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xad, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 
        0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1d, 0xa3, 0xe0, 0xf8, 0x4, 0x7f, 
        0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 0x7d, 
        0xf2, 0x4, 0x7f, 0x0, 0x0, 0x30, 0x92, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x18, 0x0, 0xc8, 0x4, 0x7f}, 
      bytes = 0x68, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1225	        ss << amount;
$5 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 
        0xee, 0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 
        0x0, 0x19, 0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 
        0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 
        0x60, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xec, 0x86, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x58, 0x18, 0x0, 0xc8, 0x4, 
        0x7f, 0x0, 0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xad, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 
        0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1d, 0xa3, 0xe0, 0xf8, 0x4, 0x7f, 
        0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 0x7d, 
        0xf2, 0x4, 0x7f, 0x0, 0x0, 0x30, 0x92, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x18, 0x0, 0xc8, 0x4, 0x7f}, 
      bytes = 0x82, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1226	        ss << txTo.vin[nIn].nSequence;
$6 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
        0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 
        0x19, 0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
        0x1e, 0xd2, 0x2a, 0xa3, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 
        0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xec, 0x86, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x58, 0x18, 0x0, 0xc8, 0x4, 0x7f, 
        0x0, 0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xad, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 
        0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1d, 0xa3, 0xe0, 0xf8, 0x4, 0x7f, 0x0, 
        0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 0x7d, 0xf2, 
        0x4, 0x7f, 0x0, 0x0, 0x30, 0x92, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x18, 0x0, 0xc8, 0x4, 0x7f}, 
      bytes = 0x8a, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1228	        ss << hashOutputs;
$7 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
        0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 
        0x19, 0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
        0x1e, 0xd2, 0x2a, 0xa3, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 
        0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xec, 0x86, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x58, 0x18, 0x0, 0xc8, 0x4, 0x7f, 
        0x0, 0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xad, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 
        0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1d, 0xa3, 0xe0, 0xf8, 0x4, 0x7f, 0x0, 
        0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 0x7d, 0xf2, 
        0x4, 0x7f, 0x0, 0x0, 0x30, 0x92, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x18, 0x0, 0xc8, 0x4, 0x7f}, 
      bytes = 0x8e, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1230	        ss << txTo.nLockTime;
$8 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xc2, 0x89, 0x7e, 0xda, 0xc1, 
        0xd6, 0x7e, 0x87, 0x7c, 0x63, 0xcb, 0x51, 0xff, 0xa, 0x2b, 0xb3, 0xf6, 0xf0, 0xab, 0xbd, 0xaa, 0x5f, 0x66, 0xb6, 0x13, 
        0x86, 0xc8, 0x76, 0x4c, 0x1, 0x8b, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
        0x1e, 0xd2, 0x2a, 0xa3, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 
        0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xec, 0x86, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x58, 0x18, 0x0, 0xc8, 0x4, 0x7f, 
        0x0, 0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xad, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 
        0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1d, 0xa3, 0xe0, 0xf8, 0x4, 0x7f, 0x0, 
        0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 0x7d, 0xf2, 
        0x4, 0x7f, 0x0, 0x0, 0x30, 0x92, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x18, 0x0, 0xc8, 0x4, 0x7f}, 
      bytes = 0xae, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1232	        ss << nHashType;
$9 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xc2, 0x89, 0x7e, 0xda, 0xc1, 
        0xd6, 0x7e, 0x87, 0x7c, 0x63, 0xcb, 0x51, 0xff, 0xa, 0x2b, 0xb3, 0xf6, 0xf0, 0xab, 0xbd, 0xaa, 0x5f, 0x66, 0xb6, 0x13, 
        0x86, 0xc8, 0x76, 0x4c, 0x1, 0x8b, 0x0, 0x0, 0x0, 0x0, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 
        0x1e, 0xd2, 0x2a, 0xa3, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 
        0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xec, 0x86, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x58, 0x18, 0x0, 0xc8, 0x4, 0x7f, 
        0x0, 0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xad, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 
        0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1d, 0xa3, 0xe0, 0xf8, 0x4, 0x7f, 0x0, 
        0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 0x7d, 0xf2, 
        0x4, 0x7f, 0x0, 0x0, 0x30, 0x92, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x18, 0x0, 0xc8, 0x4, 0x7f}, 
      bytes = 0xb2, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1234	        return ss.GetHash();
$10 = {
  ctx = {
    sha = {
      s = {0x51d93ded, 0x20307eeb, 0xe2cee452, 0xcc6412d1, 0xe3a2f515, 0x2301a171, 0x6a401a9e, 0x933d8158}, 
      buf = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xc2, 0x89, 0x7e, 0xda, 0xc1, 
        0xd6, 0x7e, 0x87, 0x7c, 0x63, 0xcb, 0x51, 0xff, 0xa, 0x2b, 0xb3, 0xf6, 0xf0, 0xab, 0xbd, 0xaa, 0x5f, 0x66, 0xb6, 0x13, 
        0x86, 0xc8, 0x76, 0x4c, 0x1, 0x8b, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 
        0xd2, 0x2a, 0xa3, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x81, 
        0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xec, 0x86, 0x8a, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x58, 0x18, 0x0, 0xc8, 0x4, 0x7f, 0x0, 
        0x0, 0xa0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xad, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 
        0xeb, 0xe3, 0xd0, 0xeb, 0xd0, 0x81, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1d, 0xa3, 0xe0, 0xf8, 0x4, 0x7f, 0x0, 0x0, 
        0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x82, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xf0, 0x83, 0x7d, 0xf2, 0x4, 
        0x7f, 0x0, 0x0, 0x30, 0x92, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x18, 0x0, 0xc8, 0x4, 0x7f}, 
      bytes = 0xb6, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$11 = 182
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f04f27d8ee0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1186	    assert(nIn < txTo.vin.size());
1188	    if (sigversion == SIGVERSION_WITNESS_V0) {
1189	        uint256 hashPrevouts;
1190	        uint256 hashSequence;
1191	        uint256 hashOutputs;
1192	        const bool cacheready = cache && cache->ready;
1194	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
1195	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);
1198	        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1199	            hashSequence = cacheready ? cache->hashSequence : GetSequenceHash(txTo);
1203	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1204	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
1211	        CHashWriter ss(SER_GETHASH, 0);
1213	        ss << txTo.nVersion;
1215	        ss << hashPrevouts;
$12 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x2, 0x0, 0x0, 0x0, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7c, 0x7d, 0xf2, 0x4, 
        0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x8e, 0xc, 
        0x91, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 
        0x68, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 0xf2, 0x4, 
        0x7f, 0x0, 0x0, 0x40, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 
        0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 
        0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 
        0xf2, 0x4, 0x7f, 0x0, 0x0, 0x23, 0xb9, 0xba, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 
        0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x90, 0x7d, 0x7d, 0xf2, 0x4, 0x7f}, 
      bytes = 0x4, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
$13 = {0x2, 0x0, 0x0, 0x0, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7c, 0x7d, 0xf2, 0x4, 0x7f, 
  0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x8e, 0xc, 0x91, 0xf8, 
  0x4, 0x7f, 0x0, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x68, 0x10, 0x0, 
  0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x40, 
  0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 
  0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 
  0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x23, 0xb9, 0xba, 
  0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x90, 
  0x7d, 0x7d, 0xf2, 0x4, 0x7f}
1216	        ss << hashSequence;
$14 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 0x96, 0x77, 0xd7, 0xca, 
      0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0}
  }, <No data fields>}
$15 = {0x2, 0x0, 0x0, 0x0, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 0x96, 
  0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x4, 0x7f, 0x0, 0x0, 0x8e, 
  0xc, 0x91, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 
  0x68, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 
  0x0, 0x0, 0x40, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 
  0xeb, 0xe3, 0xd0, 0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1, 0x0, 
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 
  0x23, 0xb9, 0xba, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 
  0x0, 0x0, 0x90, 0x7d, 0x7d, 0xf2, 0x4, 0x7f}
$16 = {
  <base_blob<256u>> = {
    static WIDTH = 0x20, 
    data = {0x3b, 0xb1, 0x30, 0x29, 0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 
      0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 0x79, 0x5e, 0x70, 0x66, 0x50, 0x44}
  }, <No data fields>}
1221	        ss << txTo.vin[nIn].prevout;
$17 = {0x70, 0x66, 0x50, 0x44, 0xad, 0x15, 0xf6, 0xb0, 0x31, 0x74, 0x97, 0xb7, 0x2a, 0x6c, 0xad, 0x8f, 0xd0, 0xa1, 0x6c, 0x96, 
  0x77, 0xd7, 0xca, 0x24, 0x6c, 0x3a, 0x43, 0x7f, 0x50, 0xbe, 0xcc, 0x12, 0x1d, 0xe9, 0x2c, 0xc0, 0x3b, 0xb1, 0x30, 0x29, 
  0xce, 0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 
  0x90, 0x79, 0x5e, 0x68, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 
  0xf2, 0x4, 0x7f, 0x0, 0x0, 0x40, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 
  0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 
  0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 0xf2, 
  0x4, 0x7f, 0x0, 0x0, 0x23, 0xb9, 0xba, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 
  0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x90, 0x7d, 0x7d, 0xf2, 0x4, 0x7f}
1224	        ss << scriptCode;
$18 = {0x70, 0x66, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
  0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 0xce, 
  0x7b, 0x1f, 0x55, 0x9e, 0xf5, 0xe7, 0x47, 0xfc, 0xac, 0x43, 0x9f, 0x14, 0x55, 0xa2, 0xec, 0x7c, 0x5f, 0x9, 0xb7, 0x22, 0x90, 
  0x79, 0x5e, 0x68, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 0xf2, 
  0x4, 0x7f, 0x0, 0x0, 0x40, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 
  0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 
  0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 
  0x0, 0x0, 0x23, 0xb9, 0xba, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 
  0x4, 0x7f, 0x0, 0x0, 0x90, 0x7d, 0x7d, 0xf2, 0x4, 0x7f}
1225	        ss << amount;
$19 = {0x88, 0xac, 0x50, 0x44, 0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 
  0x29, 0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 0x19, 
  0x76, 0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 
  0x2a, 0xa3, 0x68, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 0xf2, 
  0x4, 0x7f, 0x0, 0x0, 0x40, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 
  0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 
  0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 
  0x0, 0x0, 0x23, 0xb9, 0xba, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 
  0x4, 0x7f, 0x0, 0x0, 0x90, 0x7d, 0x7d, 0xf2, 0x4, 0x7f}
$20 = 0x17
1226	        ss << txTo.vin[nIn].nSequence;
$21 = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 
  0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 
  0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 0x2a, 
  0xa3, 0x68, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 0xf2, 0x4, 
  0x7f, 0x0, 0x0, 0x40, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 
  0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1, 
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 
  0x0, 0x23, 0xb9, 0xba, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 
  0x7f, 0x0, 0x0, 0x90, 0x7d, 0x7d, 0xf2, 0x4, 0x7f}
1228	        ss << hashOutputs;
$22 = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 
  0xbb, 0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 0x19, 0x76, 
  0xa9, 0x14, 0x68, 0x2f, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 0x2a, 
  0xa3, 0x68, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 0xf2, 0x4, 
  0x7f, 0x0, 0x0, 0x40, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 
  0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1, 
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 
  0x0, 0x23, 0xb9, 0xba, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 
  0x7f, 0x0, 0x0, 0x90, 0x7d, 0x7d, 0xf2, 0x4, 0x7f}
1230	        ss << txTo.nLockTime;
$23 = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xc2, 0x89, 0x7e, 0xda, 0xc1, 0xd6, 
  0x7e, 0x87, 0x7c, 0x63, 0xcb, 0x51, 0xff, 0xa, 0x2b, 0xb3, 0xf6, 0xf0, 0xab, 0xbd, 0xaa, 0x5f, 0x66, 0xb6, 0x13, 0x86, 0xc8, 
  0x76, 0x4c, 0x1, 0x8b, 0x95, 0x1f, 0x47, 0x3c, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 0x2a, 
  0xa3, 0x68, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 0xf2, 0x4, 
  0x7f, 0x0, 0x0, 0x40, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 
  0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1, 
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 
  0x0, 0x23, 0xb9, 0xba, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 
  0x7f, 0x0, 0x0, 0x90, 0x7d, 0x7d, 0xf2, 0x4, 0x7f}
1232	        ss << nHashType;
$24 = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xc2, 0x89, 0x7e, 0xda, 0xc1, 0xd6, 
  0x7e, 0x87, 0x7c, 0x63, 0xcb, 0x51, 0xff, 0xa, 0x2b, 0xb3, 0xf6, 0xf0, 0xab, 0xbd, 0xaa, 0x5f, 0x66, 0xb6, 0x13, 0x86, 0xc8, 
  0x76, 0x4c, 0x1, 0x8b, 0x0, 0x0, 0x0, 0x0, 0x43, 0x7f, 0x44, 0x89, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 0x2a, 
  0xa3, 0x68, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 0xf2, 0x4, 
  0x7f, 0x0, 0x0, 0x40, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 
  0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1, 
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 
  0x0, 0x23, 0xb9, 0xba, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 
  0x7f, 0x0, 0x0, 0x90, 0x7d, 0x7d, 0xf2, 0x4, 0x7f}
1234	        return ss.GetHash();
$25 = {0x88, 0xac, 0x0, 0xf2, 0x5, 0x2a, 0x1, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xc2, 0x89, 0x7e, 0xda, 0xc1, 0xd6, 
  0x7e, 0x87, 0x7c, 0x63, 0xcb, 0x51, 0xff, 0xa, 0x2b, 0xb3, 0xf6, 0xf0, 0xab, 0xbd, 0xaa, 0x5f, 0x66, 0xb6, 0x13, 0x86, 0xc8, 
  0x76, 0x4c, 0x1, 0x8b, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xaf, 0x2, 0x6e, 0x5b, 0xfb, 0x1d, 0x1e, 0xd2, 0x2a, 0xa3, 
  0x68, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x20, 0x10, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0x38, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 
  0x0, 0x0, 0x40, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0xe8, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 
  0xeb, 0xe3, 0xd0, 0xeb, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 0x1, 0x0, 
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x2c, 0x90, 0xeb, 0xe3, 0xd0, 0xeb, 0x60, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 0x0, 0x0, 
  0x23, 0xb9, 0xba, 0xf8, 0x4, 0x7f, 0x0, 0x0, 0xd7, 0x1c, 0x0, 0xc8, 0x4, 0x7f, 0x0, 0x0, 0xe0, 0x7d, 0x7d, 0xf2, 0x4, 0x7f, 
  0x0, 0x0, 0x90, 0x7d, 0x7d, 0xf2, 0x4, 0x7f}
Continuing.

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f04f27d8768: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
Continuing.
[Switching to Thread 0x7f04f1fd9700 (LWP 8046)]

Breakpoint 1, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f04f1fd7ec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
A debugging session is active.

	Inferior 1 [process 8042] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 8042
Breakpoint 1 at 0x7f298d45da1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7f298d43c0f8: file rpc/rawtransaction.cpp, line 964.
Breakpoint 3 at 0x7f298d7a79b3: file key.cpp, line 201.
Breakpoint 4 at 0x7f298d7a7827: file key.cpp, line 180.
Breakpoint 5 at 0x7f298d439653: file rpc/rawtransaction.cpp, line 726.
Breakpoint 6 at 0x7f298d6842eb: file wallet/rpcwallet.cpp, line 3260.
Breakpoint 7 at 0x7f298d43b86f: file rpc/rawtransaction.cpp, line 884.
Breakpoint 8 at 0x7f298d7d102e: file script/sign.cpp, line 150.
Breakpoint 9 at 0x7f298d82072b: file script/interpreter.cpp, line 1182.
Breakpoint 10 at 0x7f298d7d07d3: file script/sign.cpp, line 75.
Breakpoint 11 at 0x7f298d7d0586: file script/sign.cpp, line 45.
Breakpoint 12 at 0x7f298d7d0411: file script/sign.cpp, line 21.
Continuing.
[Switching to Thread 0x7f298717d700 (LWP 10198)]

Breakpoint 1, CRPCTable::execute (this=0x7f298de26fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:964
964	{
Continuing.

Breakpoint 7, signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:884
884	{
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f298717c0b0) at key.cpp:180
180	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 5, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f298717c230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 8, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 0, 
    whichTypeRet=@0x7f298717b514: TX_NONSTANDARD, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f298717b514: TX_SCRIPTHASH, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 1, capacity 1 = {...}, 
    whichTypeRet=@0x7f298717b580: 1610618982, sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:75
75	{
Continuing.

Breakpoint 11, Sign1 (address=..., creator=..., scriptCode=..., ret=std::vector of length 0, capacity 1, 
    sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:45
45	{
46	    std::vector<unsigned char> vchSig;
47	    if (!creator.CreateSig(vchSig, address, scriptCode, sigversion))
Continuing.

Breakpoint 12, TransactionSignatureCreator::CreateSig (this=0x7f298717bea0, vchSig=std::vector of length 0, capacity 0, 
    address=..., scriptCode=..., sigversion=SIGVERSION_WITNESS_V0) at script/sign.cpp:21
21	{
22	    CKey key;  // key中存放着私钥
23	    if (!keystore->GetKey(address, key))
30	    if (sigversion == SIGVERSION_WITNESS_V0 && !key.IsCompressed())
33	    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);
$1 = {
  static CURRENT_VERSION = 0x2, 
  static MAX_STANDARD_VERSION = 0x2, 
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 
              0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
          }, <No data fields>}, 
        n = 0x0
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x70, 0x34, 0x5f, 0x8f, 0x29, 0x7f, 0x0, 0x0, 0x0, 0x10, 0xd, 0x8d, 0x29, 0x7f, 0x0, 0x0, 0x1b, 0x10, 
              0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0xa5, 0x1, 0x0, 0x0}, 
            {
              capacity = 0x8f5f3470, 
              indirect = 0x8d0d100000007f29
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 2, capacity 2 = {{
      nValue = 0x80172340, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }, {
      nValue = 0xa9df8c80, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 
              0x4a, 0x4a, 0xc7, 0xb7, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x986214a9, 
              indirect = 0x4845309d352ba53e
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0, 
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0xce, 0x1b, 0x6a, 0x54, 0x79, 0xf8, 0x41, 0xf1, 0x77, 0x3c, 0xe6, 0xde, 0x15, 0xce, 0x19, 0xdb, 0x50, 0xf8, 
        0x4a, 0x4c, 0xfa, 0xe6, 0x73, 0x83, 0xdb, 0x97, 0x3a, 0x61, 0xe0, 0xf3, 0x6b, 0xfb}
    }, <No data fields>}
}

Breakpoint 9, SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f298717bec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1182
1182	{
1186	    assert(nIn < txTo.vin.size());
Cannot resolve function operator* to any overloaded instance
1188	    if (sigversion == SIGVERSION_WITNESS_V0) {
$2 = (const CTransaction &) @0x7f298717bef0: {
  static CURRENT_VERSION = 0x2, 
  static MAX_STANDARD_VERSION = 0x2, 
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 
              0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
          }, <No data fields>}, 
        n = 0x0
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x70, 0x34, 0x5f, 0x8f, 0x29, 0x7f, 0x0, 0x0, 0x0, 0x10, 0xd, 0x8d, 0x29, 0x7f, 0x0, 0x0, 0x1b, 0x10, 
              0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0xa5, 0x1, 0x0, 0x0}, 
            {
              capacity = 0x8f5f3470, 
              indirect = 0x8d0d100000007f29
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 2, capacity 2 = {{
      nValue = 0x80172340, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }, {
      nValue = 0xa9df8c80, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 
              0x4a, 0x4a, 0xc7, 0xb7, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x986214a9, 
              indirect = 0x4845309d352ba53e
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0, 
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0xce, 0x1b, 0x6a, 0x54, 0x79, 0xf8, 0x41, 0xf1, 0x77, 0x3c, 0xe6, 0xde, 0x15, 0xce, 0x19, 0xdb, 0x50, 0xf8, 
        0x4a, 0x4c, 0xfa, 0xe6, 0x73, 0x83, 0xdb, 0x97, 0x3a, 0x61, 0xe0, 0xf3, 0x6b, 0xfb}
    }, <No data fields>}
}
1189	        uint256 hashPrevouts;
$3 = 0x0
Function "GetPrevoutHash" not defined.
Make breakpoint pending on future shared library load? (y or [n]) Function "GetPrevoutHash" not defined.
Make breakpoint pending on future shared library load? (y or [n]) 1190	        uint256 hashSequence;
1191	        uint256 hashOutputs;
1192	        const bool cacheready = cache && cache->ready;
1194	        if (!(nHashType & SIGHASH_ANYONECANPAY)) {
$4 = 0x0
Breakpoint 13 at 0x7f298d8202b1: file script/interpreter.cpp, line 1144.
1195	            hashPrevouts = cacheready ? cache->hashPrevouts : GetPrevoutHash(txTo);

Breakpoint 13, (anonymous namespace)::GetPrevoutHash (txTo=...) at script/interpreter.cpp:1144
1144	uint256 GetPrevoutHash(const CTransaction& txTo) {
$5 = (const CTransaction &) @0x7f298717bef0: {
  static CURRENT_VERSION = 0x2, 
  static MAX_STANDARD_VERSION = 0x2, 
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 
              0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
          }, <No data fields>}, 
        n = 0x0
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x70, 0x34, 0x5f, 0x8f, 0x29, 0x7f, 0x0, 0x0, 0x0, 0x10, 0xd, 0x8d, 0x29, 0x7f, 0x0, 0x0, 0x1b, 0x10, 
              0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0xa5, 0x1, 0x0, 0x0}, 
            {
              capacity = 0x8f5f3470, 
              indirect = 0x8d0d100000007f29
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 2, capacity 2 = {{
      nValue = 0x80172340, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }, {
      nValue = 0xa9df8c80, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 
              0x4a, 0x4a, 0xc7, 0xb7, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x986214a9, 
              indirect = 0x4845309d352ba53e
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0, 
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0xce, 0x1b, 0x6a, 0x54, 0x79, 0xf8, 0x41, 0xf1, 0x77, 0x3c, 0xe6, 0xde, 0x15, 0xce, 0x19, 0xdb, 0x50, 0xf8, 
        0x4a, 0x4c, 0xfa, 0xe6, 0x73, 0x83, 0xdb, 0x97, 0x3a, 0x61, 0xe0, 0xf3, 0x6b, 0xfb}
    }, <No data fields>}
}
$6 = std::vector of length 1, capacity 1 = {{
    prevout = {
      hash = {
        <base_blob<256u>> = {
          static WIDTH = 0x20, 
          data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 
            0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
        }, <No data fields>}, 
      n = 0x0
    }, 
    scriptSig = {
      <prevector<28u, unsigned char, unsigned int, int>> = {
        _size = 0x0, 
        _union = {
          direct = {0x70, 0x34, 0x5f, 0x8f, 0x29, 0x7f, 0x0, 0x0, 0x0, 0x10, 0xd, 0x8d, 0x29, 0x7f, 0x0, 0x0, 0x1b, 0x10, 0x0, 
            0x0, 0x4, 0x0, 0x0, 0x0, 0xa5, 0x1, 0x0, 0x0}, 
          {
            capacity = 0x8f5f3470, 
            indirect = 0x8d0d100000007f29
          }
        }
      }, <No data fields>}, 
    nSequence = 0xffffffff, 
    scriptWitness = {
      stack = std::vector of length 0, capacity 0
    }, 
    static SEQUENCE_FINAL = 0xffffffff, 
    static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
    static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
    static SEQUENCE_LOCKTIME_MASK = 0xffff, 
    static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
  }}
1145	    CHashWriter ss(SER_GETHASH, 0);
1146	    for (const auto& txin : txTo.vin) {
1147	        ss << txin.prevout;
1146	    for (const auto& txin : txTo.vin) {
1149	    return ss.GetHash();
$7 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 0xd9, 
        0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45, 0x0, 0x0, 0x0, 0x0, 0x29, 0x7f, 0x0, 
        0x0, 0x0, 0x2c, 0xd7, 0xc7, 0xbb, 0xd2, 0x1a, 0x59, 0x30, 0xb0, 0x17, 0x87, 0x29, 0x7f, 0x0, 0x0, 0xef, 0xac, 0x24, 
        0x8d, 0x29, 0x7f, 0x0, 0x0}, 
      bytes = 0x24, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
Breakpoint 14 at 0x7f298d8203b6: file script/interpreter.cpp, line 1152.
Continuing.

Breakpoint 14, (anonymous namespace)::GetSequenceHash (txTo=...) at script/interpreter.cpp:1152
1152	uint256 GetSequenceHash(const CTransaction& txTo) {
1153	    CHashWriter ss(SER_GETHASH, 0);
$8 = (const CTransaction &) @0x7f298717bef0: {
  static CURRENT_VERSION = 0x2, 
  static MAX_STANDARD_VERSION = 0x2, 
  vin = std::vector of length 1, capacity 1 = {{
      prevout = {
        hash = {
          <base_blob<256u>> = {
            static WIDTH = 0x20, 
            data = {0x0, 0xcd, 0x8b, 0x2c, 0xb2, 0x36, 0x4e, 0x85, 0x90, 0x7f, 0xda, 0x5a, 0xa9, 0x4e, 0x52, 0xee, 0x29, 0xbb, 
              0xd9, 0x7b, 0x12, 0xaf, 0x14, 0x80, 0x5f, 0x21, 0x7b, 0x2f, 0x2a, 0x8f, 0xa8, 0x45}
          }, <No data fields>}, 
        n = 0x0
      }, 
      scriptSig = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x0, 
          _union = {
            direct = {0x70, 0x34, 0x5f, 0x8f, 0x29, 0x7f, 0x0, 0x0, 0x0, 0x10, 0xd, 0x8d, 0x29, 0x7f, 0x0, 0x0, 0x1b, 0x10, 
              0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0xa5, 0x1, 0x0, 0x0}, 
            {
              capacity = 0x8f5f3470, 
              indirect = 0x8d0d100000007f29
            }
          }
        }, <No data fields>}, 
      nSequence = 0xffffffff, 
      scriptWitness = {
        stack = std::vector of length 0, capacity 0
      }, 
      static SEQUENCE_FINAL = 0xffffffff, 
      static SEQUENCE_LOCKTIME_DISABLE_FLAG = 0x80000000, 
      static SEQUENCE_LOCKTIME_TYPE_FLAG = 0x400000, 
      static SEQUENCE_LOCKTIME_MASK = 0xffff, 
      static SEQUENCE_LOCKTIME_GRANULARITY = 0x9
    }}, 
  vout = std::vector of length 2, capacity 2 = {{
      nValue = 0x80172340, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 
              0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x7a0714a9, 
              indirect = 0x71f2af7e703d4c41
            }
          }
        }, <No data fields>}
    }, {
      nValue = 0xa9df8c80, 
      scriptPubKey = {
        <prevector<28u, unsigned char, unsigned int, int>> = {
          _size = 0x17, 
          _union = {
            direct = {0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 
              0x4a, 0x4a, 0xc7, 0xb7, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
            {
              capacity = 0x986214a9, 
              indirect = 0x4845309d352ba53e
            }
          }
        }, <No data fields>}
    }}, 
  nVersion = 0x2, 
  nLockTime = 0x0, 
  hash = {
    <base_blob<256u>> = {
      static WIDTH = 0x20, 
      data = {0xce, 0x1b, 0x6a, 0x54, 0x79, 0xf8, 0x41, 0xf1, 0x77, 0x3c, 0xe6, 0xde, 0x15, 0xce, 0x19, 0xdb, 0x50, 0xf8, 
        0x4a, 0x4c, 0xfa, 0xe6, 0x73, 0x83, 0xdb, 0x97, 0x3a, 0x61, 0xe0, 0xf3, 0x6b, 0xfb}
    }, <No data fields>}
}
1154	    for (const auto& txin : txTo.vin) {
1155	        ss << txin.nSequence;
1154	    for (const auto& txin : txTo.vin) {
$9 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0xff, 0xff, 0xff, 0xff, 0x95, 0xc8, 0x25, 0xdd, 0x74, 0xd6, 0x36, 0x9d, 0x7c, 0x0, 0x69, 0x5d, 0x53, 0x7e, 0xa8, 
        0xd5, 0x79, 0xcc, 0x9, 0xd6, 0x15, 0x9c, 0x95, 0x5a, 0x16, 0xd6, 0xe4, 0x6d, 0x80, 0x0 <repeats 29 times>, 0x1, 0x0}, 
      bytes = 0x4, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1157	    return ss.GetHash();
$10 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0xff, 0xff, 0xff, 0xff, 0x95, 0xc8, 0x25, 0xdd, 0x74, 0xd6, 0x36, 0x9d, 0x7c, 0x0, 0x69, 0x5d, 0x53, 0x7e, 0xa8, 
        0xd5, 0x79, 0xcc, 0x9, 0xd6, 0x15, 0x9c, 0x95, 0x5a, 0x16, 0xd6, 0xe4, 0x6d, 0x80, 0x0 <repeats 29 times>, 0x1, 0x0}, 
      bytes = 0x4, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1158	}
SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f298717bec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1203
1203	        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {
1204	            hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);
Function "GetOutputsHash" not defined.
Make breakpoint pending on future shared library load? (y or [n]) Breakpoint 15 at 0x7f298d8204bf: file script/interpreter.cpp, line 1160.

Breakpoint 15, (anonymous namespace)::GetOutputsHash (txTo=...) at script/interpreter.cpp:1160
1160	uint256 GetOutputsHash(const CTransaction& txTo) {
1161	    CHashWriter ss(SER_GETHASH, 0);
1162	    for (const auto& txout : txTo.vout) {
1163	        ss << txout;
$11 = (const CTxOut &) @0x7f29600019c0: {
  nValue = 0x80172340, 
  scriptPubKey = {
    <prevector<28u, unsigned char, unsigned int, int>> = {
      _size = 0x17, 
      _union = {
        direct = {0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 
          0x87, 0x82, 0x79, 0xc8, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0}, 
        {
          capacity = 0x7a0714a9, 
          indirect = 0x71f2af7e703d4c41
        }
      }
    }, <No data fields>}
}
1162	    for (const auto& txout : txTo.vout) {
1163	        ss << txout;
$12 = {
  ctx = {
    sha = {
      s = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19}, 
      buf = {0x40, 0x23, 0x17, 0x80, 0x0, 0x0, 0x0, 0x0, 0x17, 0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 
        0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x80, 0x0 <repeats 29 times>, 0x1, 0x0}, 
      bytes = 0x20, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1162	    for (const auto& txout : txTo.vout) {
1165	    return ss.GetHash();
$13 = {
  ctx = {
    sha = {
      s = {0x7a40e4e9, 0xef0b5a20, 0x7dbda124, 0xce8d32bb, 0x2e7ae953, 0xc7522f8, 0xc0a71277, 0x862aa236}, 
      buf = {0x40, 0x23, 0x17, 0x80, 0x0, 0x0, 0x0, 0x0, 0x17, 0xa9, 0x14, 0x7, 0x7a, 0x41, 0x4c, 0x3d, 0x70, 0x7e, 0xaf, 
        0xf2, 0x71, 0x83, 0x69, 0xba, 0xd4, 0x2b, 0x26, 0x87, 0x82, 0x79, 0xc8, 0x87, 0x80, 0x8c, 0xdf, 0xa9, 0x0, 0x0, 0x0, 
        0x0, 0x17, 0xa9, 0x14, 0x62, 0x98, 0x3e, 0xa5, 0x2b, 0x35, 0x9d, 0x30, 0x45, 0x48, 0xbf, 0x9, 0xe4, 0xa0, 0x9f, 0x4a, 
        0x4a, 0xc7, 0xb7, 0x0, 0x87}, 
      bytes = 0x40, 
      static OUTPUT_SIZE = 0x20
    }, 
    static OUTPUT_SIZE = 0x20
  }, 
  nType = 0x4, 
  nVersion = 0x0
}
1166	}
SignatureHash (scriptCode=..., txTo=..., nIn=0, nHashType=1, amount=@0x7f298717bec0: 5000000000, 
    sigversion=SIGVERSION_WITNESS_V0, cache=0x0) at script/interpreter.cpp:1211
1211	        CHashWriter ss(SER_GETHASH, 0);
1213	        ss << txTo.nVersion;
1215	        ss << hashPrevouts;
1216	        ss << hashSequence;
1221	        ss << txTo.vin[nIn].prevout;
1224	        ss << scriptCode;
1225	        ss << amount;
1226	        ss << txTo.vin[nIn].nSequence;
1228	        ss << hashOutputs;
1230	        ss << txTo.nLockTime;
1232	        ss << nHashType;
1234	        return ss.GetHash();
1254	}
A debugging session is active.

	Inferior 1 [process 10195] will be detached.

Quit anyway? (y or n) Detaching from program: /home/StephenSun/bitcoin/src/bitcoind, process 10195
Breakpoint 1 at 0x7f298d45da1f: file rpc/server.cpp, line 473.
Breakpoint 2 at 0x7f298d43c0f8: file rpc/rawtransaction.cpp, line 964.
Breakpoint 3 at 0x7f298d7a79b3: file key.cpp, line 201.
Breakpoint 4 at 0x7f298d7a7827: file key.cpp, line 180.
Breakpoint 5 at 0x7f298d439653: file rpc/rawtransaction.cpp, line 726.
Breakpoint 6 at 0x7f298d6842eb: file wallet/rpcwallet.cpp, line 3260.
Breakpoint 7 at 0x7f298d43b86f: file rpc/rawtransaction.cpp, line 884.
Breakpoint 8 at 0x7f298d7d102e: file script/sign.cpp, line 150.
Breakpoint 9 at 0x7f298d82072b: file script/interpreter.cpp, line 1182.
Breakpoint 10 at 0x7f298d7d07d3: file script/sign.cpp, line 75.
Breakpoint 11 at 0x7f298d7d0586: file script/sign.cpp, line 45.
Breakpoint 12 at 0x7f298d7d0411: file script/sign.cpp, line 21.
Continuing.
[Switching to Thread 0x7f298717d700 (LWP 10198)]

Breakpoint 1, CRPCTable::execute (this=0x7f298de26fa0 <tableRPC>, request=...) at rpc/server.cpp:473
473	{
476	        LOCK(cs_rpcWarmup);
Continuing.

Breakpoint 2, signrawtransaction (request=...) at rpc/rawtransaction.cpp:964
964	{
Continuing.

Breakpoint 7, signrawtransactionwithkey (request=...) at rpc/rawtransaction.cpp:884
884	{
Continuing.

Breakpoint 4, CKey::GetPubKey (this=0x7f298717c0b0) at key.cpp:180
180	CPubKey CKey::GetPubKey() const {
Continuing.

Breakpoint 5, SignTransaction (mtx=..., prevTxsUnival=..., keystore=0x7f298717c230, is_temp_keystore=true, hashType=...)
    at rpc/rawtransaction.cpp:726
726	{
Continuing.

Breakpoint 8, ProduceSignature (creator=..., fromPubKey=..., sigdata=...) at script/sign.cpp:150
150	{
Continuing.

Breakpoint 10, SignStep (creator=..., scriptPubKey=..., ret=std::vector of length 0, capacity 0, 
    whichTypeRet=@0x7f298717b514: TX_NONSTANDARD, sigversion=SIGVERSION_BASE) at script/sign.cpp:75
75	{
